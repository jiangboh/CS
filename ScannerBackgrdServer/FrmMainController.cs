using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Security.Cryptography;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;
using System.Windows.Forms;
using Newtonsoft.Json;
using ScannerBackgrdServer.ApController;
using ScannerBackgrdServer.AppController;
using ScannerBackgrdServer.Common;
using static ScannerBackgrdServer.Common.MsgStruct;
using System.Runtime.InteropServices;
using System.Net;

namespace ScannerBackgrdServer
{
    #region 消息交互相关

    public enum MessageType       //消息类型
    {
        MSG_STRING = 0,
        MSG_INT = 1,
        MSG_DOUBLE = 2,
        MSG_DATATABLE = 3,
        MSG_XML = 4,
        MSG_STATUS = 5,
        MSG_JSON = 6,
        MSG_MAX = 7
    }

    public struct MessageBody       //消息实体
    {
        //public string bString; 
        //public int bInt;
        //public double bDouble;
        //public DataTable bDataTable;
        //public string bXml;
        //public int bStatus;
        public string bJson;
    }

    /// <summary>
    /// 声明消息交互的delegate对象,用于ApCtrl，
    /// MainCtrl和AppCtrl之间进行消息的交互
    /// </summary>
    /// <param name="mt"></param>
    /// <param name="mb"></param>
    public delegate void MessageDelegate(MessageType mt, MessageBody mb);

    #region 结构体for IMMS，2018-10-15

    /// <summary>
    /// Ap设备信息
    /// </summary>
    public struct Ap_Info_Struct1
    {
        /// <summary>
        /// Ap的Sn
        /// </summary>
        public string SN { get; set; }

        /// <summary>
        /// Ap的全名
        /// </summary>
        public string Fullname { get; set; }

        /// <summary>  
        /// Ap的Ip 。当为NullDevice时表示不向设备发送该消息
        /// </summary>  
        public string IP { get; set; }

        /// <summary>  
        /// Ap的Port
        /// </summary>  
        public int Port { get; set; }

        /// <summary>  
        /// Ap的类型：LTE,WCDMA,GSM,TD-SCDMA           
        /// </summary>  
        public string Type { get; set; }
    }

    /// <summary>
    /// App信息
    /// </summary>
    public struct App_Info_Struct1
    {
        /// <summary>
        /// App登录用户名
        /// </summary>
        public string User { get; set; }

        /// <summary>
        /// App登录用户所属组
        /// </summary>
        public string Group { get; set; }

        /// <summary>
        /// App登录用户所属域
        /// </summary>
        public string Domain { get; set; }

        /// <summary>  
        /// Ap的Ip 
        /// </summary>  
        public string Ip { get; set; }

        /// <summary>  
        /// Ap的Port
        /// </summary>  
        public int Port { get; set; }

        /// <summary>  
        /// App的类型：WEB,WINDOWS,ANDROID等
        /// </summary>  
        public string Type { get; set; }
    }    

    public struct Msg_Body_Struct1
    {
        public string type;
        public Dictionary<string, object> dic;
        public List<Name_DIC_Struct> n_dic;
    }

    public struct IMMS
    {
        /// <summary>
        /// 版本信息
        /// </summary>
        public string Version { get; set; }

        /// <summary>
        /// Ap信息
        /// </summary>
        public Ap_Info_Struct1 ApInfo;

        /// <summary>
        /// 消息内容
        /// </summary>
        public Msg_Body_Struct1 Body;

        //////////////////////////////////////////

        /// <summary>
        /// 消息类型（Notice;Get;GetAck;Set;SetAck）
        /// </summary>
        public string MsgType { get; set; }

        /// <summary>
        /// App信息
        /// </summary>
        public App_Info_Struct1 AppInfo;

    }

    #endregion

    #region 结构体for批量导入导出，2018-11-05


    public struct strBIE_DomainInfo
    {
        public string name;                //站点的名称,如"南山"
        public string parentNameFullPath;  //站点的父节点全路径，如"设备.深圳"
        public string isStation;           //是否为站点，"0":不是，"1":是    
    }

    public struct strBIE_DeviceInfo
    {
        public string name;                //设备的名称,如"电信FDD"
        public string parentNameFullPath;  //设备的父节点全路径，如"设备.深圳.南山"
        public string mode;                //GSM,GSM-V2,TD-SCDMA,WCDMA,LTE-TDD,LTE-FDD   
    }


    public struct strBIE_BwList
    {
        public string imsi;              //IMSI号
        public string imei;              //IMEI号
        public string bwFlag;            //名单标识
        public string rbStart;           //起始RB
        public string rbEnd;             //结束RB        
        public string des;               //描述       
    };

    /// <summary>
    /// 只包含若干必需的项
    /// </summary>
    public struct strBIE_LTE
    {
        public string name;                //设备的名称,如"电信FDD"
        public string parentNameFullPath;  //设备的父节点全路径，如"设备.深圳.南山"

        public string mode;              //制式：GSM,TD-SCDMA,WCDMA,LTE-TDD,LTE-FDD
        public string primaryplmn;       //主plmn
        public string earfcndl;          //工作上行频点
        public string earfcnul;          //工作下行频点
        public string cellid;            //cellid, 2018-06-26
        public string pci;               //工作pci
        public string bandwidth;         //工作带宽
        public string tac;               //TAC
        public string txpower;           //功率衰减
        public string periodtac;         //TAC变化周期
        public string manualfreq;        //选频方式 0：自动选频 1：手动选频
        public string bootMode;          //设备启动方式 0：半自动 1：全自动
        public string Earfcnlist;        //频点列表，如：38950,39150
        public string Bandoffset;        //频偏":"39,70000;38,10000
        public string NTP;               //NTP服务器ip
        public string ntppri;            //Ntp的优先级
        public string source;            //同步源（0：GPS ； 1：CNM ； 2：no sync）
        public string ManualEnable;      //是否设定手动同步源
        public string ManualEarfcn;      //手动设置同步频点
        public string ManualPci;         //手动设置同步pci
        public string ManualBw;          //手动设置同步带宽
        public string gps_select;        //GPS配置，0表示NOGPS，1表示GPS
        public string otherplmn;         //多PLMN选项，多个之间用逗号隔开
        public string periodFreq;        //{周期:freq1,freq2,freq3}

        public string activeTime1Start;  //生效时间1的起始时间
        public string activeTime1Ended;  //生效时间1的结束时间
        public string activeTime2Start;  //生效时间2的起始时间
        public string activeTime2Ended;  //生效时间2的结束时间
        public string activeTime3Start;  //生效时间3的起始时间
        public string activeTime3Ended;  //生效时间3的结束时间

        public List<strBIE_BwList> lstBwList;
    }


    public struct strBIE_Sys
    {
        public string sys;                  //载波标识，0或1

        public string bWorkingMode;          //工作模式。1：侦码模式；3：驻留模式(GSM/CDMA支持)
        public string bC;                    //是否自动切换模式。保留
        public string wRedirectCellUarfcn;   //CDMA黑名单频点

        public string bPLMNId;               //PLMN标志
        public string bTxPower;              //实际发射功率.设置发射功率衰减寄存器, 0输出最大功率, 每增加1, 衰减1DB
        public string bRxGain;               //接收信号衰减寄存器. 每增加1增加1DB的增益
        public string wPhyCellId;            //物理小区ID。GSM：不用；CDMA：PN
        public string wLAC;                  //追踪区域码。GSM：LAC;CDMA：REG_ZONE
        public string wUARFCN;               //小区频点。CDMA制式为BSID
        public string dwCellId;              //小区ID。CDMA制式没有小区ID，高WORD是SID，低WORD是NID

        public string bSMSOriginalNumLen;    //主叫号码长度
        public string bSMSOriginalNum;       //主叫号码
        public string bSMSContentLen;        //短信内容字数，0~70
        public string bSMSContent;           //短信内容

        public string activeTime1Start;      //生效时间1的起始时间
        public string activeTime1Ended;      //生效时间1的结束时间
        public string activeTime2Start;      //生效时间2的起始时间
        public string activeTime2Ended;      //生效时间2的结束时间
        public string activeTime3Start;      //生效时间3的起始时间
        public string activeTime3Ended;      //生效时间3的结束时间
    }

    public struct strBIE_GSM_ZYF
    {
        public string name;                //设备的名称,如"电信FDD"
        public string parentNameFullPath;  //设备的父节点全路径，如"设备.深圳.南山"

        public strBIE_Sys bieSys0;          //载波0的信息
        public strBIE_Sys bieSys1;          //载波1的信息

        public List<strBIE_BwList> lstBwList;
    }

    public struct strBIE_CDMA_ZYF
    {
        public string name;                 //设备的名称,如"电信FDD"
        public string parentNameFullPath;   //设备的父节点全路径，如"设备.深圳.南山"

        public string bWorkingMode;          //工作模式。1：侦码模式；3：驻留模式(GSM/CDMA支持)
        public string bC;                    //是否自动切换模式。保留
        public string wRedirectCellUarfcn;   //CDMA黑名单频点
                                             //public string dwDateTime;            //当前时间
        public string bPLMNId;               //PLMN标志
        public string bTxPower;              //实际发射功率.设置发射功率衰减寄存器, 0输出最大功率, 每增加1, 衰减1DB
        public string bRxGain;               //接收信号衰减寄存器. 每增加1增加1DB的增益
        public string wPhyCellId;            //物理小区ID。GSM：不用；CDMA：PN
        public string wLAC;                  //追踪区域码。GSM：LAC;CDMA：REG_ZONE
        public string wUARFCN;               //小区频点。CDMA制式为BSID
        public string dwCellId;              //小区ID。CDMA制式没有小区ID，高WORD是SID，低WORD是NID

        public string bSMSOriginalNumLen;    //主叫号码长度
        public string bSMSOriginalNum;       //主叫号码
        public string bSMSContentLen;        //短信内容字数，0~70
        public string bSMSContent;           //短信内容

        public string activeTime1Start;      //生效时间1的起始时间
        public string activeTime1Ended;      //生效时间1的结束时间
        public string activeTime2Start;      //生效时间2的起始时间
        public string activeTime2Ended;      //生效时间2的结束时间
        public string activeTime3Start;      //生效时间3的起始时间
        public string activeTime3Ended;      //生效时间3的结束时间

        public string wARFCN1;              //工作频点1
        public string bARFCN1Mode;          //工作频点1模式。0表示扫描，1表示常开,2表示关闭
        public string bReserved1;           //保留字段1
        public string wARFCN1Duration;      //工作频点1扫描时长
        public string wARFCN1Period;        //工作频点1扫描间隔

        public string wARFCN2;              //工作频点2
        public string bARFCN2Mode;          //工作频点2模式。0表示扫描，1表示常开,2表示关闭
        public string bReserved2;           //保留字段2
        public string wARFCN2Duration;      //工作频点2扫描时长
        public string wARFCN2Period;        //工作频点2扫描间隔

        public string wARFCN3;              //工作频点3
        public string bARFCN3Mode;          //工作频点3模式。0表示扫描，1表示常开,2表示关闭
        public string bReserved3;           //保留字段3
        public string wARFCN3Duration;      //工作频点3扫描时长
        public string wARFCN3Period;        //工作频点3扫描间隔

        public string wARFCN4;              //工作频点4
        public string bARFCN4Mode;          //工作频点4模式。0表示扫描，1表示常开,2表示关闭
        public string bReserved4;           //保留字段4
        public string wARFCN4Duration;      //工作频点4扫描时长
        public string wARFCN4Period;        //工作频点4扫描间隔      

        public List<strBIE_BwList> lstBwList;
    }

    /// <summary>
    /// 批量导入导出的结构体
    /// </summary>
    public struct strBatchImportExport
    {
        public List<strBIE_DomainInfo> lstDomainInfo;
        public List<strBIE_DeviceInfo> lstDeviceInfo;

        public List<strBIE_LTE> lstLTE;
        public List<strBIE_GSM_ZYF> lstGSM_ZYF;
        public List<strBIE_CDMA_ZYF> lstCDMA_ZYF;
    }

    #endregion
   
    #endregion

    public partial class FrmMainController : Form
    {
        #region 内存回收

        // 2018-09-6 

        [DllImport("kernel32.dll", EntryPoint = "SetProcessWorkingSetSize")]
        public static extern int SetProcessWorkingSetSize(IntPtr process, int minSize, int maxSize);

        /// <summary>
        /// 释放内存
        /// </summary>
        public static void ClearMemory()
        {
            GC.Collect();
            GC.WaitForPendingFinalizers();
          
            //if (Environment.OSVersion.Platform == PlatformID.Win32NT)
            //{
            //    SetProcessWorkingSetSize(System.Diagnostics.Process.GetCurrentProcess().Handle, -1, -1);
            //}
        }

        #endregion       

        #region IMSI解析

        [DllImport(@"Lib\PhoneAreaInterface.dll", EntryPoint = "initGLFunc", CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitGLFunc();

        [DllImport(@"Lib\PhoneAreaInterface.dll", EntryPoint = "getLocationAndOprator", CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLocationAndOprator(string imsi, ref byte location, ref byte country, ref byte opreator, ref byte isdn);

        public struct strImsiParse       
        {
            /*
             * 号码归属地 = 国家 + 位置
             */ 
            public string location;    //位置
            public string country;     //国家
            public string operators;   //运营商
            public string isdn;        //综合业务数字网
        }               

        /// <summary>
        /// 用于调试Log的互斥
        /// </summary>
        private static Object mutex_ImsiParse = new Object();

        // 2018-07-25
        private static Dictionary<string, strImsiParse> gDicImsiParse = new Dictionary<string, strImsiParse>();

        public int Location_And_Operator_Init()
        {
            return InitGLFunc();
        }

        /// <summary>
        /// 根据配置，将imsi号对应的信息获取出来
        /// </summary>
        /// <param name="imsi"></param>
        /// <param name="imsiParse"></param>
        /// <returns></returns>
        public int Location_And_Operator_Get(string imsi, ref strImsiParse imsiParse)
        {
            int rtv = -1;

            byte[] _location = new byte[128];
            byte[] _country = new byte[128];
            byte[] _operators = new byte[128];
            byte[] _isdn = new byte[64];

            if (string.IsNullOrEmpty(imsi))
            {
                return -1;
            }

            imsiParse = new strImsiParse();

            if (DataController.ImsiParseMode == 0)
            {
                #region 直接从接口获取

                rtv = GetLocationAndOprator(imsi, ref _location[0], ref _country[0], ref _operators[0], ref _isdn[0]);
                if (rtv != 0)
                {
                    imsiParse.location = Encoding.UTF8.GetString(_location, 0, _location.Length).Replace('\0', ' ').Trim();

                    if (Location.Equals(""))
                    {
                        imsiParse.location = "Null";
                    }

                    imsiParse.country = Encoding.UTF8.GetString(_country, 0, _country.Length).Replace('\0', ' ').Trim();
                    if (imsiParse.country.Equals(""))
                    {
                        imsiParse.country = "Null";
                    }

                    imsiParse.operators = Encoding.UTF8.GetString(_operators, 0, _operators.Length).Replace('\0', ' ').Trim();
                    if (imsiParse.operators.Equals(""))
                    {
                        imsiParse.operators = "Null";
                    }

                    imsiParse.isdn = Encoding.UTF8.GetString(_isdn, 0, _isdn.Length).Replace('\0', ' ').Trim();
                    if (imsiParse.isdn.Equals(""))
                    {
                        imsiParse.isdn = "Null";
                    }
                }
                else
                {
                    imsiParse.location = "Null";
                    imsiParse.country = string.Empty;
                    imsiParse.operators = "Null";
                    imsiParse.isdn = "Null";
                }

                #endregion
            }
            else
            {
                #region 从接口和字典获取

                lock (mutex_ImsiParse)
                {
                    if (gDicImsiParse.ContainsKey(imsi))
                    {
                        imsiParse = gDicImsiParse[imsi];
                    }
                    else
                    {
                        rtv = GetLocationAndOprator(imsi, ref _location[0], ref _country[0], ref _operators[0], ref _isdn[0]);
                        if (rtv != 0)
                        {
                            imsiParse.location = Encoding.UTF8.GetString(_location, 0, _location.Length).Replace('\0', ' ').Trim();

                            if (Location.Equals(""))
                            {
                                imsiParse.location = "Null";
                            }

                            imsiParse.country = Encoding.UTF8.GetString(_country, 0, _country.Length).Replace('\0', ' ').Trim();
                            if (imsiParse.country.Equals(""))
                            {
                                imsiParse.country = "Null";
                            }

                            imsiParse.operators = Encoding.UTF8.GetString(_operators, 0, _operators.Length).Replace('\0', ' ').Trim();
                            if (imsiParse.operators.Equals(""))
                            {
                                imsiParse.operators = "Null";
                            }

                            imsiParse.isdn = Encoding.UTF8.GetString(_isdn, 0, _isdn.Length).Replace('\0', ' ').Trim();
                            if (imsiParse.isdn.Equals(""))
                            {
                                imsiParse.isdn = "Null";
                            }
                        }
                        else
                        {
                            imsiParse.location = "Null";
                            imsiParse.country = string.Empty;
                            imsiParse.operators = "Null";
                            imsiParse.isdn = "Null";
                        }

                        gDicImsiParse.Add(imsi, imsiParse);
                    }
                }

                #endregion
            }

            _location = null;
            _country = null;
            _operators = null;
            _isdn = null;
            
            return 0;
        }

        /// <summary>
        /// 将imsi对应的信息添加到字典中
        /// </summary>
        /// <param name="imsi"></param>
        /// <returns></returns>
        public int Location_And_Operator_Set(string imsi)
        {
            int rtv = -1;

            if (DataController.ImsiParseMode == 0)
            {
                return 0;
            }

            string firstEle = "";
            byte[] _location = new byte[128];
            byte[] _country = new byte[128];
            byte[] _operators = new byte[128];
            byte[] _isdn = new byte[64];

            if (string.IsNullOrEmpty(imsi))
            {
                return -1;
            }
           
            if (DataController.ImsiParseMode == 1)
            {
                #region 添加字典中的项

                lock (mutex_ImsiParse)
                {                    
                    if (gDicImsiParse.ContainsKey(imsi))
                    {
                        #region 已经包含

                        return 0;

                        #endregion
                    }
                    else
                    {
                        #region 尚未包含

                        strImsiParse imsiParse = new strImsiParse();
                        rtv = GetLocationAndOprator(imsi, ref _location[0], ref _country[0], ref _operators[0], ref _isdn[0]);
                        if (rtv != 0)
                        {
                            imsiParse.location = Encoding.UTF8.GetString(_location, 0, _location.Length).Replace('\0', ' ').Trim();

                            if (Location.Equals(""))
                            {
                                imsiParse.location = "Null";
                            }

                            imsiParse.country = Encoding.UTF8.GetString(_country, 0, _country.Length).Replace('\0', ' ').Trim();
                            if (imsiParse.country.Equals(""))
                            {
                                imsiParse.country = "Null";
                            }

                            imsiParse.operators = Encoding.UTF8.GetString(_operators, 0, _operators.Length).Replace('\0', ' ').Trim();
                            if (imsiParse.operators.Equals(""))
                            {
                                imsiParse.operators = "Null";
                            }

                            imsiParse.isdn = Encoding.UTF8.GetString(_isdn, 0, _isdn.Length).Replace('\0', ' ').Trim();
                            if (imsiParse.isdn.Equals(""))
                            {
                                imsiParse.isdn = "Null";
                            }
                        }
                        else
                        {
                            imsiParse.location = "Null";
                            imsiParse.country = string.Empty;
                            imsiParse.operators = "Null";
                            imsiParse.isdn = "Null";
                        }

                        gDicImsiParse.Add(imsi, imsiParse);

                        //if ((gDicImsiParse.Count % 1000) == 0)
                        //{
                        //    string info = string.Format("gDicImsiParse.Count = {0}", gDicImsiParse.Count);
                        //    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                        //    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                        //}

                        #region 删除第一个元素的处理

                        // 2018-09-04 免得太占内存
                        if (gDicImsiParse.Count >= DataController.ImsiParseMaxCnt)
                        {
                            /*
                             * 删除最早的第一个元素,2018-09-25
                             */
                            firstEle = gDicImsiParse.Keys.First();
                            if (gDicImsiParse.ContainsKey(firstEle))
                            {
                                gDicImsiParse.Remove(firstEle);
                                firstEle = string.Format("删除gDicImsiParse第一个元素:{0}", firstEle);
                                Logger.Trace(LogInfoType.INFO, firstEle, "Main", LogCategory.I);
                            }
                        }

                        #endregion

                        #endregion
                    }
                }

                #endregion
            }

            _location = null;
            _country = null;
            _operators = null;
            _isdn = null;
            firstEle = null;

            return 0;
        }

        #endregion

        #region 计时器

        public void TimerFunc(object source, EventArgs e)
        {
            TaskTimer tt = (TaskTimer)source;

            string errInfo = string.Format("Id:Name:Interval({0}:{1}:{2}) -> 超时", tt.Id, tt.Name, tt.Interval);
            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

            InterModuleMsgStruct imms = tt.Imms;

            // result:"0",      // 0:SUCCESS ; 1:GENERAL FAILURE;
            //                  // 2:CONFIGURATION FAIURE OR NOT SUPPORTED
            // rebootflag:"1",	// 1—立刻reboot,2—需要reboot
            // timestamp:"xxx" 

            imms.Body.type = tt.MsgType;
            imms.Body.dic = new Dictionary<string, object>();
            imms.Body.dic.Add("ReturnCode", -1);
            imms.Body.dic.Add("ReturnStr", errInfo);
            imms.Body.dic.Add("result", "1");
            imms.Body.dic.Add("rebootflag", "2");
            imms.Body.dic.Add("timestamp", DateTime.Now.ToString());

            Send_Msg_2_AppCtrl_Upper(imms);
            tt.TimeOutFlag = true;            
        }

        public class TaskTimer : System.Timers.Timer
        {
            #region <变量>

            /// <summary>
            /// 定时器id
            /// </summary>
            private int id;

            /// <summary>
            /// 定时器name
            /// </summary>
            private string name;

            private bool timeOutFlag;
            private string msgType;
            private InterModuleMsgStruct imms;

            // 2018-10-31
            private bool sameNameCover;


            #endregion

            #region <属性>

            /// <summary>
            /// 定时器id属性
            /// </summary>
            public int Id
            {
                set { id = value; }
                get { return id; }
            }

            /// <summary>
            /// 定时器name属性
            /// </summary>
            public string Name
            {
                set { name = value; }
                get { return name; }
            }

            public InterModuleMsgStruct Imms { get => imms; set => imms = value; }
            public string MsgType { get => msgType; set => msgType = value; }
            public bool TimeOutFlag { get => timeOutFlag; set => timeOutFlag = value; }
            public bool SameNameCover { get => sameNameCover; set => sameNameCover = value; }

            public string parentFullPathName;
            public string devName;
            public string mode;
            public string ipAddr;
            public string port;

            ///// <summary>
            ///// 定时器参数属性
            ///// </summary>
            //public InterModuleMsgStruct Imms
            //{
            //    set { imms = value; }
            //    get { return imms; }
            //}


            #endregion

            #region <构造函数>

            ///<summary>
            /// 构造函数
            /// </summary>
            public TaskTimer() : base()
            {
                this.AutoReset = false;
            }

            #endregion
        }

        /// <summary>
        /// 用于设置AP全名的超时计时器
        /// </summary>
        private TaskTimer gTimerSetFullName = new TaskTimer();

        /// <summary>
        /// 用于设置AP重定向的超时计时器
        /// </summary>
        private TaskTimer gTimerSetRedirection = new TaskTimer();

        /// <summary>
        /// 用于设置黑白名单的操作
        /// </summary>
        private TaskTimer gTimerBlackWhite = new TaskTimer();

        #endregion

        #region 声明委托

        /// <summary>
        /// 声明委托类型
        /// </summary>
        /// <param name="str"></param>
        /// <param name="type"></param>
        public delegate void show_log_info_delegate(string str, LogInfoType type);

        /// <summary>
        /// 声明委托类型
        /// </summary>
        /// <param name="listLog"></param>
        public delegate void show_log_info_delegate_list(List<strLogInfo> listLog);

        /// <summary>
        /// 声明委托类型，用于批量数据库处理
        /// </summary>
        /// <param name="listSC"></param>
        /// <returns></returns>
        private delegate int db_batch_process_delegate(List<strCapture> listSC);

        /// <summary>
        /// 声明委托类型，用于处理历史记录搜索
        /// </summary>
        /// <param name="imms"></param>
        /// <returns></returns>
        private delegate void history_record_process_delegate(InterModuleMsgStruct imms);

        /// <summary>
        /// 声明委托类型，用于确认上下线信息
        /// </summary>
        private delegate void check_online_offline_delegate();

        /// <summary>
        /// 声明委托类型，用于Monitor各个线程
        /// </summary>
        private delegate void monitor_thread_status_delegate(int type,string text);


        /// <summary>
        /// 声明委托类型，用于处理AppCtrlUpper的消息,2018-09-17
        /// </summary>
        /// <param name="imms"></param>
        /// <returns></returns>
        private delegate int process_app_controller_msg_delegate(string strBody);


        /// <summary>
        /// 声明委托类型，用于处理ApCtrlLower的消息,2018-09-17
        /// </summary>
        /// <param name="imms"></param>
        /// <returns></returns>
        private delegate int process_ap_controller_msg_delegate(string strBody);

        #endregion

        #region 定义类型

        /// <summary>
        /// 数据对齐结构体
        /// </summary>
        public struct strDataAlign
        {
            public int devId;
            public int sys;
            public devMode dm;
            public string fullName;

            public string fileNameBlackList_Ap_Base;
            public string fileNameWhiteList_Ap_Base;

            public string fileNameBlackList_Db_Base;
            public string fileNameWhiteList_Db_Base;

            public bool whiteimsi_md5_match;
            public bool blackimsi_md5_match;            
        }

        public struct strLogInfo
        {
            public LogInfoType type;
            public string info;
        }

        public struct strMsgInfo
        {
            public MessageType mt;
            public MessageBody mb;
        }

        /// <summary>
        /// 登录的用户相关信息
        /// </summary>
        public struct strLoginUserInfo
        {
            public string userName;             //用户名
            public string affRole;              //用户所属的角色
            public List<string> affDomainList;  //用户所属的域列表
            public List<string> affFunList;     //用户所属的功能列表
        }

        public struct strUpdateInfo
        {
            public string md5;
            public string fileName;
            public string version;
            public bool needToUpdate;
            public List<int> listDevId;
            public List<string> listDevFullName;            
        }

        public struct strBwListSetInfo
        {
            // 2018-08-23
            public bool hasRsp;     //AP是否已经响应
            public bool rspResult;  //AP的响应结果

            //public InterModuleMsgStruct imms;
            public IMMS imms;

            // 2018-09-26
            public bool clearWhiteListFlag;

            // 2018-09-28
            public bwType bt;

            public string operTypeReq;
            public string operTypeRsp;

            public string devId;
            public string devFullName;
            public string domainId;  //暂时保留

            public List<strBwList> listBwoInfo;
        }


        /// <summary>
        /// DataFormat各个选项的下标
        /// 2018-12-24
        /// </summary>
        public struct strApFtpDataFormatInx
        {
            public int R_Inx;     //AP的Rssi值的下标
            public int O_Inx;     //厂商类型的下标
            public int T_Inx;     //时间戳的下标
            public int IMEI_Inx;  //IMEI的下标
            public int TMSI_Inx;  //TMSI的下标
            public int IMSI_Inx;  //IMSI的下标
            public int U_Inx;     //UserType的下标
            public int J_Inx;     //经度的下标
            public int W_Inx;     //纬度的下标
        }        
        
        private const string LOG_DEBG = "\r\n【DEBG】[{0}][{1}] {2}({3})";
        private const string LOG_INFO = "\r\n【INFO】[{0}][{1}] {2}({3})";
        private const string LOG_WARN = "\r\n【WARN】[{0}][{1}] {2}({3})";
        private const string LOG_EROR = "\r\n【EROR】[{0}][{1}] {2}({3})";        

        #endregion

        #region 定义变量

        /// <summary>
        /// 专门用于和设备的交互，2018-08-22
        /// </summary>
        private static DbHelper gDbHelperLower;

        /// <summary>
        /// 专门用于和界面的交互，2018-08-22
        /// </summary>
        private static DbHelper gDbHelperUpper;

        /// <summary>
        /// 专门用于和其他的交互，2018-08-22
        /// </summary>
        private static DbHelper gDbHelperImsi;

        /// <summary>
        /// 专门用于和射频的交互，2018-08-28
        /// </summary>
        private static DbHelper gDbHelperRadio;

        /// <summary>
        /// 专门用于和黑白普通的交互，2018-09-29
        /// </summary>
        private static DbHelper gDbHelperBWO;

        /// <summary>
        /// 专门用于统计的交互，2018-01-23
        /// </summary>
        //private static DbHelper gDbHelperSts;

        /// <summary>
        /// 专门用于IMSI处理
        /// </summary>
        private static FtpHelper gFtpHelperImsi;

        /// <summary>
        /// 专门用于File处理
        /// </summary>
        private static FtpHelper gFtpHelperFile;

        /// <summary>
        /// 专门用于ApFtp处理
        /// </summary>
        private static FtpHelper gFtpHelperApFtp;

        /// <summary>
        /// 记录ApFtp的文件列表
        /// </summary>
        private static string[] gApFtpFileList;

        private static Object mutex_ApFtp = new object();

        private static int snIndexOfNameFormat = -1;
        private static strApFtpDataFormatInx gApFtpDataFormatInx = new strApFtpDataFormatInx();

        private static Dictionary<string, DateTime> gDicRemoveDup = new Dictionary<string, DateTime>();

        /// <summary>
        /// 用于调试Log的互斥
        /// </summary>
        private static Object mutex_Logger = new Object();

        /// <summary>
        /// 用于接收ApController消息的互斥
        /// </summary>
        private static Object mutex_Ap_Controller = new Object();

        /// <summary>
        /// 用于接收AppController消息的互斥
        /// </summary>
        private static Object mutex_App_Controller = new Object();

        /// <summary>
        /// 用于数据库处理得互斥
        /// </summary>
        private static Object mutex_DbHelper = new object();

        /// <summary>
        /// 用于FTP处理得互斥
        /// </summary>
        private static Object mutex_FtpHelper = new object();

        private static Queue<strLogInfo> gListLog = new Queue<strLogInfo>();
        private static Queue<strMsgInfo> gMsgFor_Ap_Controller = new Queue<strMsgInfo>();
        private static Queue<strMsgInfo> gMsgFor_App_Controller = new Queue<strMsgInfo>();

        /// <summary>
        /// 所有捕到的号都先放入该队列,用于数据库
        /// </summary>
        private static Queue<strCapture> gCaptureInfoDb = new Queue<strCapture>();

        /// <summary>
        /// 所有捕到的号都先放入该队列,用于FTP
        /// </summary>
        private static Queue<strCapture> gCaptureInfoFtp = new Queue<strCapture>();

        /// <summary>
        /// 用于快速通过设备的全名找设备对应的ID
        /// 如：设备.深圳.福田.中心广场.西北监控.LTE-FDD-B3，其中
        /// 设备.深圳.福田.中心广场.西北监控为域名，LTE-FDD-B3为名称
        /// 系统启动后或设备有更改后获取该字典到内存中
        /// string = 设备.深圳.福田.中心广场.西北监控.LTE-FDD-B3
        /// int    = device的id
        /// </summary>
        //private static Dictionary<string, int> gDicDevFullName = new Dictionary<string, int>();

        // 2018-07-03
        private static Dictionary<string, strDevice> gDicDevFullName = new Dictionary<string, strDevice>();

        /// <summary>
        /// 2018-09-06
        /// 用于保存每个设备中对应的IMSI--Des集合
        /// </summary>
        private static Dictionary<string, Dictionary<string, string>> gDicDevId_Imsi_Des = new Dictionary<string, Dictionary<string, string>>();

        /// <summary>
        /// 2018-10-11
        /// 用于保存每个设备中对应的"站点.设备名称"
        /// </summary>
        private static Dictionary<string, string> gDicDevId_Station_DevName = new Dictionary<string, string>();

        private static List<strLoginUserInfo> gLoginUserInfo = new List<strLoginUserInfo>();

        private static InterModuleMsgStruct gApLower;
        private static InterModuleMsgStruct gAppUpper;

        private static strBwListSetInfo gBwListSetInfo = new strBwListSetInfo();

        /// <summary>
        /// 用于黑白普通名单的互斥
        /// </summary>
        private static Object mutex_bwoList = new object();

        /// <summary>
        /// 黑白普通名单的队列，2018-09-28
        /// </summary>
        private static Queue<strBwListSetInfo> gBWOProcess = new Queue<strBwListSetInfo>();

        //private int aaa = 1;
        private bool stopFlag = false;

        private int gIMSI_Index = 1;
        private int gIMSI_Count = 1;

        private strUpdateInfo gUpdateInfo = new strUpdateInfo();

        /// <summary>
        /// 用于保存多个APP获取黑白名单的信息
        /// string : 172.17.0.123:12345
        /// strBwListQueryInfo : 查询条件 + 查询结果
        /// </summary>
        private static Dictionary<string, strBwListQueryInfo> gDicBwListQueryInfo = new Dictionary<string, strBwListQueryInfo>();

        /// <summary>
        /// 用于保存多个APP获取历史记录的信息
        /// string : 172.17.0.123:12345
        /// strCaptureQueryInfo : 查询结果
        /// </summary>
        private static Dictionary<string, strCaptureQueryInfo> gDicCaptureQueryInfo = new Dictionary<string, strCaptureQueryInfo>();

        private strRedirection gRedirectionInfo = new strRedirection();

        /// <summary>
        /// string = 全名.载波
        ///        WCDMA/FDD/TDD/CDMA_ZYF = 全名.0
        ///        GSM_HJT                = 全名.0/全名.1
        ///        GSM_ZYF                = 全名.0/全名.1
        /// </summary>
        private static Dictionary<string, strDataAlign> gDicDataAlign = new Dictionary<string, strDataAlign>();

        private static int gCurLogInfoTypeIndex;

        /// <summary>
        /// ture  :  用Thread去处理界面的Logger
        /// false :  用BackgroudWorker去处理界面的Logger
        /// </summary>
        private bool ThreadFlag_For_UI_Logger = true ;

        private static string gSvnVersionString = "";

        public static string GSvnVersionString
        {
            get => gSvnVersionString;
            set => gSvnVersionString = value;
        }

        /// <summary>
        /// true   : 在BeginInvoke中处理各个消息(线程池)
        /// false  : 不在线程池中处理消息
        /// </summary>
        private static bool ProcessMsg_WithThreadPool = true;

        private static long recvImsiFromApCtrlCount = 0;

        private static long saveImsiToDbCount = 0;

        /// <summary>
        /// 用于保存多个APP获取(截获的号码)
        /// string : 172.17.0.123:12345
        /// strBwListQueryInfo : 查询条件 + 查询结果
        /// </summary>
        private static Dictionary<string, strMsCallHistoryQuery> gDicStrMsCallHistoryQuery = new Dictionary<string, strMsCallHistoryQuery>();


        /// <summary>
        /// 用于保存多个APP获取(截获的短信)
        /// string : 172.17.0.123:12345
        /// strBwListQueryInfo : 查询条件 + 查询结果
        /// </summary>
        private static Dictionary<string, strMsSmsHistoryQuery> gDicStrMsSmsHistoryQuery = new Dictionary<string, strMsSmsHistoryQuery>();

        #endregion

        #region 发消息给ApCtrlLower

        /// <summary>
        /// 声明用于发送信息给ApCtrlLower的代理
        /// </summary>       
        private static MessageDelegate Delegate_SendMsg_2_ApCtrl_Lower = new MessageDelegate(ApManager.MessageDelegate_For_MainController);

        #endregion

        #region 发消息给AppCtrlUpper

        /// <summary>
        ///  声明用于发送信息给AppCtrlUpper的代理
        /// </summary>
        private static MessageDelegate Delegate_SendMsg_2_AppCtrl_Upper = new MessageDelegate(AppManager.MessageDelegate_For_MainController);

        #endregion

        #region UI上Log的消息线程

        private static int lines = 1;

        /// <summary>
        /// 添加Log消息到队列中
        /// </summary>
        /// <param name="type">Log类型</param>
        /// <param name="str">Log消息</param>
        /// <param name="filePath">文件名</param>
        /// <param name="memberName">函数名</param>
        /// <param name="lineNumber">行号</param>
        public static void add_log_info(LogInfoType type, string str,
                                        string moduleName,
                                        LogCategory cat,
                                       [CallerFilePath]   string filePath = "",
                                       [CallerMemberName] string memberName = "",
                                       [CallerLineNumber] int lineNumber = 0)
        {
            if ("0" == DataController.StrAppDebugMode)
            {
                //不是调试模式
                return;
            }

            if (type < DataController.LogOutputLevel)
            {
                return;
            }

            if (string.IsNullOrEmpty(str))
            {
                add_log_info(LogInfoType.EROR, "add_log_info字符串为空","Main",LogCategory.I);
                return;
            }

            lock (mutex_Logger)
            {
                string tmp = "";
                if (type == LogInfoType.INFO)
                {
                    tmp = string.Format(LOG_INFO, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"), lines, Path.GetFileName(filePath), lineNumber);
                }
                else if (type == LogInfoType.WARN)
                {
                    tmp = string.Format(LOG_WARN, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"), lines, Path.GetFileName(filePath), lineNumber);
                }
                else if (type == LogInfoType.EROR)
                {
                    tmp = string.Format(LOG_EROR, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"), lines, Path.GetFileName(filePath), lineNumber);
                }
                else
                {
                    tmp = string.Format(LOG_DEBG, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"), lines, Path.GetFileName(filePath), lineNumber);
                }

                if (cat == LogCategory.I)
                {
                    str = tmp + string.Format("\n【{0}，I】{1}", moduleName, str);
                }
                else if (cat == LogCategory.S)
                {
                    str = tmp + string.Format("\n【{0}，S】{1}", moduleName, str);
                }
                else if (cat == LogCategory.R)
                {
                    str = tmp + string.Format("\n【{0}，R】{1}", moduleName, str);
                }
                else
                {
                    str = tmp + string.Format("\n【{0}，I】{1}", moduleName, str);
                }

                strLogInfo logInfo;
                logInfo.type = type;
                logInfo.info = str;

                lines++;
                gListLog.Enqueue(logInfo);
            }
        }

        public static string get_debug_info([CallerFilePath] string filePath = "",
                                          [CallerMemberName] string memberName = "",
                                          [CallerLineNumber] int lineNumber = 0)
        {            
            return string.Format("\r\n(Line->{0}\r\nFunc->{1}\r\nFile->{2})\r\n", lineNumber, memberName, Path.GetFileName(filePath));                 
        }

        /// <summary>
        /// 本例中的线程要通过这个方法来访问主线程中的控件
        /// </summary>
        /// <param name="str"></param>
        /// <param name="type"></param>
        private void show_log_info(string str, LogInfoType type)
        {
            if (stopFlag == true)
            {
                return;
            }

            if (richTextBoxLog.Text.Length >= richTextBoxLog.MaxLength/2)
            {
                richTextBoxLog.Text = "";
            }

            if (str.Contains("今天是个好日子"))
            {               
                str = string.Format("{0}({1})", str, FrmMainController.GSvnVersionString);
            }

            if (type == LogInfoType.INFO)
            {
                richTextBoxLog.SelectionColor = Color.Black;
            }
            else if (type == LogInfoType.WARN)
            {
                richTextBoxLog.SelectionColor = Color.Blue;
            }
            else if (type == LogInfoType.EROR)
            {
                richTextBoxLog.SelectionColor = Color.Red;
            }
            else
            {
                richTextBoxLog.SelectionColor = Color.Gray;
            }

            //设置光标的位置到文本尾 
            richTextBoxLog.AppendText(str);
            richTextBoxLog.Select(richTextBoxLog.TextLength, 10);

            //滚动到控件光标处 
            richTextBoxLog.ScrollToCaret();
            richTextBoxLog.AppendText("\n");
        }

        /// <summary>
        /// 本例中的线程要通过这个方法来访问主线程中的控件
        /// </summary>
        /// <param name="str"></param>
        /// <param name="type"></param>
        private void show_log_info_list(List<strLogInfo> listLog)
        {
            if (stopFlag == true)
            {
                return;
            }

            if (listLog == null || listLog.Count <= 0)
            {
                return;
            }

            if (richTextBoxLog.Text.Length >= richTextBoxLog.MaxLength/2)
            {
                richTextBoxLog.Text = "";
            }

           
            int start = 0;
            LogInfoType tmp = listLog[0].type;
            int i = 0;
            for ( i = 1; i <= (listLog.Count - 1); i++)
            {
                if (tmp == listLog[i].type)
                {
                    continue;
                }
                else
                {
                    if (tmp == LogInfoType.INFO)
                    {
                        richTextBoxLog.SelectionColor = Color.Black;
                    }
                    else if (tmp == LogInfoType.WARN)
                    {
                        richTextBoxLog.SelectionColor = Color.Blue;
                    }
                    else if (tmp == LogInfoType.EROR)
                    {
                        richTextBoxLog.SelectionColor = Color.Red;
                    }
                    else
                    {
                        richTextBoxLog.SelectionColor = Color.Gray;
                    }

                    string str = "";
                    for (int j = start; j <= (i-1); j++)
                    {
                        str += listLog[j].info + "\n";
                    }

                    //设置光标的位置到文本尾
                    richTextBoxLog.AppendText(str);                    
                    richTextBoxLog.Select(richTextBoxLog.TextLength, 10);

                    //滚动到控件光标处
                    richTextBoxLog.ScrollToCaret();
                    richTextBoxLog.AppendText("\n");

                    start = i;
                    tmp = listLog[i].type;
                }
            }

            if (i == listLog.Count)
            {
                if (tmp == LogInfoType.INFO)
                {
                    richTextBoxLog.SelectionColor = Color.Black;
                }
                else if (tmp == LogInfoType.WARN)
                {
                    richTextBoxLog.SelectionColor = Color.Blue;
                }
                else if (tmp == LogInfoType.EROR)
                {
                    richTextBoxLog.SelectionColor = Color.Red;
                }
                else
                {
                    richTextBoxLog.SelectionColor = Color.Gray;
                }

                string str = "";
                for (int j = start; j < i ; j++)
                {
                    str += listLog[j].info + "\n";
                }

                //设置光标的位置到文本尾
                richTextBoxLog.AppendText(str);
                richTextBoxLog.Select(richTextBoxLog.TextLength, 10);

                //滚动到控件光标处
                richTextBoxLog.ScrollToCaret();
                richTextBoxLog.AppendText("\n");
            }          

         
            /*
            richTextBoxLog.SelectionColor = Color.Black;

            string str = "";
            foreach (strLogInfo mm in listLog)
            {
                str += mm.info + "\n";
            }

            richTextBoxLog.AppendText(str);

            //设置光标的位置到文本尾 
            richTextBoxLog.Select(richTextBoxLog.TextLength, 10);

            //滚动到控件光标处 
            richTextBoxLog.ScrollToCaret();
            richTextBoxLog.AppendText("\n");
            */
        }

        private int get_ui_level_value()
        {
            int rtv = 10;

            switch (DataController.LogOutputLevel)
            {
                case LogInfoType.DEBG:
                    {
                        rtv = 80;
                        break;
                    }
                case LogInfoType.INFO:
                    {
                        rtv = 20;
                        break;
                    }
                case LogInfoType.WARN:
                    {
                        rtv = 10;
                        break;
                    }
                case LogInfoType.EROR:
                    {
                        rtv = 5;
                        break;
                    }
            }

            return rtv;
        }

        /// <summary>
        /// 创建有参的方法
        /// 注意：方法里面的参数类型必须是Object类型
        /// </summary>
        /// <param name="obj"></param>        
        private void thread_for_logger(object obj)
        {
            int batchValue = -1;
            bool batchFlag = false;

            DateTime startTime = System.DateTime.Now;
            DateTime endTime = System.DateTime.Now;
            TimeSpan ts = endTime.Subtract(startTime);

            strLogInfo tmp = new strLogInfo();
            List<strLogInfo> listLog = new List<strLogInfo>();
            
            while (true)
            {
                lock (mutex_Logger)
                {
                    if (batchFlag)
                    {
                        try
                        {
                            #region Batch

                            // 动态计算批量更新的数量
                            // batchValue = (4 - (int)DataController.LogOutputLevel) * 5;
                            batchValue = get_ui_level_value();

                            if (gListLog.Count < batchValue)
                            {
                                #region 数量不足

                                endTime = System.DateTime.Now;
                                ts = endTime.Subtract(startTime);

                                if (ts.TotalSeconds < 10)
                                {
                                    Thread.Sleep(2);
                                    continue;
                                }
                                else
                                {
                                    //清空数据                                
                                    //listLog = new List<strLogInfo>();
                                    listLog.Clear();
                                    listLog.TrimExcess();

                                    //拷贝数据
                                    while (gListLog.Count > 0)
                                    {
                                        listLog.Add(gListLog.Dequeue());
                                    }

                                    /*
                                     * 线程通过方法的委托执行show_log_info()，实现对richTextBoxLog控件的访问
                                     * public object Invoke(Delegate method, params object[] args);
                                     */
                                    BeginInvoke(new show_log_info_delegate_list(show_log_info_list), new object[] { listLog });

                                    //复位计时
                                    startTime = System.DateTime.Now;
                                }

                                #endregion
                            }
                            else
                            {
                                #region 数量充足

                                //清空数据                            
                                //listLog = new List<strLogInfo>();
                                listLog.Clear();
                                listLog.TrimExcess();

                                //拷贝数据
                                for (int i = 0; i < batchValue; i++)
                                {
                                    listLog.Add(gListLog.Dequeue());
                                }

                                /*
                                 * 线程通过方法的委托执行show_log_info()，实现对richTextBoxLog控件的访问
                                 * public object Invoke(Delegate method, params object[] args);
                                 */
                                BeginInvoke(new show_log_info_delegate_list(show_log_info_list), new object[] { listLog });

                                //复位起始时间
                                startTime = System.DateTime.Now;

                                #endregion
                            }

                            #endregion
                        }
                        catch (Exception ee)
                        {
                            add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                            continue;
                        }
                    }
                    else
                    {
                        try
                        {
                            #region OneByOne

                            if (gListLog.Count <= 0)
                            {
                                Thread.Sleep(100);
                                continue;
                            }
                            else
                            {
                                Thread.Sleep(2);
                            }

                            tmp = gListLog.Dequeue();

                            /*
                             * 线程通过方法的委托执行show_log_info()，实现对richTextBoxLog控件的访问
                             * public object Invoke(Delegate method, params object[] args);
                             */
                            BeginInvoke(new show_log_info_delegate(show_log_info), new object[] { tmp.info, tmp.type });

                            #endregion
                        }
                        catch (Exception ee)
                        {
                            add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                            continue;
                        }
                    }
                }
            }
        }

        #endregion

        #region BackgroundWorker

        private void BgWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            int i = 1;
            while (true)
            {
                if (BgWorker.CancellationPending)
                {
                    e.Cancel = true;
                    break;
                }
                else
                {
                    /*
                     * 在此触发BgWorker_ProgressChanged事件
                     */
                    BgWorker.ReportProgress(i, string.Format("bgworker_DoWork:{0}\n", i++));
                    Thread.Sleep(20);
                }
            }
        }

        private void BgWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            if (BgWorker.CancellationPending)
            {
                return;
            }

            //textBox.Text = e.ProgressPercentage.ToString();
            lock (mutex_Logger)
            {
                if (gListLog.Count <= 0)
                {
                    return;
                }

                strLogInfo tmp = gListLog.Dequeue();
                show_log_info(tmp.info, tmp.type);
            }
        }

        private void BgWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Cancelled)
            {
                MessageBox.Show("Background task has been canceled", "info");
            }
            else
            {
                MessageBox.Show("Background task finished", "info");
            }
        }

        private void Start_BgWorker()
        {
            if (!BgWorker.IsBusy)
            {
                BgWorker.RunWorkerAsync();
            }
        }

        private void Stop_BgWorker()
        {
            BgWorker.CancelAsync();
        }

        #endregion

        #region 接收【设备】的消息线程

        /// <summary>
        /// 用于从ApController中收消息
        /// </summary>
        /// <param name="mt"></param>
        /// <param name="mb"></param>
        public static void MessageDelegate_For_ApController(MessageType mt, MessageBody mb)
        {
            strMsgInfo msgInfo;
            msgInfo.mt = mt;
            msgInfo.mb = mb;

            //string tmp = string.Format("【收到设备的消息:{0}】:\n{1}\n", gMsgFor_Ap_Controller.Count, mb.bJson);
            //Logger.Trace(LogInfoType.DEBG, tmp, "Main", LogCategory.I);

            lock (mutex_Ap_Controller)
            {
                gMsgFor_Ap_Controller.Enqueue(msgInfo);
            }
        }

        private strMsgInfo msgInfoLower = new strMsgInfo();

        /// <summary>
        /// 发送消息给ApController--Lower
        /// </summary>
        /// <param name="ap"></param>
        private void Send_Msg_2_ApCtrl_Lower(InterModuleMsgStruct ap)
        {
            msgInfoLower.mt = MessageType.MSG_JSON;
            msgInfoLower.mb.bJson = JsonConvert.SerializeObject(ap);

            add_log_info(LogInfoType.DEBG, "Main->ApCtrl:" + msgInfoLower.mb.bJson, "Main", LogCategory.S);
            Logger.Trace(LogInfoType.DEBG, "Main->ApCtrl:" + msgInfoLower.mb.bJson, "Main", LogCategory.S);

            #region 检查Type，2018-07-26

            /*
             *  ApInfo.Type即为Ap的内部类型 
             */
            ApInnerType apInnerType;
            if (!Enum.TryParse(ap.ApInfo.Type, true, out apInnerType))
            {
                //"Ap的内部类型错误"

                string errInfo = string.Format("ap.ApInfo.Type = {0},错误的InnerType.", ap.ApInfo.Type);
                ap.Body.type = AppMsgType.general_error_result;

                ap.Body.dic = new Dictionary<string, object>();
                ap.Body.dic.Add("RecvType", ap.Body.type);
                ap.Body.dic.Add("ErrStr", errInfo);

                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.S);
                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.S);

                Send_Msg_2_AppCtrl_Upper(ap);
                return;
            }            

            #endregion

            //将消息转发给ApController
            Delegate_SendMsg_2_ApCtrl_Lower(msgInfoLower.mt, msgInfoLower.mb);       
        }

        /// <summary>
        /// 通过设备所属的域ID，设置所有设备的信息
        /// </summary>
        /// <param name="affDomainId"></param>
        /// <param name="nameFullPath"></param>
        /// <param name="app"></param>
        /// <returns>
        /// -1 : 失败
        ///  0 : 成功
        /// </returns>
        private int set_device_info_by_name_affdomainid(string name, int affDomainId, string nameFullPath, ref InterModuleMsgStruct app)
        {
            if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(nameFullPath))
            {
                add_log_info(LogInfoType.EROR, "par is NULL", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "par is NULL", "Main", LogCategory.I);
                return -1;
            }

            if (name.Length > 64 || nameFullPath.Length > 1024)
            {
                add_log_info(LogInfoType.EROR, "par长度有误", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "par长度有误", "Main", LogCategory.I);
                return -1;
            }

            DataTable dt = new DataTable();

            int rv = gDbHelperLower.device_record_entity_get_by_name_affdomainid(name, affDomainId, ref dt);
            if (rv != 0)
            {
                add_log_info(LogInfoType.EROR, "device_record_entity_get_by_name_affdomainid失败", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "device_record_entity_get_by_name_affdomainid失败", "Main", LogCategory.I);
                return -1;
            }

            // id,name,sn,ipAddr
            // port,netmask,mode,online,lastOnline,isActive,affDomainId

            Name_DIC_Struct ndic = new Name_DIC_Struct();
            ndic.name = string.Format("{0}.{1}", nameFullPath, name);

            foreach (DataRow dr in dt.Rows)
            {
                if (string.IsNullOrEmpty(dr["sn"].ToString()))
                {
                    ndic.dic.Add("sn", "");
                }
                else
                {
                    ndic.dic.Add("sn", dr["sn"].ToString());
                }               

                if (string.IsNullOrEmpty(dr["ipAddr"].ToString()))
                {
                    ndic.dic.Add("ipAddr", "");
                }
                else
                {
                    ndic.dic.Add("ipAddr", dr["ipAddr"].ToString());
                }

                if (string.IsNullOrEmpty(dr["port"].ToString()))
                {
                    ndic.dic.Add("port", "");
                }
                else
                {
                    ndic.dic.Add("port", dr["port"].ToString());
                }

                if (string.IsNullOrEmpty(dr["netmask"].ToString()))
                {
                    ndic.dic.Add("netmask", "");
                }
                else
                {
                    ndic.dic.Add("netmask", dr["netmask"].ToString());
                }

                if (string.IsNullOrEmpty(dr["mode"].ToString()))
                {
                    ndic.dic.Add("mode", "");
                }
                else
                {
                    ndic.dic.Add("mode", dr["mode"].ToString());
                }

                if (string.IsNullOrEmpty(dr["online"].ToString()))
                {
                    ndic.dic.Add("online", "");
                }
                else
                {
                    ndic.dic.Add("online", dr["online"].ToString());
                }

                if (string.IsNullOrEmpty(dr["lastOnline"].ToString()))
                {
                    ndic.dic.Add("lastOnline", "");
                }
                else
                {
                    ndic.dic.Add("lastOnline", dr["lastOnline"].ToString());
                }

                if (string.IsNullOrEmpty(dr["isActive"].ToString()))
                {
                    ndic.dic.Add("isActive", "");
                }
                else
                {
                    ndic.dic.Add("isActive", dr["isActive"].ToString());
                }

                if (string.IsNullOrEmpty(dr["innerType"].ToString()))
                {
                    ndic.dic.Add("innerType", "");
                }
                else
                {
                    ndic.dic.Add("innerType", dr["innerType"].ToString());
                }

                // 2018-08-17
                if (string.IsNullOrEmpty(dr["apVersion"].ToString()))
                {
                    ndic.dic.Add("apVersion", "");
                }
                else
                {
                    ndic.dic.Add("apVersion", dr["apVersion"].ToString());
                }
            }

            dt.Dispose();
            dt = null;

            if (ndic.dic.Count > 0)
            {
                app.Body.n_dic.Add(ndic);
                return 0;
            }
            else
            {
                return -1;
            }
        }

        /// <summary>
        /// 通过DataTable，设置所有设备(未指派)的信息
        /// </summary>
        /// <param name="app"></param>
        /// <returns>
        /// -1 : 失败
        ///  0 : 成功
        /// </returns>
        private int set_device_unknown_info_by_datatable(DataTable dt, ref InterModuleMsgStruct app)
        {            
            if (dt == null || dt.Rows.Count == 0)
            {
                add_log_info(LogInfoType.WARN, "set_device_unknown_info_by_datatable,dt is null.", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.WARN, "set_device_unknown_info_by_datatable,dt is null.", "Main", LogCategory.I);
                return -1;
            }

            // id,name,sn,ipAddr
            // port,netmask,mode,online,lastOnline,isActive,affDomainId            
            foreach (DataRow dr in dt.Rows)
            {
                Name_DIC_Struct ndic = new Name_DIC_Struct();

                string defaultName = "";
                ndic.name = "device_unknown";

                if (string.IsNullOrEmpty(dr["sn"].ToString()))
                {
                    ndic.dic.Add("sn", "");
                }
                else
                {
                    ndic.dic.Add("sn", dr["sn"].ToString());
                }                

                if (string.IsNullOrEmpty(dr["ipAddr"].ToString()))
                {
                    ndic.dic.Add("ipAddr", "");
                }
                else
                {
                    ndic.dic.Add("ipAddr", dr["ipAddr"].ToString());
                }

                if (string.IsNullOrEmpty(dr["port"].ToString()))
                {
                    ndic.dic.Add("port", "");
                }
                else
                {
                    ndic.dic.Add("port", dr["port"].ToString());
                }

                defaultName = string.Format("{0}:{1}", dr["ipAddr"], dr["port"]);
                if (defaultName == dr["name"].ToString())
                {
                    ndic.dic.Add("name", "");
                }
                else
                {
                    int j = dr["name"].ToString().LastIndexOf(".");
                    if (j > 0)
                    {
                        ndic.dic.Add("name", dr["name"].ToString().Substring(j + 1));
                    }
                    else
                    {
                        ndic.dic.Add("name", dr["name"].ToString());
                    }                  
                }

                if (string.IsNullOrEmpty(dr["netmask"].ToString()))
                {
                    ndic.dic.Add("netmask", "");
                }
                else
                {
                    ndic.dic.Add("netmask", dr["netmask"].ToString());
                }

                if (string.IsNullOrEmpty(dr["mode"].ToString()))
                {
                    ndic.dic.Add("mode", "");
                }
                else
                {
                    ndic.dic.Add("mode", dr["mode"].ToString());
                }

                if (string.IsNullOrEmpty(dr["online"].ToString()))
                {
                    ndic.dic.Add("online", "");
                }
                else
                {
                    ndic.dic.Add("online", dr["online"].ToString());
                }

                if (string.IsNullOrEmpty(dr["lastOnline"].ToString()))
                {
                    ndic.dic.Add("lastOnline", "");
                }
                else
                {
                    ndic.dic.Add("lastOnline", dr["lastOnline"].ToString());
                }

                if (string.IsNullOrEmpty(dr["isActive"].ToString()))
                {
                    ndic.dic.Add("isActive", "");
                }
                else
                {
                    ndic.dic.Add("isActive", dr["isActive"].ToString());
                }

                if (string.IsNullOrEmpty(dr["innerType"].ToString()))
                {
                    ndic.dic.Add("innerType", "");
                }
                else
                {
                    ndic.dic.Add("innerType", dr["innerType"].ToString());
                }

                app.Body.n_dic.Add(ndic);
            }

            return 0;
        }

        /// <summary>
        /// 处理LTE的捕号消息
        /// </summary>
        /// <param name="ap"></param>
        private void lte_capture_info_process(ref InterModuleMsgStruct ap)
        {
            //内存泄漏测试
            //return;

            string wSelfStudy = "";
            string Fullname = ap.ApInfo.Fullname;
            strCapture cap = new strCapture();

            #region 获取信息
           
            if (DataController.SimuTest == 0)
            {
                // 非模拟器测试模式
                if (string.IsNullOrEmpty(Fullname))
                {
                    add_log_info(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                    return;
                }

                if (!gDicDevFullName.ContainsKey(Fullname))
                {
                    add_log_info(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                    return;
                }
                else
                {
                    cap.affDeviceId = gDicDevFullName[Fullname].id.ToString();

                    //cap.name = gDicDevFullName[Fullname].name;
                    // 2018-10-09
                    cap.name = gDicDevFullName[Fullname].station_and_name;

                    wSelfStudy = gDicDevFullName[Fullname].wSelfStudy;
                }
            }

            if (ap.Body.dic.ContainsKey("userType"))
            {
                /*
                 * 数据库中的枚举是从1开始算起的
                 */
                cap.bwFlag = (bwType)(int.Parse(ap.Body.dic["userType"].ToString()) + 1);
            }

            if (ap.Body.dic.ContainsKey("imsi"))
            {
                cap.imsi = ap.Body.dic["imsi"].ToString();
            }

            if (ap.Body.dic.ContainsKey("imei"))
            {
                cap.imei = ap.Body.dic["imei"].ToString();
            }

            if (ap.Body.dic.ContainsKey("isdn"))
            {
                cap.isdn = ap.Body.dic["isdn"].ToString();
            }

            if (ap.Body.dic.ContainsKey("tmsi"))
            {
                cap.tmsi = ap.Body.dic["tmsi"].ToString();
            }

            if (ap.Body.dic.ContainsKey("rsrp"))
            {
                cap.bsPwr = ap.Body.dic["rsrp"].ToString();
            }

            if (ap.Body.dic.ContainsKey("timestamp"))
            {
                cap.time = ap.Body.dic["timestamp"].ToString();
                //cap.time = DateTime.Now.ToString();
            }

            if (ap.Body.dic.ContainsKey("sn"))
            {
                cap.sn = ap.Body.dic["sn"].ToString();
            }

            #region 添加imsi和des的对应关系 

            // 2018-09-06

            if (gDicDevId_Imsi_Des.ContainsKey(cap.affDeviceId))
            {
                if (gDicDevId_Imsi_Des[cap.affDeviceId].ContainsKey(cap.imsi))
                {
                    cap.des = gDicDevId_Imsi_Des[cap.affDeviceId][cap.imsi];
                }
                else
                {
                    cap.des = "";
                }
            }
            else
            {
                cap.des = "";
            }
  
            ap.Body.dic.Add("des", cap.des);

            #endregion

            #endregion

            #region 模拟器测试模式

            if (DataController.SimuTest == 1)
            {
                // 模拟器测试模式
                //cap.imsi = gIMSI_Index.ToString();

                gIMSI_Count++;
                if ((gIMSI_Count % 10) == 0)
                {
                    gIMSI_Index++;
                }

                cap.bwFlag = (bwType)((gIMSI_Index % 3) + 1);
                cap.affDeviceId = ((gIMSI_Index % 4) + 1).ToString();
            }

            #endregion

            #region 白名单自学习处理

            if (wSelfStudy.Equals("1"))
            {
                int rtv = gDbHelperLower.bwlist_record_insert(cap, int.Parse(cap.affDeviceId));
                if ((int)RC.SUCCESS != rtv)
                {
                    string errInfo = string.Format("白名单自学习:bwlist_record_insert失败{0}.", gDbHelperLower.get_rtv_str(rtv));
                    add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                }
                else
                {
                    string errInfo = string.Format("白名单自学习:bwlist_record_insert成功.");
                    add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                }
            }

            #endregion

            #region IMSI解析

            // 2018-07-25
            Location_And_Operator_Set(cap.imsi);

            #endregion

            #region 放入FTP处理队列

            if (DataController.StrFtpSwitch == "1")
            {
                lock (mutex_FtpHelper)
                {
                    recvImsiFromApCtrlCount++;
                    gCaptureInfoFtp.Enqueue(cap);
                }
            }

            #endregion

            #region 放入数据库处理队列

            if (DataController.StrDbSwitch == "1")
            {
                lock (mutex_DbHelper)
                {
                    gCaptureInfoDb.Enqueue(cap);
                }
            }

            #endregion
        }

        /// <summary>
        /// 处理GSM的捕号消息
        /// </summary>
        /// <param name="ap"></param>
        /// <param name="ndicInx"></param>
        private void gsm_capture_info_process(ref InterModuleMsgStruct ap,int ndicInx)
        {
            //内存泄漏测试
            //return;

            string Fullname = ap.ApInfo.Fullname;
            strCapture cap = new strCapture();
            Name_DIC_Struct ndic = ap.Body.n_dic[ndicInx];

            #region 获取信息

            if (DataController.SimuTest == 0)
            {
                // 非模拟器测试模式
                if (string.IsNullOrEmpty(Fullname))
                {
                    add_log_info(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                    return;
                }

                if (!gDicDevFullName.ContainsKey(Fullname))
                {
                    add_log_info(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                    return;
                }
                else
                {
                    cap.affDeviceId = gDicDevFullName[Fullname].id.ToString();

                    //cap.name = gDicDevFullName[Fullname].name;

                    // 2018-10-09
                    cap.name = gDicDevFullName[Fullname].station_and_name;
                }
            }
          
            if (ap.Body.dic.ContainsKey("userType"))
            {
                /*
                 * 数据库中的枚举是从1开始算起的
                 * 2018-11-05
                 */
                cap.bwFlag = (bwType)(int.Parse(ap.Body.dic["userType"].ToString()) + 1);
            }
            else
            {
                /*
                 * GSM直接固定为普通用户
                 * 2018-08-22
                 */
                cap.bwFlag = bwType.BWTYPE_OTHER;
            }           

            if (ndic.dic.ContainsKey("ueImsi"))
            {
                cap.imsi = ndic.dic["ueImsi"].ToString();
            }

            if (ndic.dic.ContainsKey("ueImei"))
            {
                cap.imei = ndic.dic["ueImei"].ToString();
            }

            if (ndic.dic.ContainsKey("ueMsisdn"))
            {
                cap.isdn = ndic.dic["ueMsisdn"].ToString();
            }

            if (ndic.dic.ContainsKey("ueTmsi"))
            {
                cap.tmsi = ndic.dic["ueTmsi"].ToString();
            }

            if (ndic.dic.ContainsKey("uePwr"))
            {
                cap.bsPwr = ndic.dic["uePwr"].ToString();
            }

            if (ndic.dic.ContainsKey("UeRegtype"))
            {
                cap.regType = ndic.dic["UeRegtype"].ToString();
            }

            if (ndic.dic.ContainsKey("ueQueryResult"))
            {
                cap.queryResult = ndic.dic["ueQueryResult"].ToString();
            }

            if (ndic.dic.ContainsKey("ueLlac"))
            {
                cap.localLAC = ndic.dic["ueLlac"].ToString();
            }

            if (ndic.dic.ContainsKey("ueSlac"))
            {
                cap.sourceLAC = ndic.dic["ueSlac"].ToString();
            }

            #region 添加imsi和des的对应关系 

            // 2018-09-06

            if (gDicDevId_Imsi_Des.ContainsKey(cap.affDeviceId))
            {
                if (gDicDevId_Imsi_Des[cap.affDeviceId].ContainsKey(cap.imsi))
                {
                    cap.des = gDicDevId_Imsi_Des[cap.affDeviceId][cap.imsi];
                }
                else
                {
                    cap.des = "";
                }
            }
            else
            {
                cap.des = "";
            }

            ap.Body.n_dic[ndicInx].dic.Add("des", cap.des);

            #endregion

            //取系统时间为时间戳
            cap.time = DateTime.Now.ToString();
            cap.sn = ap.ApInfo.SN;

            #endregion

            #region IMSI解析

            // 2018-07-25
            Location_And_Operator_Set(cap.imsi);

            #endregion

            #region 放入FTP处理队列

            if (DataController.StrFtpSwitch == "1")
            {
                lock (mutex_FtpHelper)
                {
                    recvImsiFromApCtrlCount++;
                    gCaptureInfoFtp.Enqueue(cap);
                }
            }

            #endregion

            #region 放入数据库处理队列

            if (DataController.StrDbSwitch == "1")
            {
                lock (mutex_DbHelper)
                {
                    gCaptureInfoDb.Enqueue(cap);
                }
            }

            #endregion            
        }

        /// <summary>
        /// 处理GSM-V2/CDMA的捕号消息
        /// </summary>
        /// <param name="ap"></param>
        /// <param name="ndicInx"></param>
        private void gc_capture_info_process(InterModuleMsgStruct ap, int ndicInx)
        {
            //内存泄漏测试
            //return;

            string Fullname = ap.ApInfo.Fullname;
            strCapture cap = new strCapture();
            Name_DIC_Struct ndic = ap.Body.n_dic[ndicInx];

            #region 获取信息

            //       "name":"UE_STATUS_REPORT_MSG",                 //4.8  FAP上报UE相关状态
            //      {
            //					"imsi":XXX	    //上报imsi，如果没有为空
            //					"imei":XXX      //上报imsi，如果没有为空      
            //					"tmsi":XXX	    //上报imsi，如果没有为空       
            //					"rsrp":XXX	    //上报imsi，如果没有为空
            //                  "sn":XXX        //上报ap的Sn
            //                  "userType":XXX  //用户类型，该版本一直为空
            //       }

            if (DataController.SimuTest == 0)
            {
                // 非模拟器测试模式
                if (string.IsNullOrEmpty(Fullname))
                {
                    add_log_info(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                    return;
                }

                if (!gDicDevFullName.ContainsKey(Fullname))
                {
                    add_log_info(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                    return;
                }
                else
                {
                    cap.affDeviceId = gDicDevFullName[Fullname].id.ToString();
                    //cap.name = gDicDevFullName[Fullname].name;

                    // 2018-10-09
                    cap.name = gDicDevFullName[Fullname].station_and_name;
                }
            }

            if (ap.Body.dic.ContainsKey("userType"))
            {
                /*
                 * 数据库中的枚举是从1开始算起的
                 * 2018-11-05
                 */
                cap.bwFlag = (bwType)(int.Parse(ap.Body.dic["userType"].ToString()) + 1);
            }
            else
            {
                /*
                 * GSM-V2/CDMA直接固定为白名单(暂时)
                 * 2018-08-22
                 */
                cap.bwFlag = bwType.BWTYPE_OTHER;
            }

            if (ndic.dic.ContainsKey("imsi"))
            {
                cap.imsi = ndic.dic["imsi"].ToString();
            }

            if (ndic.dic.ContainsKey("imei"))
            {
                cap.imei = ndic.dic["imei"].ToString();
            }
           
            cap.isdn = "";

            if (ndic.dic.ContainsKey("tmsi"))
            {
                cap.tmsi = ndic.dic["tmsi"].ToString();
            }

            if (ndic.dic.ContainsKey("rsrp"))
            {
                cap.bsPwr = ndic.dic["rsrp"].ToString();
            }           

            //取系统时间为时间戳
            cap.time = DateTime.Now.ToString();
            cap.sn = ap.ApInfo.SN;

            #region 添加imsi和des的对应关系 

            // 2018-09-06

            if (gDicDevId_Imsi_Des.ContainsKey(cap.affDeviceId))
            {
                if (gDicDevId_Imsi_Des[cap.affDeviceId].ContainsKey(cap.imsi))
                {
                    cap.des = gDicDevId_Imsi_Des[cap.affDeviceId][cap.imsi];
                }
                else
                {
                    cap.des = "";
                }
            }
            else
            {
                cap.des = "";
            }

            ap.Body.n_dic[ndicInx].dic.Add("des", cap.des);

            #endregion

            #endregion

            #region IMSI解析

            // 2018-07-25
            Location_And_Operator_Set(cap.imsi);

            #endregion

            #region 放入FTP处理队列

            if (DataController.StrFtpSwitch == "1")
            {
                lock (mutex_FtpHelper)
                {
                    recvImsiFromApCtrlCount++;
                    gCaptureInfoFtp.Enqueue(cap);
                }
            }

            #endregion

            #region 放入数据库处理队列

            if (DataController.StrDbSwitch == "1")
            {
                lock (mutex_DbHelper)
                {
                    gCaptureInfoDb.Enqueue(cap);
                }
            }

            #endregion            
        }

        /// <summary>
        /// 处理WCDMA的捕号消息
        /// </summary>
        /// <param name="ap"></param>
        private void wcdma_capture_info_process(InterModuleMsgStruct ap)
        {
            // 归到了lte_capture_info_process中
        }

        /// <summary>
        /// 处理手机主动发起呼叫(HJT GSM)
        /// </summary>
        /// <param name="ap"></param>
        /// <param name="ndicInx"></param>
        private void ms_call_process(ref InterModuleMsgStruct ap, int ndicInx)
        {
            string carry = "";
            string affDeviceId = "";
            string Fullname = ap.ApInfo.Fullname;

            strMsCall call = new strMsCall();
            Name_DIC_Struct ndic = ap.Body.n_dic[ndicInx];

            #region 获取信息

            if (string.IsNullOrEmpty(Fullname))
            {
                add_log_info(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                return;
            }

            if (!gDicDevFullName.ContainsKey(Fullname))
            {
                add_log_info(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                return;
            }
            else
            {
                affDeviceId = gDicDevFullName[Fullname].id.ToString();               
            }

            if (ap.Body.dic.ContainsKey("sys"))
            {
                carry = ap.Body.dic["sys"].ToString();
                if (carry != "0" && carry != "1")
                {
                    add_log_info(LogInfoType.EROR, "sys字段出错", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "sys字段出错", "Main", LogCategory.I);
                    return;
                }
            }
            else
            {
                add_log_info(LogInfoType.EROR, "ap.Body.dic不包含sys字段", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "ap.Body.dic不包含sys字段", "Main", LogCategory.I);
                return;
            }

            //       "name":"SEND_MS_CALL_SETUP",                 //5.12	手机主动发起呼叫
            //      {
            //					"imsi":IMSI
            //                  "number":手机号
            //       }

            if (ndic.dic.ContainsKey("imsi"))
            {
                call.imsi = ndic.dic["imsi"].ToString();
            }

            if (ndic.dic.ContainsKey("number"))
            {
                call.number = ndic.dic["number"].ToString();
            }

            //取系统时间为时间戳
            call.time = DateTime.Now.ToString();

            #endregion

            int rtv = gDbHelperLower.send_ms_call_record_insert(int.Parse(carry),int.Parse(affDeviceId),call);
            if (rtv == 0)
            {
                string info = string.Format("gsm_send_ms_call_record_insert成功.");
                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
            }
            else
            {
                string info = string.Format("gsm_send_ms_call_record_insert失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
            }

            return;
        }

        /// <summary>
        /// 处理手机主动发起呼叫(HJT GSM)
        /// </summary>
        /// <param name="ap"></param>
        /// <param name="ndicInx"></param>
        private void ms_sms_process(ref InterModuleMsgStruct ap, int ndicInx)
        {
            string carry = "";
            string affDeviceId = "";
            string Fullname = ap.ApInfo.Fullname;

            strMsSms sms = new strMsSms();
            Name_DIC_Struct ndic = ap.Body.n_dic[ndicInx];

            #region 获取信息

            if (string.IsNullOrEmpty(Fullname))
            {
                add_log_info(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                return;
            }

            if (!gDicDevFullName.ContainsKey(Fullname))
            {
                add_log_info(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                return;
            }
            else
            {
                affDeviceId = gDicDevFullName[Fullname].id.ToString();
            }

            if (ap.Body.dic.ContainsKey("sys"))
            {
                carry = ap.Body.dic["sys"].ToString();
                if (carry != "0" && carry != "1")
                {
                    add_log_info(LogInfoType.EROR, "sys字段出错", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "sys字段出错", "Main", LogCategory.I);
                    return;
                }
            }
            else
            {
                add_log_info(LogInfoType.EROR, "ap.Body.dic不包含sys字段", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "ap.Body.dic不包含sys字段", "Main", LogCategory.I);
                return;
            }

            //       "name":"SEND_MS_SMS_SEND",                 //5.13	手机主动发起短信
            //      {
            //					"imsi":IMSI
            //                  "number":手机号
            //					"codetype":编码类型
            //					"data":短信内容
            //       }

            if (ndic.dic.ContainsKey("imsi"))
            {
                sms.imsi = ndic.dic["imsi"].ToString();
            }

            if (ndic.dic.ContainsKey("number"))
            {
                sms.number = ndic.dic["number"].ToString();
            }

            if (ndic.dic.ContainsKey("codetype"))
            {
                sms.codetype = ndic.dic["codetype"].ToString();
            }

            if (ndic.dic.ContainsKey("data"))
            {
                sms.data = ndic.dic["data"].ToString();
            }

            //取系统时间为时间戳
            sms.time = DateTime.Now.ToString();

            #endregion

            int rtv = gDbHelperLower.send_ms_sms_record_insert(int.Parse(carry), int.Parse(affDeviceId), sms);
            if (rtv == 0)
            {
                string info = string.Format("gsm_send_ms_sms_record_insert成功.");
                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
            }
            else
            {
                string info = string.Format("gsm_send_ms_sms_record_insert失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
            }

            return;
        }

        /// <summary>
        /// 处理手机主动发起呼叫和短信(GSM-V2/CDMA)
        /// </summary>
        /// <param name="ap"></param>
        /// <param name="ndicInx"></param>
        private void ms_call_sms_process(ref InterModuleMsgStruct ap, int ndicInx,int carry)
        {
            string affDeviceId = "";
            string Fullname = ap.ApInfo.Fullname;

            string bOrmType = "";
            string bUeId = "";
            string bUeContent = "";
            
            Name_DIC_Struct ndic = ap.Body.n_dic[ndicInx];

            #region 获取信息

            if (string.IsNullOrEmpty(Fullname))
            {
                add_log_info(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "Fullname is NULL.", "Main", LogCategory.I);
                return;
            }

            if (!gDicDevFullName.ContainsKey(Fullname))
            {
                add_log_info(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "gDicDevFullName的value找不到", "Main", LogCategory.I);
                return;
            }
            else
            {
                affDeviceId = gDicDevFullName[Fullname].id.ToString();
            }

            //       "name":"UE_ORM_REPORT_MSG",                 //4.9  FAP上报UE主叫信息，只用于GSM和CDMA
            //      {
            //					"bOrmType":XXX	    	主叫类型。1=呼叫号码, 2=短消息PDU,3=寻呼测量
            //					"bUeId":XXX	     	    IMSI
            //					"cRSRP":XXX	    	    接收信号强度。寻呼测量时，-128表示寻呼失败
            //					"bUeContentLen":XXX	    Ue主叫内容长度
            //					"bUeContent":XXX	    Ue主叫内容。最大249字节。
            //       }

            if (ndic.dic.ContainsKey("bOrmType"))
            {
                bOrmType = ndic.dic["bOrmType"].ToString();
                if (bOrmType != "1" && bOrmType != "2" && bOrmType != "3")
                {
                    add_log_info(LogInfoType.EROR, "bOrmType is valid.", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "bOrmType is valid.", "Main", LogCategory.I);
                    return;
                }
            }
            else
            {
                add_log_info(LogInfoType.EROR, "bOrmType is NULL.", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "bOrmType is NULL.", "Main", LogCategory.I);
                return;
            }


            if (ndic.dic.ContainsKey("bUeId"))
            {
                bUeId = ndic.dic["bUeId"].ToString();                
            }
            else
            {
                add_log_info(LogInfoType.EROR, "bUeId is NULL.", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "bUeId is NULL.", "Main", LogCategory.I);
                return;
            }

            if (ndic.dic.ContainsKey("bUeContent"))
            {
                bUeContent = ndic.dic["bUeContent"].ToString();
            }
            else
            {
                add_log_info(LogInfoType.EROR, "bUeContent is NULL.", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "bUeContent is NULL.", "Main", LogCategory.I);
                return;
            }

            #endregion

            switch (bOrmType)
            {
                case "1":
                    {
                        strMsCall call = new strMsCall();

                        call.imsi = bUeId;
                        call.number = bUeContent;

                        //取系统时间为时间戳
                        call.time = DateTime.Now.ToString();

                        int rtv = gDbHelperLower.send_ms_call_record_insert(carry, int.Parse(affDeviceId), call);
                        if (rtv == 0)
                        {
                            string info = string.Format("send_ms_call_record_insert成功.");
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                        }
                        else
                        {
                            string info = string.Format("send_ms_call_record_insert失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                        }

                        break;
                    }
                case "2":
                    {
                        strMsSms sms = new strMsSms();
                        int rtv = bUeContent.IndexOf(";");

                        sms.imsi = bUeId;

                        if (rtv > 0)
                        {
                            sms.number = bUeContent.Substring(0, rtv);
                            sms.data = bUeContent.Substring(rtv + 1);
                        }
                        else
                        {
                            sms.number = "null";
                            sms.data = "null";
                        }

                        sms.codetype = "";

                        //取系统时间为时间戳
                        sms.time = DateTime.Now.ToString();

                        rtv = gDbHelperLower.send_ms_sms_record_insert(carry, int.Parse(affDeviceId), sms);
                        if (rtv == 0)
                        {
                            string info = string.Format("gsm_send_ms_sms_record_insert成功.");
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                        }
                        else
                        {
                            string info = string.Format("gsm_send_ms_sms_record_insert失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                        }

                        break;
                    }
                case "3":
                    {
                        break;
                    }
            }

            return;
        }

        /// <summary>
        /// 用于处理未指派设备的心跳消息
        /// </summary>
        /// <param name="imms"></param>
        private void process_device_unknown(InterModuleMsgStruct imms)
        {
            int rtv = -1;
            string Status = "";
            string mode = "";

            strDevice dev = new strDevice();

            if (imms.Body.dic.ContainsKey("Status"))
            {
                Status = imms.Body.dic["Status"].ToString();
                if (Status != "OnLine" && Status != "OffLine")
                {
                    add_log_info(LogInfoType.EROR, "Status不为OnLine或OffLine", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, "Status不为OnLine或OffLine", "Main", LogCategory.R);

                    //返回出错处理
                    imms.Body.type = Main2ApControllerMsgType.OnOffLine_Ack;
                    imms.Body.dic = new Dictionary<string, object>();
                    imms.Body.dic.Add("ReturnCode", -1);
                    imms.Body.dic.Add("ReturnStr", get_debug_info() + "Status不为OnLine或OffLine");

                    Send_Msg_2_ApCtrl_Lower(imms);
                    return;
                }
            }
            else
            {
                add_log_info(LogInfoType.EROR, "不存在Key：Status", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "不存在Key：Status", "Main", LogCategory.R);

                //返回出错处理
                imms.Body.type = Main2ApControllerMsgType.OnOffLine_Ack;
                imms.Body.dic = new Dictionary<string, object>();
                imms.Body.dic.Add("ReturnCode", -1);
                imms.Body.dic.Add("ReturnStr", get_debug_info() + "不存在Key：Status");

                Send_Msg_2_ApCtrl_Lower(imms);
                return;
            }

            if (imms.Body.dic.ContainsKey("mode"))
            {
                mode = imms.Body.dic["mode"].ToString();
                devMode dm = gDbHelperUpper.get_device_mode(mode);

                if (dm == devMode.MODE_UNKNOWN)
                {
                    string errInfo = string.Format("mode = {0},非法!", mode);
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.R);

                    //返回出错处理
                    imms.Body.type = Main2ApControllerMsgType.OnOffLine_Ack;
                    imms.Body.dic = new Dictionary<string, object>();
                    imms.Body.dic.Add("ReturnCode", -1);
                    imms.Body.dic.Add("ReturnStr", get_debug_info() + "mode的值非法");

                    Send_Msg_2_ApCtrl_Lower(imms);
                    return;
                }                
            }
            else
            {
                add_log_info(LogInfoType.EROR, "不存在Key：mode", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "不存在Key：mode", "Main", LogCategory.R);

                //返回出错处理
                imms.Body.type = Main2ApControllerMsgType.OnOffLine_Ack;
                imms.Body.dic = new Dictionary<string, object>();
                imms.Body.dic.Add("ReturnCode", -1);
                imms.Body.dic.Add("ReturnStr", get_debug_info() + "不存在Key：mode");

                Send_Msg_2_ApCtrl_Lower(imms);
                return;
            }

            if (Status == "OnLine")
            {
                dev.online = "1";
            }
            else
            {
                dev.online = "0";
            }

            dev.sn = imms.ApInfo.SN;
            dev.ipAddr = imms.ApInfo.IP;
            dev.port = imms.ApInfo.Port.ToString();
            dev.innerType = imms.ApInfo.Type;
            dev.lastOnline = DateTime.Now.ToString();
            dev.mode = mode;

            if (Status == "OnLine")
            {
                #region 上线处理

                if ((int)RC.EXIST == gDbHelperLower.device_unknown_record_exist(dev.ipAddr))
                {
                    //设备(未指派)记录已经存在
                    string errInfo = string.Format("未指派设备[{0}:{1}]已经存在", dev.ipAddr, int.Parse(dev.port));
                    Logger.Trace(LogInfoType.DEBG, errInfo, "Main", LogCategory.I);
                    add_log_info(LogInfoType.DEBG, errInfo, "Main", LogCategory.I);
                    return;
                }

                //插入新记录
                rtv = gDbHelperLower.device_unknown_record_insert(dev.ipAddr, int.Parse(dev.port),imms.ApInfo.Fullname);
                if (rtv == 0)
                {
                    //更新新记录
                    rtv = gDbHelperLower.device_unknown_record_update(dev.ipAddr, dev);
                    if (rtv == 0)
                    {
                        imms.Body.type = Main2ApControllerMsgType.OnOffLine_Ack;
                        imms.Body.dic = new Dictionary<string, object>();
                        imms.Body.dic.Add("ReturnCode", rtv);
                        imms.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                        imms.Body.dic.Add("Status", Status);
                     
                        Send_Msg_2_ApCtrl_Lower(imms);

                        //Send_Msg_2_AppCtrl_Upper(imms);

                        #region 重新获取未指派设备

                        //2018-06-26
                        DataTable dt = new DataTable();
                        rtv = gDbHelperLower.device_unknown_record_entity_get(ref dt);

                        imms.Body.type = Main2ApControllerMsgType.app_all_device_response;
                        imms.Body.dic = new Dictionary<string, object>();
                        imms.Body.dic.Add("ReturnCode", rtv);
                        imms.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));

                        if (rtv == 0)
                        {
                            imms.Body.n_dic = new List<Name_DIC_Struct>();
                            set_device_unknown_info_by_datatable(dt, ref imms);
                        }

                        string info = string.Format("发送app_all_device_response给AppCtrl,未指派个数{0}", dt.Rows.Count);
                        Logger.Trace(LogInfoType.DEBG, info, "Main", LogCategory.S);

                        //发送给界面去更新未指派设备信息
                        Send_Msg_2_AppCtrl_Upper(imms);
                        dt.Dispose();
                        dt = null;

                        #endregion
                    }
                    else
                    {
                        //出错处理
                        imms.Body.type = Main2ApControllerMsgType.OnOffLine_Ack;
                        imms.Body.dic = new Dictionary<string, object>();
                        imms.Body.dic.Add("ReturnCode", rtv);
                        imms.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));

                        Send_Msg_2_ApCtrl_Lower(imms);
                    }
                }
                else
                {
                    //出错处理
                    imms.Body.type = Main2ApControllerMsgType.OnOffLine_Ack;
                    imms.Body.dic = new Dictionary<string, object>();
                    imms.Body.dic.Add("ReturnCode", rtv);
                    imms.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));

                    Send_Msg_2_ApCtrl_Lower(imms);
                }

                #endregion
            }
            else
            {
                #region 下线处理

                if ((int)RC.NO_EXIST == gDbHelperLower.device_unknown_record_exist(dev.ipAddr))
                {
                    //设备(未指派)记录不存在

                    return;
                }

                //更新新记录
                rtv = gDbHelperLower.device_unknown_record_delete(dev.ipAddr);
                if (rtv == 0)
                {
                    imms.Body.type = Main2ApControllerMsgType.OnOffLine_Ack;
                    imms.Body.dic = new Dictionary<string, object>();
                    imms.Body.dic.Add("ReturnCode", rtv);
                    imms.Body.dic.Add("ReturnStr", gDbHelperLower.get_rtv_str(rtv));
                    imms.Body.dic.Add("Status", Status);

                    Send_Msg_2_ApCtrl_Lower(imms);

                    #region 重新获取未指派设备

                    //2018-06-26
                    DataTable dt = new DataTable();
                    rtv = gDbHelperLower.device_unknown_record_entity_get(ref dt);
                                       
                    imms.Body.type = Main2ApControllerMsgType.app_all_device_response;
                    imms.Body.dic = new Dictionary<string, object>();
                    imms.Body.dic.Add("ReturnCode", rtv);
                    imms.Body.dic.Add("ReturnStr", gDbHelperLower.get_rtv_str(rtv));

                    if (rtv == 0)
                    {
                        imms.Body.n_dic = new List<Name_DIC_Struct>();
                        set_device_unknown_info_by_datatable(dt, ref imms);
                    }

                    string info = string.Format("发送app_all_device_response给AppCtrl,未指派个数{0}", dt.Rows.Count);
                    Logger.Trace(LogInfoType.DEBG, info, "Main", LogCategory.S);

                    //发送给APP去更新未指派设备信息
                    Send_Msg_2_AppCtrl_Upper(imms);
                    dt.Dispose();
                    dt = null;

                    #endregion
                }
                else
                {
                    //出错处理
                    imms.Body.type = Main2ApControllerMsgType.OnOffLine_Ack;
                    imms.Body.dic = new Dictionary<string, object>();
                    imms.Body.dic.Add("ReturnCode", rtv);
                    imms.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperLower.get_rtv_str(rtv));

                    Send_Msg_2_ApCtrl_Lower(imms);
                }

                #endregion
            }

            return;
        }

        /// <summary>
        /// 获取GSM相关的参数
        /// </summary>
        /// <param name="imms"></param>
        /// <param name="all"></param>
        /// <returns></returns>
        private int get_gsm_info(InterModuleMsgStruct imms, ref str_Gsm_All_Para all)
        {
            if (imms.Body.n_dic.Count <= 0)
            {
                return -1;
            }

            if (!imms.Body.dic.ContainsKey("sys"))
            {
                return -1;
            }
            else
            {
                all.sys = int.Parse(imms.Body.dic["sys"].ToString());

                if (all.sys != 0 && all.sys != 1)
                {
                    return -1;
                }
            }

            if (imms.Body.dic.ContainsKey("hardware_id"))
            {
                all.hardware_id = int.Parse(imms.Body.dic["hardware_id"].ToString());
            }           

            for (int i = 0; i < imms.Body.n_dic.Count; i++)
            {
                string name = imms.Body.n_dic[i].name;

                switch (name)
                {
                    case "RECV_SYS_PARA":
                        {
                            #region RECV_SYS_PARA

                            //					"paraMcc":移动国家码
                            //					"paraMnc":移动网号
                            //					"paraBsic":基站识别码
                            //					"paraLac":位置区号
                            //					"paraCellId":小区ID
                            //					"paraC2":C2偏移量
                            //					"paraPeri":周期性位置更新周期
                            //					"paraAccPwr":接入功率
                            //					"paraMsPwr":手机发射功率
                            //					"paraRejCau":位置更新拒绝原因

                            all.gsmSysParaFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("paraMcc"))
                            {
                                if (imms.Body.n_dic[i].dic["paraMcc"].ToString() != "")
                                {
                                    all.gsmSysPara.paraMcc = imms.Body.n_dic[i].dic["paraMcc"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraMnc"))
                            {
                                if (imms.Body.n_dic[i].dic["paraMnc"].ToString() != "")
                                {
                                    all.gsmSysPara.paraMnc = imms.Body.n_dic[i].dic["paraMnc"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraBsic"))
                            {
                                if (imms.Body.n_dic[i].dic["paraBsic"].ToString() != "")
                                {
                                    all.gsmSysPara.paraBsic = imms.Body.n_dic[i].dic["paraBsic"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraLac"))
                            {
                                if (imms.Body.n_dic[i].dic["paraLac"].ToString() != "")
                                {
                                    all.gsmSysPara.paraLac = imms.Body.n_dic[i].dic["paraLac"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraCellId"))
                            {
                                if (imms.Body.n_dic[i].dic["paraCellId"].ToString() != "")
                                {
                                    all.gsmSysPara.paraCellId = imms.Body.n_dic[i].dic["paraCellId"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraC2"))
                            {
                                if (imms.Body.n_dic[i].dic["paraC2"].ToString() != "")
                                {
                                    all.gsmSysPara.paraC2 = imms.Body.n_dic[i].dic["paraC2"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraPeri"))
                            {
                                if (imms.Body.n_dic[i].dic["paraPeri"].ToString() != "")
                                {
                                    all.gsmSysPara.paraPeri = imms.Body.n_dic[i].dic["paraPeri"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraAccPwr"))
                            {
                                if (imms.Body.n_dic[i].dic["paraAccPwr"].ToString() != "")
                                {
                                    all.gsmSysPara.paraAccPwr = imms.Body.n_dic[i].dic["paraAccPwr"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraMsPwr"))
                            {
                                if (imms.Body.n_dic[i].dic["paraMsPwr"].ToString() != "")
                                {
                                    all.gsmSysPara.paraMsPwr = imms.Body.n_dic[i].dic["paraMsPwr"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraRejCau"))
                            {
                                if (imms.Body.n_dic[i].dic["paraRejCau"].ToString() != "")
                                {
                                    all.gsmSysPara.paraRejCau = imms.Body.n_dic[i].dic["paraRejCau"].ToString();
                                }
                            }

                            break;

                            #endregion
                        }
                    case "RECV_SYS_OPTION":
                        {
                            #region RECV_SYS_OPTION

                            //                  "opLuSms":登录时发送短信
                            //					"opLuImei":登录时获取IMEI
                            //					"opCallEn":允许用户主叫
                            //					"opDebug":调试模式，上报信令
                            //					"opLuType":登录类型
                            //					"opSmsType":短信类型

                            all.gsmSysOptionFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("opLuSms"))
                            {
                                if (imms.Body.n_dic[i].dic["opLuSms"].ToString() != "")
                                {
                                    all.gsmSysOption.opLuSms = imms.Body.n_dic[i].dic["opLuSms"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opLuImei"))
                            {
                                if (imms.Body.n_dic[i].dic["opLuImei"].ToString() != "")
                                {
                                    all.gsmSysOption.opLuImei = imms.Body.n_dic[i].dic["opLuImei"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opCallEn"))
                            {
                                if (imms.Body.n_dic[i].dic["opCallEn"].ToString() != "")
                                {
                                    all.gsmSysOption.opCallEn = imms.Body.n_dic[i].dic["opCallEn"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opDebug"))
                            {
                                if (imms.Body.n_dic[i].dic["opDebug"].ToString() != "")
                                {
                                    all.gsmSysOption.opDebug = imms.Body.n_dic[i].dic["opDebug"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opLuType"))
                            {
                                if (imms.Body.n_dic[i].dic["opLuType"].ToString() != "")
                                {
                                    all.gsmSysOption.opLuType = imms.Body.n_dic[i].dic["opLuType"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opSmsType"))
                            {
                                if (imms.Body.n_dic[i].dic["opSmsType"].ToString() != "")
                                {
                                    all.gsmSysOption.opSmsType = imms.Body.n_dic[i].dic["opSmsType"].ToString();
                                }
                            }

                            break;

                            #endregion
                        }
                    case "RECV_RF_PARA":
                        {
                            #region RECV_RF_PARA

                            //					"rfEnable":射频使能
                            //					"rfFreq":信道号
                            //					"rfPwr":发射功率衰减值

                            all.gsmRfParaFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("rfEnable"))
                            {
                                if (imms.Body.n_dic[i].dic["rfEnable"].ToString() != "")
                                {
                                    all.gsmRfPara.rfEnable = imms.Body.n_dic[i].dic["rfEnable"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("rfFreq"))
                            {
                                if (imms.Body.n_dic[i].dic["rfFreq"].ToString() != "")
                                {
                                    all.gsmRfPara.rfFreq = imms.Body.n_dic[i].dic["rfFreq"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("rfPwr"))
                            {
                                if (imms.Body.n_dic[i].dic["rfPwr"].ToString() != "")
                                {
                                    all.gsmRfPara.rfPwr = imms.Body.n_dic[i].dic["rfPwr"].ToString();
                                }
                            }

                            break;

                            #endregion
                        }
                    case "RECV_SMS_OPTION":
                        {
                            #region RECV_SMS_OPTION

                            //          "gSmsRpoa":短消息中心号码
                            //          "gSmsTpoa":短消息原叫号码
                            //          "gSmsScts":短消息发送时间 （时间格式为年/月/日/时/分/秒各两位，不足两位前补0。如2014年4月22日15点46分47秒的消息内容为“140422154647”）
                            //          "gSmsData":短消息内容 （编码格式为Unicode编码）
                            //          "autoSendtiny":是否自动发送
                            //          "autoFilterSMStiny":是否自动过滤短信
                            //          "delayTime":发送延时时间
                            //          "smsCodingtiny":短信的编码格式

                            all.gsmMsgOptionFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("gSmsRpoa"))
                            {
                                if (imms.Body.n_dic[i].dic["gSmsRpoa"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsRPOA = imms.Body.n_dic[i].dic["gSmsRpoa"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("gSmsTpoa"))
                            {
                                if (imms.Body.n_dic[i].dic["gSmsTpoa"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsTPOA = imms.Body.n_dic[i].dic["gSmsTpoa"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("gSmsScts"))
                            {
                                if (imms.Body.n_dic[i].dic["gSmsScts"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsSCTS = imms.Body.n_dic[i].dic["gSmsScts"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("gSmsData"))
                            {
                                if (imms.Body.n_dic[i].dic["gSmsData"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsDATA = imms.Body.n_dic[i].dic["gSmsData"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("autoSendtiny"))
                            {
                                if (imms.Body.n_dic[i].dic["autoSendtiny"].ToString() != "")
                                {
                                    all.gsmMsgOption.autoSend = imms.Body.n_dic[i].dic["autoSendtiny"].ToString();
                                }
                            }
                            else
                            {
                                all.gsmMsgOption.autoSend = "0";
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("autoFilterSMStiny"))
                            {
                                if (imms.Body.n_dic[i].dic["autoFilterSMStiny"].ToString() != "")
                                {
                                    all.gsmMsgOption.autoFilterSMS = imms.Body.n_dic[i].dic["autoFilterSMStiny"].ToString();
                                }
                            }
                            else
                            {
                                all.gsmMsgOption.autoFilterSMS = "0";
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("delayTime"))
                            {
                                if (imms.Body.n_dic[i].dic["delayTime"].ToString() != "")
                                {
                                    all.gsmMsgOption.delayTime = imms.Body.n_dic[i].dic["delayTime"].ToString();
                                }
                            }
                            else
                            {
                                all.gsmMsgOption.delayTime = "0";
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("smsCodingtiny"))
                            {
                                if (imms.Body.n_dic[i].dic["smsCodingtiny"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsCoding = imms.Body.n_dic[i].dic["smsCodingtiny"].ToString();
                                }
                            }

                            break;

                            #endregion
                        }
                    case "RECV_REG_MODE":
                        {
                            #region RECV_REG_MODE

                            //          "regMode":模式0时由设备自行根据系统选项决定是否允许终端入网，是否对终端发送短信；
                            //                    模式1时设备将终端标识发送给上位机，由上位机告知设备下一步的动作

                            all.gsmSysOptionFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("regMode"))
                            {
                                if (imms.Body.n_dic[i].dic["regMode"].ToString() != "")
                                {
                                    all.gsmSysOption.opRegModel = imms.Body.n_dic[i].dic["regMode"].ToString();
                                }
                            }

                            break;

                            #endregion
                        }
                    default:
                        {
                            add_log_info(LogInfoType.EROR, "get_gsm_info包含非法的ndic name\n", "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, "get_gsm_info包含非法的ndic name\n", "Main", LogCategory.R);
                            break;
                        }
                }                          
            }

            return 0;
        }        

        /// <summary>
        /// 获取GSM上报相关的参数
        /// </summary>
        /// <param name="imms"></param>
        /// <param name="all"></param>
        /// <returns></returns>
        private int get_gsm_report_info(InterModuleMsgStruct imms, ref str_Gsm_All_Para all,ref string gsmReportFullString, ref string errInfo)
        {            
            if (imms.Body.n_dic.Count <= 0)
            {
                errInfo = string.Format("n_dic的个数为0");
                return -1;
            }

            errInfo = "";
            gsmReportFullString = "";
            all = new str_Gsm_All_Para();

            if (!imms.Body.dic.ContainsKey("sys"))
            {
                errInfo = string.Format("dic不包含sys");
                return -1;
            }
            else
            {
                all.sys = int.Parse(imms.Body.dic["sys"].ToString());
                gsmReportFullString += all.sys.ToString();

                if (all.sys != 0 && all.sys != 1)
                {
                    errInfo = string.Format("sys只能为0或1");
                    return -1;
                }
            }

            if (imms.Body.dic.ContainsKey("hardware_id"))
            {
                all.hardware_id = int.Parse(imms.Body.dic["hardware_id"].ToString());
            }
            else
            {
                errInfo = string.Format("dic不包含hardware_id");
                return -1;
            }


            for (int i = 0; i < imms.Body.n_dic.Count; i++)
            {
                string name = imms.Body.n_dic[i].name;
                switch (name)
                {
                    case "RECV_SYS_PARA":
                        {
                            #region RECV_SYS_PARA

                            //					"paraMcc":移动国家码
                            //					"paraMnc":移动网号
                            //					"paraBsic":基站识别码
                            //					"paraLac":位置区号
                            //					"paraCellId":小区ID
                            //					"paraC2":C2偏移量
                            //					"paraPeri":周期性位置更新周期
                            //					"paraAccPwr":接入功率
                            //					"paraMsPwr":手机发射功率
                            //					"paraRejCau":位置更新拒绝原因

                            all.gsmSysParaFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("paraMcc"))
                            {
                                if (imms.Body.n_dic[i].dic["paraMcc"].ToString() != "")
                                {
                                    all.gsmSysPara.paraMcc = imms.Body.n_dic[i].dic["paraMcc"].ToString();
                                    gsmReportFullString += string.Format("[paraMcc:{0}]", all.gsmSysPara.paraMcc);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraMcc:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraMcc");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraMnc"))
                            {
                                if (imms.Body.n_dic[i].dic["paraMnc"].ToString() != "")
                                {
                                    all.gsmSysPara.paraMnc = imms.Body.n_dic[i].dic["paraMnc"].ToString();
                                    gsmReportFullString += string.Format("[paraMnc:{0}]", all.gsmSysPara.paraMnc);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraMnc:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraMnc");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraBsic"))
                            {
                                if (imms.Body.n_dic[i].dic["paraBsic"].ToString() != "")
                                {
                                    all.gsmSysPara.paraBsic = imms.Body.n_dic[i].dic["paraBsic"].ToString();
                                    gsmReportFullString += string.Format("[paraBsic:{0}]", all.gsmSysPara.paraBsic);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraBsic:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraBsic");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraLac"))
                            {
                                if (imms.Body.n_dic[i].dic["paraLac"].ToString() != "")
                                {
                                    all.gsmSysPara.paraLac = imms.Body.n_dic[i].dic["paraLac"].ToString();
                                    gsmReportFullString += string.Format("[paraLac:{0}]", all.gsmSysPara.paraLac);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraLac:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraLac");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraCellId"))
                            {
                                if (imms.Body.n_dic[i].dic["paraCellId"].ToString() != "")
                                {
                                    all.gsmSysPara.paraCellId = imms.Body.n_dic[i].dic["paraCellId"].ToString();
                                    gsmReportFullString += string.Format("[paraCellId:{0}]", all.gsmSysPara.paraCellId);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraCellId:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraCellId");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraC2"))
                            {
                                if (imms.Body.n_dic[i].dic["paraC2"].ToString() != "")
                                {
                                    all.gsmSysPara.paraC2 = imms.Body.n_dic[i].dic["paraC2"].ToString();
                                    gsmReportFullString += string.Format("[paraC2:{0}]", all.gsmSysPara.paraC2);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraC2:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraC2");
                                return -1;
                            }


                            if (imms.Body.n_dic[i].dic.ContainsKey("paraPeri"))
                            {
                                if (imms.Body.n_dic[i].dic["paraPeri"].ToString() != "")
                                {
                                    all.gsmSysPara.paraPeri = imms.Body.n_dic[i].dic["paraPeri"].ToString();
                                    gsmReportFullString += string.Format("[paraPeri:{0}]", all.gsmSysPara.paraPeri);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraPeri:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraPeri");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraAccPwr"))
                            {
                                if (imms.Body.n_dic[i].dic["paraAccPwr"].ToString() != "")
                                {
                                    all.gsmSysPara.paraAccPwr = imms.Body.n_dic[i].dic["paraAccPwr"].ToString();
                                    gsmReportFullString += string.Format("[paraAccPwr:{0}]", all.gsmSysPara.paraAccPwr);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraAccPwr:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraAccPwr");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraMsPwr"))
                            {
                                if (imms.Body.n_dic[i].dic["paraMsPwr"].ToString() != "")
                                {
                                    all.gsmSysPara.paraMsPwr = imms.Body.n_dic[i].dic["paraMsPwr"].ToString();
                                    gsmReportFullString += string.Format("[paraMsPwr:{0}]", all.gsmSysPara.paraMsPwr);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraMsPwr:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraMsPwr");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("paraRejCau"))
                            {
                                if (imms.Body.n_dic[i].dic["paraRejCau"].ToString() != "")
                                {
                                    all.gsmSysPara.paraRejCau = imms.Body.n_dic[i].dic["paraRejCau"].ToString();
                                    gsmReportFullString += string.Format("[paraRejCau:{0}]", all.gsmSysPara.paraRejCau);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[paraRejCau:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "paraRejCau");
                                return -1;
                            }

                            break;

                            #endregion
                        }
                    case "RECV_SYS_OPTION":
                        {
                            #region RECV_SYS_OPTION

                            //                  "opLuSms":登录时发送短信
                            //					"opLuImei":登录时获取IMEI
                            //					"opCallEn":允许用户主叫
                            //					"opDebug":调试模式，上报信令
                            //					"opLuType":登录类型
                            //					"opSmsType":短信类型

                            all.gsmSysOptionFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("opLuSms"))
                            {
                                if (imms.Body.n_dic[i].dic["opLuSms"].ToString() != "")
                                {
                                    all.gsmSysOption.opLuSms = imms.Body.n_dic[i].dic["opLuSms"].ToString();
                                    gsmReportFullString += string.Format("[opLuSms:{0}]", all.gsmSysOption.opLuSms);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[opLuSms:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "opLuSms");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opLuImei"))
                            {
                                if (imms.Body.n_dic[i].dic["opLuImei"].ToString() != "")
                                {
                                    all.gsmSysOption.opLuImei = imms.Body.n_dic[i].dic["opLuImei"].ToString();
                                    gsmReportFullString += string.Format("[opLuImei:{0}]", all.gsmSysOption.opLuImei);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[opLuImei:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "opLuImei");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opCallEn"))
                            {
                                if (imms.Body.n_dic[i].dic["opCallEn"].ToString() != "")
                                {
                                    all.gsmSysOption.opCallEn = imms.Body.n_dic[i].dic["opCallEn"].ToString();
                                    gsmReportFullString += string.Format("[opCallEn:{0}]", all.gsmSysOption.opCallEn);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[opCallEn:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "opCallEn");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opDebug"))
                            {
                                if (imms.Body.n_dic[i].dic["opDebug"].ToString() != "")
                                {
                                    all.gsmSysOption.opDebug = imms.Body.n_dic[i].dic["opDebug"].ToString();
                                    gsmReportFullString += string.Format("[opDebug:{0}]", all.gsmSysOption.opDebug);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[opDebug:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "opDebug");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opLuType"))
                            {
                                if (imms.Body.n_dic[i].dic["opLuType"].ToString() != "")
                                {
                                    all.gsmSysOption.opLuType = imms.Body.n_dic[i].dic["opLuType"].ToString();
                                    gsmReportFullString += string.Format("[opLuType:{0}]", all.gsmSysOption.opLuType);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[opLuType:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "opLuType");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("opSmsType"))
                            {
                                if (imms.Body.n_dic[i].dic["opSmsType"].ToString() != "")
                                {
                                    all.gsmSysOption.opSmsType = imms.Body.n_dic[i].dic["opSmsType"].ToString();
                                    gsmReportFullString += string.Format("[opSmsType:{0}]", all.gsmSysOption.opSmsType);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[opSmsType:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "opSmsType");
                                return -1;
                            }

                            break;

                            #endregion
                        }
                    case "RECV_RF_PARA":
                        {
                            #region RECV_RF_PARA

                            //					"rfEnable":射频使能
                            //					"rfFreq":信道号
                            //					"rfPwr":发射功率衰减值

                            all.gsmRfParaFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("rfEnable"))
                            {
                                if (imms.Body.n_dic[i].dic["rfEnable"].ToString() != "")
                                {
                                    all.gsmRfPara.rfEnable = imms.Body.n_dic[i].dic["rfEnable"].ToString();
                                    gsmReportFullString += string.Format("[rfEnable:{0}]", all.gsmRfPara.rfEnable);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[rfEnable:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "rfEnable");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("rfFreq"))
                            {
                                if (imms.Body.n_dic[i].dic["rfFreq"].ToString() != "")
                                {
                                    all.gsmRfPara.rfFreq = imms.Body.n_dic[i].dic["rfFreq"].ToString();
                                    gsmReportFullString += string.Format("[rfFreq:{0}]", all.gsmRfPara.rfFreq);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[rfFreq:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "rfFreq");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("rfPwr"))
                            {
                                if (imms.Body.n_dic[i].dic["rfPwr"].ToString() != "")
                                {
                                    all.gsmRfPara.rfPwr = imms.Body.n_dic[i].dic["rfPwr"].ToString();
                                    gsmReportFullString += string.Format("[rfPwr:{0}]", all.gsmRfPara.rfPwr);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[rfPwr:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "rfPwr");
                                return -1;
                            }

                            break;

                            #endregion
                        }
                    case "RECV_SMS_OPTION":
                        {
                            // 短信部分无需处理

                            #region RECV_SMS_OPTION

                            //          "gSmsRpoa":短消息中心号码
                            //          "gSmsTpoa":短消息原叫号码
                            //          "gSmsScts":短消息发送时间 （时间格式为年/月/日/时/分/秒各两位，不足两位前补0。如2014年4月22日15点46分47秒的消息内容为“140422154647”）
                            //          "gSmsData":短消息内容 （编码格式为Unicode编码）
                            //          "autoSendtiny":是否自动发送
                            //          "autoFilterSMStiny":是否自动过滤短信
                            //          "delayTime":发送延时时间
                            //          "smsCodingtiny":短信的编码格式

                            all.gsmMsgOptionFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("gSmsRpoa"))
                            {
                                if (imms.Body.n_dic[i].dic["gSmsRpoa"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsRPOA = imms.Body.n_dic[i].dic["gSmsRpoa"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("gSmsTpoa"))
                            {
                                if (imms.Body.n_dic[i].dic["gSmsTpoa"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsTPOA = imms.Body.n_dic[i].dic["gSmsTpoa"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("gSmsScts"))
                            {
                                if (imms.Body.n_dic[i].dic["gSmsScts"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsSCTS = imms.Body.n_dic[i].dic["gSmsScts"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("gSmsData"))
                            {
                                if (imms.Body.n_dic[i].dic["gSmsData"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsDATA = imms.Body.n_dic[i].dic["gSmsData"].ToString();
                                }
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("autoSendtiny"))
                            {
                                if (imms.Body.n_dic[i].dic["autoSendtiny"].ToString() != "")
                                {
                                    all.gsmMsgOption.autoSend = imms.Body.n_dic[i].dic["autoSendtiny"].ToString();
                                }
                            }
                            else
                            {
                                all.gsmMsgOption.autoSend = "0";
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("autoFilterSMStiny"))
                            {
                                if (imms.Body.n_dic[i].dic["autoFilterSMStiny"].ToString() != "")
                                {
                                    all.gsmMsgOption.autoFilterSMS = imms.Body.n_dic[i].dic["autoFilterSMStiny"].ToString();
                                }
                            }
                            else
                            {
                                all.gsmMsgOption.autoFilterSMS = "0";
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("delayTime"))
                            {
                                if (imms.Body.n_dic[i].dic["delayTime"].ToString() != "")
                                {
                                    all.gsmMsgOption.delayTime = imms.Body.n_dic[i].dic["delayTime"].ToString();
                                }
                            }
                            else
                            {
                                all.gsmMsgOption.delayTime = "0";
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("smsCodingtiny"))
                            {
                                if (imms.Body.n_dic[i].dic["smsCodingtiny"].ToString() != "")
                                {
                                    all.gsmMsgOption.smsCoding = imms.Body.n_dic[i].dic["smsCodingtiny"].ToString();
                                }
                            }

                            break;

                            #endregion
                        }
                    case "RECV_REG_MODE":
                        {
                            #region RECV_REG_MODE

                            //          "regMode":模式0时由设备自行根据系统选项决定是否允许终端入网，是否对终端发送短信；
                            //                    模式1时设备将终端标识发送给上位机，由上位机告知设备下一步的动作

                            all.gsmSysOptionFlag = true;
                            if (imms.Body.n_dic[i].dic.ContainsKey("regMode"))
                            {
                                if (imms.Body.n_dic[i].dic["regMode"].ToString() != "")
                                {
                                    all.gsmSysOption.opRegModel = imms.Body.n_dic[i].dic["regMode"].ToString();
                                    gsmReportFullString += string.Format("[regMode:{0}]", all.gsmSysOption.opRegModel);
                                }
                                else
                                {
                                    gsmReportFullString += string.Format("[regMode:]");
                                }
                            }
                            else
                            {
                                errInfo = string.Format("n_dic不包含:{0}", "regMode");
                                return -1;
                            }

                            break;

                            #endregion
                        }
                    default:
                        {
                            add_log_info(LogInfoType.EROR, "get_gc_report_info包含非法的ndic name\n", "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, "get_gc_report_info包含非法的ndic name\n", "Main", LogCategory.I);
                            break;
                        }
                }
            }

            return 0;
        }

        /// <summary>
        /// 获取GSM-V2/CDMA相关的参数
        /// </summary>
        /// <param name="imms"></param>
        /// <param name="all"></param>
        /// <returns></returns>
        private int get_gc_info(InterModuleMsgStruct imms, ref str_GC_All_Para all, ref string errInfo)
        {
            if (imms.Body.n_dic.Count <= 0)
            {
                errInfo = string.Format("n_dic中没任何内容.");
                return -1;
            }


            //if (!imms.Body.dic.ContainsKey("Protocol"))
            //{
            //    all.Protocol = "GSM";
            //}
            //else
            //{
            //    all.Protocol = imms.Body.dic["Protocol"].ToString();
            //    if (all.Protocol != "GSM" && all.Protocol != "CDMA")
            //    {
            //        errInfo = string.Format("不支持的Protocol = {0}",all.Protocol);
            //        return -1;
            //    }
            //}

            if (!imms.Body.dic.ContainsKey("sys"))
            {
                errInfo = string.Format("没包含sys字段.");
                return -1;
            }
            else
            {
                all.sys = int.Parse(imms.Body.dic["sys"].ToString());
                if (all.sys != 0 && all.sys != 1)
                {
                    errInfo = string.Format("不支持的sys = {0}", all.sys);
                    return -1;
                }
            }

            //if (imms.Body.dic.ContainsKey("hardware_id"))
            //{
            //    all.hardware_id = int.Parse(imms.Body.dic["hardware_id"].ToString());
            //}

            for (int i = 0; i < imms.Body.n_dic.Count; i++)
            {
                string name = imms.Body.n_dic[i].name;

                switch (name)
                {
                    case "FAP_NB_CELL_INFO_MSG":
                        {
                            #region FAP_NB_CELL_INFO_MSG

                            //
                            // 该消息暂时不用了
                            //
                            //	"bFapNbCellNum":n	         邻小区个数。最多16个(n<=16)
                            //  "Cell_#n#/bGCId":XXX         小区ID。注意在CDMA制式没有小区ID，高位WORD是SID，低位WORD是NID
                            //	"Cell_#n#/bPLMNId":XXX       邻小区PLMN标志。
                            //	"Cell_#n#/cRSRP":XXX	     信号功率
                            //	"Cell_#n#/wTac":XXX	         追踪区域码。GSM：LAC；CDMA：REG_ZONE
                            //	"Cell_#n#/wPhyCellId":XXX	 物理小区ID。GSM：BSIC；CDMA：PN
                            //	"Cell_#n#/wUARFCN":XXX	     小区频点
                            //	"Cell_#n#/cRefTxPower":XXX	 参考发射功率。GSM制式时为C1测量值
                            //	"Cell_#n#/bNbCellNum":XXX	 邻小区的令小区个数
                            //	"Cell_#n#/bC2":XXX	         C2测量值。GSM,其他制式保留
                            //	"Cell_#n#/bReserved1":XXX	 只用于LTE,其它保留
                            //	"Cell_#n#/stNbCell":m		 邻小区的邻小区个数，最多32个（m<=32）
                            //	"Cell_#n#/NeighCell_#m#/wUarfcn":XXX	    小区频点
                            //	"Cell_#n#/NeighCell_#m#/wPhyCellId":XXX	    物理小区ID。GSM:BSIC；CDMA：PN
                            //	"Cell_#n#/NeighCell_#m#/cRSRP":XXX	        信号功率
                            //	"Cell_#n#/NeighCell_#m#/cC1":XXX	        C1测量值。只用于GSM制式
                            //	"Cell_#n#/NeighCell_#m#/bC2":XXX	        C2测量值。只用于GSM制式

                            int bFapNbCellNum = -1;
                            if (imms.Body.n_dic[i].dic.ContainsKey("bFapNbCellNum"))
                            {
                                if (imms.Body.n_dic[i].dic["bFapNbCellNum"].ToString() != "")
                                {
                                    bFapNbCellNum = int.Parse(imms.Body.n_dic[i].dic["bFapNbCellNum"].ToString());
                                    if (bFapNbCellNum <= 0 || bFapNbCellNum > 16)
                                    {
                                        errInfo = string.Format("bFapNbCellNum = {0},越界.", bFapNbCellNum);
                                        return -1;
                                    }
                                }
                            }
                            else
                            {
                                errInfo = string.Format("不包含bFapNbCellNum字段.");
                                return -1;
                            }

                            string field = "";
                            all.gcNbCellFlag = true;
                            all.listGcNbCell = new List<strGcNbCell>();

                            for (int j = 1; j <= bFapNbCellNum; j++)
                            {
                                strGcNbCell str = new strGcNbCell();

                                field = string.Format("Cell_#{0}#/bGCId", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bGCId = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/bPLMNId", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bPLMNId = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/cRSRP", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.cRSRP = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/wTac", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.wTac = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/wPhyCellId", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.wPhyCellId = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/wUARFCN", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.wUARFCN = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/cRefTxPower", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.cRefTxPower = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/bNbCellNum", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bNbCellNum = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/bC2", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bC2 = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/bReserved1", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bReserved1 = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                int m = -1;
                                field = string.Format("Cell_#{0}#/stNbCell", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    m = int.Parse(imms.Body.n_dic[i].dic.ContainsKey(field).ToString());
                                    if (m < 0 || m > 32)
                                    {
                                        errInfo = string.Format("stNbCell = {0},越界.", m);
                                        return -1;
                                    }
                                }

                                //					"Cell_#n#/NeighCell_#m#/wUarfcn":XXX	    小区频点
                                //					"Cell_#n#/NeighCell_#m#/wPhyCellId":XXX	    物理小区ID。GSM:BSIC；CDMA：PN
                                //					"Cell_#n#/NeighCell_#m#/cRSRP":XXX	        信号功率
                                //					"Cell_#n#/NeighCell_#m#/cC1":XXX	        C1测量值。只用于GSM制式
                                //					"Cell_#n#/NeighCell_#m#/bC2":XXX	        C2测量值。只用于GSM制式

                                str.listItem = new List<strGcNbCellItem>();
                                for (int k = 1; k <= m; k++)
                                {
                                    strGcNbCellItem item = new strGcNbCellItem();

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/wUarfcn", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.wUarfcn = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/wPhyCellId", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.wPhyCellId = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/cRSRP", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.cRSRP = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/cC1", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.cC1 = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/wUarfcn", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.bC2 = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    str.listItem.Add(item);
                                }

                                all.listGcNbCell.Add(str);
                            }

                            break;

                            #endregion
                        }
                    case "CONFIG_FAP_MSG":
                        {
                            #region CONFIG_FAP_MSG

                            //	"bWorkingMode":XXX		    工作模式:1 为侦码模式 ;3驻留模式.
                            //	"bC":XXX		            是否自动切换模式。保留
                            //	"wRedirectCellUarfcn":XXX	CDMA黑名单频点
                            //	"dwDateTime":XXX			当前时间	
                            //	"bPLMNId":XXX		        PLMN标志
                            //	"bTxPower":XXX			    实际发射功率.设置发射功率衰减寄存器, 0输出最大功率, 每增加1, 衰减1DB
                            //	"bRxGain":XXX			    接收信号衰减寄存器. 每增加1增加1DB的增益
                            //	"wPhyCellId":XXX		    物理小区ID.
                            //	"wLAC":XXX			        追踪区域码。GSM：LAC;CDMA：REG_ZONE
                            //	"wUARFCN":XXX			    小区频点. CDMA 制式为BSID
                            //	"dwCellId":XXX			    小区ID。注意在CDMA制式没有小区ID，高位WORD 是SID ， 低位WORD 是NID

                            all.gcParamConfigFlag = true;

                            //(1)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bWorkingMode"))
                            {
                                all.gcParamConfig.bWorkingMode = imms.Body.n_dic[i].dic["bWorkingMode"].ToString();
                            }

                            //(2)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bC"))
                            {
                                all.gcParamConfig.bC = imms.Body.n_dic[i].dic["bC"].ToString();
                            }

                            //(3)
                            if (imms.Body.n_dic[i].dic.ContainsKey("wRedirectCellUarfcn"))
                            {
                                all.gcParamConfig.wRedirectCellUarfcn = imms.Body.n_dic[i].dic["wRedirectCellUarfcn"].ToString();
                            }

                            //(4)
                            if (imms.Body.n_dic[i].dic.ContainsKey("dwDateTime"))
                            {
                                all.gcParamConfig.dwDateTime = imms.Body.n_dic[i].dic["dwDateTime"].ToString();
                            }

                            //(5)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bPLMNId"))
                            {
                                all.gcParamConfig.bPLMNId = imms.Body.n_dic[i].dic["bPLMNId"].ToString();
                            }

                            //(6)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bTxPower"))
                            {
                                all.gcParamConfig.bTxPower = imms.Body.n_dic[i].dic["bTxPower"].ToString();
                            }

                            //(7)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bRxGain"))
                            {
                                all.gcParamConfig.bRxGain = imms.Body.n_dic[i].dic["bRxGain"].ToString();
                            }

                            //(8)
                            if (imms.Body.n_dic[i].dic.ContainsKey("wPhyCellId"))
                            {
                                all.gcParamConfig.wPhyCellId = imms.Body.n_dic[i].dic["wPhyCellId"].ToString();
                            }

                            //(9)
                            if (imms.Body.n_dic[i].dic.ContainsKey("wLAC"))
                            {
                                all.gcParamConfig.wLAC = imms.Body.n_dic[i].dic["wLAC"].ToString();
                            }

                            //(10)
                            if (imms.Body.n_dic[i].dic.ContainsKey("wUARFCN"))
                            {
                                all.gcParamConfig.wUARFCN = imms.Body.n_dic[i].dic["wUARFCN"].ToString();
                            }

                            //(11)
                            if (imms.Body.n_dic[i].dic.ContainsKey("dwCellId"))
                            {
                                all.gcParamConfig.dwCellId = imms.Body.n_dic[i].dic["dwCellId"].ToString();
                            }

                            break;

                            #endregion
                        }
                    case "FAP_TRACE_MSG":
                        {
                            #region FAP_TRACE_MSG

                            //	"wTraceLen":XXX	      Trace长度
                            //   "cTrace":XXX          Trace内容

                            if (all.gcTraceReportFlag != true)
                            {
                                all.gcTraceReportFlag = true;
                                all.gcTraceReport = new strGcTraceReport();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wTraceLen"))
                            {
                                all.gcTraceReport.wTraceLen = imms.Body.n_dic[i].dic["wTraceLen"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("cTrace"))
                            {
                                all.gcTraceReport.cTrace = imms.Body.n_dic[i].dic["cTrace"].ToString();
                            }

                            break;

                            #endregion
                        }
                    case "UE_ORM_REPORT_MSG":
                        {
                            #region UE_ORM_REPORT_MSG

                            //	"bOrmType":XXX	    	主叫类型。1=呼叫号码, 2=短消息PDU,3=寻呼测量
                            //	"bUeId":XXX	     	    IMSI
                            //	"cRSRP":XXX	    	    接收信号强度。寻呼测量时，-128表示寻呼失败
                            //	"bUeContentLen":XXX	    Ue主叫内容长度
                            //	"bUeContent":XXX	    Ue主叫内容。最大249字节。

                            if (all.gcTraceReportFlag != true)
                            {
                                all.gcTraceReportFlag = true;
                                all.gcTraceReport = new strGcTraceReport();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bOrmType"))
                            {
                                all.gcTraceReport.bOrmType = imms.Body.n_dic[i].dic["bOrmType"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bUeId"))
                            {
                                all.gcTraceReport.bUeId = imms.Body.n_dic[i].dic["bUeId"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("cRSRP"))
                            {
                                all.gcTraceReport.cRSRP = imms.Body.n_dic[i].dic["cRSRP"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bUeContentLen"))
                            {
                                all.gcTraceReport.bUeContentLen = imms.Body.n_dic[i].dic["bUeContentLen"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bUeContent"))
                            {
                                all.gcTraceReport.bUeContent = imms.Body.n_dic[i].dic["bUeContent"].ToString();
                            }

                            break;

                            #endregion
                        }
                    case "CONFIG_SMS_CONTENT_MSG":
                        {
                            #region CONFIG_SMS_CONTENT_MSG

                            //	"bSMSOriginalNumLen":XXX	    主叫号码长度
                            //	"bSMSOriginalNum":XXX	    	主叫号码
                            //	"bSMSContentLen":XXX	    	短信内容字数
                            //	"bSMSContent":XXX	            短信内容.unicode编码，每个字符占2字节

                            if (all.gcMiscFlag != true)
                            {
                                all.gcMiscFlag = true;
                                all.gcMisc = new strGcMisc();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bSMSOriginalNumLen"))
                            {
                                all.gcMisc.bSMSOriginalNumLen = imms.Body.n_dic[i].dic["bSMSOriginalNumLen"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bSMSOriginalNum"))
                            {
                                all.gcMisc.bSMSOriginalNum = imms.Body.n_dic[i].dic["bSMSOriginalNum"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bSMSContentLen"))
                            {
                                all.gcMisc.bSMSContentLen = imms.Body.n_dic[i].dic["bSMSContentLen"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bSMSContent"))
                            {
                                all.gcMisc.bSMSContent = imms.Body.n_dic[i].dic["bSMSContent"].ToString();
                            }

                            break;

                            #endregion
                        }
                    case "CONFIG_CDMA_CARRIER_MSG":
                        {
                            #region CONFIG_CDMA_CARRIER_MSG                            

                            //	"wARFCN1":XXX	        工作频点1	
                            //	"bARFCN1Mode":XXX	    工作频点1模式。0表示扫描，1表示常开,2表示关闭。
                            //	"wARFCN1Duration":XXX	工作频点1扫描时长
                            //	"wARFCN1Period":XXX	    工作频点1扫描间隔

                            //	"wARFCN2":XXX	        工作频点2
                            //	"bARFCN2Mode":XXX	    工作频点2模式。 0表示扫描，1表示常开,2表示关闭。
                            //	"wARFCN2Duration":XXX	工作频点2扫描时长
                            //	"wARFCN2Period":XXX	    工作频点2扫描间隔

                            //	"wARFCN3":XXX	        工作频点3	
                            //	"bARFCN3Mode":XXX	    工作频点3模式。 0表示扫描，1表示常开,2表示关闭。
                            //	"wARFCN3Duration":XXX	工作频点3扫描时长	
                            //	"wARFCN3Period":XXX	    工作频点3扫描间隔

                            //	"wARFCN4":XXX	        工作频点4	
                            //	"bARFCN4Mode":XXX	    工作频点4模式。	0表示扫描，1表示常开,2表示关闭。
                            //	"wARFCN4Duration":XXX	工作频点4扫描时长
                            //	"wARFCN4Period":XXX	    工作频点4扫描间隔

                            all.gcCarrierMsgFlag = true;

                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN1"))
                            {
                                all.gcCarrierMsg.wARFCN1 = imms.Body.n_dic[i].dic["wARFCN1"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN1Mode"))
                            {
                                all.gcCarrierMsg.bARFCN1Mode = imms.Body.n_dic[i].dic["bARFCN1Mode"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN1Duration"))
                            {
                                all.gcCarrierMsg.wARFCN1Duration = imms.Body.n_dic[i].dic["wARFCN1Duration"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN1Period"))
                            {
                                all.gcCarrierMsg.wARFCN1Period = imms.Body.n_dic[i].dic["wARFCN1Period"].ToString();
                            }



                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN2"))
                            {
                                all.gcCarrierMsg.wARFCN2 = imms.Body.n_dic[i].dic["wARFCN2"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN2Mode"))
                            {
                                all.gcCarrierMsg.bARFCN2Mode = imms.Body.n_dic[i].dic["bARFCN2Mode"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN2Duration"))
                            {
                                all.gcCarrierMsg.wARFCN2Duration = imms.Body.n_dic[i].dic["wARFCN2Duration"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN2Period"))
                            {
                                all.gcCarrierMsg.wARFCN2Period = imms.Body.n_dic[i].dic["wARFCN2Period"].ToString();
                            }



                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN3"))
                            {
                                all.gcCarrierMsg.wARFCN3 = imms.Body.n_dic[i].dic["wARFCN3"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN3Mode"))
                            {
                                all.gcCarrierMsg.bARFCN3Mode = imms.Body.n_dic[i].dic["bARFCN3Mode"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN3Duration"))
                            {
                                all.gcCarrierMsg.wARFCN3Duration = imms.Body.n_dic[i].dic["wARFCN3Duration"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN3Period"))
                            {
                                all.gcCarrierMsg.wARFCN3Period = imms.Body.n_dic[i].dic["wARFCN3Period"].ToString();
                            }


                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN4"))
                            {
                                all.gcCarrierMsg.wARFCN4 = imms.Body.n_dic[i].dic["wARFCN4"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN4Mode"))
                            {
                                all.gcCarrierMsg.bARFCN4Mode = imms.Body.n_dic[i].dic["bARFCN4Mode"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN4Duration"))
                            {
                                all.gcCarrierMsg.wARFCN4Duration = imms.Body.n_dic[i].dic["wARFCN4Duration"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN4Period"))
                            {
                                all.gcCarrierMsg.wARFCN4Period = imms.Body.n_dic[i].dic["wARFCN4Period"].ToString();
                            }


                            break;

                            #endregion
                        }
                    case "CONFIG_IMSI_MSG_V3_ID":
                        {
                            #region CONFIG_IMSI_MSG_V3_ID

                            //	"bIMSINum":n		    本条消息中的IMSI(n<=50)                           
                            //	"bActionType":XXX		动作类型。1 = Delete All IMSI；2 = Delete Special IMSI；3 = Add IMSI；4 = Query IMSI
                            //	"bIMSI_#n#":XXX	        IMSI数组。0~9	配置/删除/查询的IMSI
                            //	"bUeActionFlag_#n#":XXX 目标IMSI对应的动作。1 = Reject；5 = Hold ON	

                            int bIMSINum = -1;
                            string field = "";
                            string bActionType = "";

                            if (imms.Body.n_dic[i].dic.ContainsKey("bIMSINum"))
                            {
                                if (imms.Body.n_dic[i].dic["bIMSINum"].ToString() != "")
                                {
                                    bIMSINum = int.Parse(imms.Body.n_dic[i].dic["bIMSINum"].ToString());
                                    if (bIMSINum < 0 || bIMSINum > 50)
                                    {
                                        errInfo = string.Format("bIMSINum = {0},越界.", bIMSINum);
                                        return -1;
                                    }
                                }
                            }
                            else
                            {
                                errInfo = string.Format("不包含bIMSINum字段.");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bActionType"))
                            {
                                if (imms.Body.n_dic[i].dic["bActionType"].ToString() != "")
                                {
                                    bActionType = imms.Body.n_dic[i].dic["bActionType"].ToString();
                                    if (bActionType != "1" &&
                                        bActionType != "2" &&
                                        bActionType != "3" &&
                                        bActionType != "4")
                                    {
                                        errInfo = string.Format("bActionType = {0},非法.", bActionType);
                                        return -1;
                                    }
                                    else
                                    {
                                        // 2018-08-24
                                        all.actionType = bActionType;
                                    }
                                }
                            }
                            else
                            {
                                errInfo = string.Format("不包含bActionType字段.");
                                return -1;
                            }

                            all.gcImsiActionFlag = true;
                            all.listGcImsiAction = new List<strGcImsiAction>();

                            for (int j = 0; j < bIMSINum; j++)
                            {
                                strGcImsiAction str = new strGcImsiAction();

                                //2018-11-27
                                str.rbStart = "";
                                str.rbEnd = "";
                                str.time = DateTime.Now.ToString();
                                str.des = "";

                                str.bindingDevId = "-1";

                                field = string.Format("bIMSI_#{0}#", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    if (imms.Body.n_dic[i].dic[field].ToString() != "")
                                    {
                                        str.bIMSI = imms.Body.n_dic[i].dic[field].ToString();
                                    }
                                }

                                field = string.Format("bUeActionFlag_#{0}#", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    if (imms.Body.n_dic[i].dic[field].ToString() != "")
                                    {
                                        str.bUeActionFlag = imms.Body.n_dic[i].dic[field].ToString();
                                    }
                                }

                                all.listGcImsiAction.Add(str);
                            }


                            #endregion

                            break;
                        }
                    default:
                        {
                            errInfo = string.Format("get_gc_info包含非法的ndic name:{0}.", name);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.R);
                            return -1;
                        }
                }
            }

            return 0;
        }

        /// <summary>
        /// 获取GSM-V2/CDMA相关的参数
        /// </summary>
        /// <param name="imms"></param>
        /// <param name="all"></param>
        /// <returns></returns>
        private int get_gc_report_info(InterModuleMsgStruct imms, ref str_GC_All_Para all, ref string gcReportFullString,ref string errInfo, devMode dm)
        {
            if (imms.Body.n_dic.Count <= 0)
            {
                errInfo = string.Format("n_dic中没任何内容.");
                return -1;
            }


            //if (!imms.Body.dic.ContainsKey("Protocol"))
            //{
            //    all.Protocol = "GSM";
            //}
            //else
            //{
            //    all.Protocol = imms.Body.dic["Protocol"].ToString();
            //    if (all.Protocol != "GSM" && all.Protocol != "CDMA")
            //    {
            //        errInfo = string.Format("不支持的Protocol = {0}",all.Protocol);
            //        return -1;
            //    }
            //}


            errInfo = "";
            gcReportFullString = "";
            all = new str_GC_All_Para();           

            if (!imms.Body.dic.ContainsKey("sys"))
            {
                errInfo = string.Format("没包含sys字段.");
                return -1;
            }
            else
            {
                all.sys = int.Parse(imms.Body.dic["sys"].ToString());
                if (all.sys != 0 && all.sys != 1)
                {
                    errInfo = string.Format("不支持的sys = {0}", all.sys);
                    return -1;
                }
            }

            //if (imms.Body.dic.ContainsKey("hardware_id"))
            //{
            //    all.hardware_id = int.Parse(imms.Body.dic["hardware_id"].ToString());
            //}

            for (int i = 0; i < imms.Body.n_dic.Count; i++)
            {
                string name = imms.Body.n_dic[i].name;

                switch (name)
                {
                    case "FAP_NB_CELL_INFO_MSG":
                        {
                            #region FAP_NB_CELL_INFO_MSG

                            //
                            // 该消息暂时不用了
                            //
                            //	"bFapNbCellNum":n	         邻小区个数。最多16个(n<=16)
                            //  "Cell_#n#/bGCId":XXX         小区ID。注意在CDMA制式没有小区ID，高位WORD是SID，低位WORD是NID
                            //	"Cell_#n#/bPLMNId":XXX       邻小区PLMN标志。
                            //	"Cell_#n#/cRSRP":XXX	     信号功率
                            //	"Cell_#n#/wTac":XXX	         追踪区域码。GSM：LAC；CDMA：REG_ZONE
                            //	"Cell_#n#/wPhyCellId":XXX	 物理小区ID。GSM：BSIC；CDMA：PN
                            //	"Cell_#n#/wUARFCN":XXX	     小区频点
                            //	"Cell_#n#/cRefTxPower":XXX	 参考发射功率。GSM制式时为C1测量值
                            //	"Cell_#n#/bNbCellNum":XXX	 邻小区的令小区个数
                            //	"Cell_#n#/bC2":XXX	         C2测量值。GSM,其他制式保留
                            //	"Cell_#n#/bReserved1":XXX	 只用于LTE,其它保留
                            //	"Cell_#n#/stNbCell":m		 邻小区的邻小区个数，最多32个（m<=32）
                            //	"Cell_#n#/NeighCell_#m#/wUarfcn":XXX	    小区频点
                            //	"Cell_#n#/NeighCell_#m#/wPhyCellId":XXX	    物理小区ID。GSM:BSIC；CDMA：PN
                            //	"Cell_#n#/NeighCell_#m#/cRSRP":XXX	        信号功率
                            //	"Cell_#n#/NeighCell_#m#/cC1":XXX	        C1测量值。只用于GSM制式
                            //	"Cell_#n#/NeighCell_#m#/bC2":XXX	        C2测量值。只用于GSM制式

                            int bFapNbCellNum = -1;
                            if (imms.Body.n_dic[i].dic.ContainsKey("bFapNbCellNum"))
                            {
                                if (imms.Body.n_dic[i].dic["bFapNbCellNum"].ToString() != "")
                                {
                                    bFapNbCellNum = int.Parse(imms.Body.n_dic[i].dic["bFapNbCellNum"].ToString());
                                    if (bFapNbCellNum <= 0 || bFapNbCellNum > 16)
                                    {
                                        errInfo = string.Format("bFapNbCellNum = {0},越界.", bFapNbCellNum);
                                        return -1;
                                    }
                                }
                            }
                            else
                            {
                                errInfo = string.Format("不包含bFapNbCellNum字段.");
                                return -1;
                            }

                            string field = "";
                            all.gcNbCellFlag = true;
                            all.listGcNbCell = new List<strGcNbCell>();

                            for (int j = 1; j <= bFapNbCellNum; j++)
                            {
                                strGcNbCell str = new strGcNbCell();

                                field = string.Format("Cell_#{0}#/bGCId", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bGCId = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/bPLMNId", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bPLMNId = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/cRSRP", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.cRSRP = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/wTac", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.wTac = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/wPhyCellId", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.wPhyCellId = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/wUARFCN", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.wUARFCN = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/cRefTxPower", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.cRefTxPower = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/bNbCellNum", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bNbCellNum = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/bC2", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bC2 = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                field = string.Format("Cell_#{0}#/bReserved1", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    str.bReserved1 = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                }

                                int m = -1;
                                field = string.Format("Cell_#{0}#/stNbCell", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    m = int.Parse(imms.Body.n_dic[i].dic.ContainsKey(field).ToString());
                                    if (m < 0 || m > 32)
                                    {
                                        errInfo = string.Format("stNbCell = {0},越界.", m);
                                        return -1;
                                    }
                                }

                                //					"Cell_#n#/NeighCell_#m#/wUarfcn":XXX	    小区频点
                                //					"Cell_#n#/NeighCell_#m#/wPhyCellId":XXX	    物理小区ID。GSM:BSIC；CDMA：PN
                                //					"Cell_#n#/NeighCell_#m#/cRSRP":XXX	        信号功率
                                //					"Cell_#n#/NeighCell_#m#/cC1":XXX	        C1测量值。只用于GSM制式
                                //					"Cell_#n#/NeighCell_#m#/bC2":XXX	        C2测量值。只用于GSM制式

                                str.listItem = new List<strGcNbCellItem>();
                                for (int k = 1; k <= m; k++)
                                {
                                    strGcNbCellItem item = new strGcNbCellItem();

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/wUarfcn", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.wUarfcn = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/wPhyCellId", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.wPhyCellId = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/cRSRP", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.cRSRP = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/cC1", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.cC1 = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    field = string.Format("Cell_#{0}#/NeighCell_#{1}#/wUarfcn", j, k);
                                    if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                    {
                                        item.bC2 = imms.Body.n_dic[i].dic.ContainsKey(field).ToString();
                                    }

                                    str.listItem.Add(item);
                                }

                                all.listGcNbCell.Add(str);
                            }

                            break;

                            #endregion
                        }
                    case "CONFIG_FAP_MSG":
                        {
                            #region CONFIG_FAP_MSG

                            //	"bWorkingMode":XXX		    工作模式:1 为侦码模式 ;3驻留模式.
                            //	"bC":XXX		            是否自动切换模式。保留
                            //	"wRedirectCellUarfcn":XXX	CDMA黑名单频点
                            ////////////////////////////	"dwDateTime":XXX			当前时间	
                            //	"bPLMNId":XXX		        PLMN标志
                            //	"bTxPower":XXX			    实际发射功率.设置发射功率衰减寄存器, 0输出最大功率, 每增加1, 衰减1DB
                            //	"bRxGain":XXX			    接收信号衰减寄存器. 每增加1增加1DB的增益
                            //	"wPhyCellId":XXX		    物理小区ID.
                            //	"wLAC":XXX			        追踪区域码。GSM：LAC;CDMA：REG_ZONE
                            //	"wUARFCN":XXX			    小区频点. CDMA 制式为BSID
                            //	"dwCellId":XXX			    小区ID。注意在CDMA制式没有小区ID，高位WORD 是SID ， 低位WORD 是NID

                            all.gcParamConfigFlag = true;

                            //(1)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bWorkingMode"))
                            {
                                all.gcParamConfig.bWorkingMode = imms.Body.n_dic[i].dic["bWorkingMode"].ToString();
                                gcReportFullString += string.Format("[bWorkingMode:{0}]", all.gcParamConfig.bWorkingMode);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[bWorkingMode:]");
                            }

                            //(2)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bC"))
                            {
                                all.gcParamConfig.bC = imms.Body.n_dic[i].dic["bC"].ToString();
                                gcReportFullString += string.Format("[bC:{0}]", all.gcParamConfig.bC);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[bC:]");
                            }

                            //(3)
                            if (imms.Body.n_dic[i].dic.ContainsKey("wRedirectCellUarfcn"))
                            {
                                all.gcParamConfig.wRedirectCellUarfcn = imms.Body.n_dic[i].dic["wRedirectCellUarfcn"].ToString();
                                gcReportFullString += string.Format("[wRedirectCellUarfcn:{0}]", all.gcParamConfig.wRedirectCellUarfcn);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[wRedirectCellUarfcn:]");
                            }

                            //(4)
                            //if (imms.Body.n_dic[i].dic.ContainsKey("dwDateTime"))
                            //{
                            //    all.gcParamConfig.dwDateTime = imms.Body.n_dic[i].dic["dwDateTime"].ToString();
                            //    gcReportFullString += string.Format("[dwDateTime:{0}]", all.gcParamConfig.dwDateTime);
                            //}
                            //else
                            //{
                            //    gcReportFullString += string.Format("[dwDateTime:]");
                            //}

                            //(5)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bPLMNId"))
                            {
                                all.gcParamConfig.bPLMNId = imms.Body.n_dic[i].dic["bPLMNId"].ToString();
                                gcReportFullString += string.Format("[bPLMNId:{0}]", all.gcParamConfig.bPLMNId);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[bPLMNId:]");
                            }

                            //(6)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bTxPower"))
                            {
                                all.gcParamConfig.bTxPower = imms.Body.n_dic[i].dic["bTxPower"].ToString();
                                gcReportFullString += string.Format("[bTxPower:{0}]", all.gcParamConfig.bTxPower);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[bTxPower:]");
                            }

                            //(7)
                            if (imms.Body.n_dic[i].dic.ContainsKey("bRxGain"))
                            {
                                all.gcParamConfig.bRxGain = imms.Body.n_dic[i].dic["bRxGain"].ToString();
                                gcReportFullString += string.Format("[bRxGain:{0}]", all.gcParamConfig.bRxGain);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[bRxGain:]");
                            }

                            //(8)
                            if (imms.Body.n_dic[i].dic.ContainsKey("wPhyCellId"))
                            {
                                all.gcParamConfig.wPhyCellId = imms.Body.n_dic[i].dic["wPhyCellId"].ToString();
                                gcReportFullString += string.Format("[wPhyCellId:{0}]", all.gcParamConfig.wPhyCellId);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[wPhyCellId:]");
                            }

                            //(9)
                            if (imms.Body.n_dic[i].dic.ContainsKey("wLAC"))
                            {
                                all.gcParamConfig.wLAC = imms.Body.n_dic[i].dic["wLAC"].ToString();
                                gcReportFullString += string.Format("[wLAC:{0}]", all.gcParamConfig.wLAC);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[wLAC:]");
                            }

                            //(10)
                            if (imms.Body.n_dic[i].dic.ContainsKey("wUARFCN"))
                            {
                                all.gcParamConfig.wUARFCN = imms.Body.n_dic[i].dic["wUARFCN"].ToString();
                                gcReportFullString += string.Format("[wUARFCN:{0}]", all.gcParamConfig.wUARFCN);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[wUARFCN:]");
                            }

                            //(11)
                            if (imms.Body.n_dic[i].dic.ContainsKey("dwCellId"))
                            {
                                all.gcParamConfig.dwCellId = imms.Body.n_dic[i].dic["dwCellId"].ToString();
                                gcReportFullString += string.Format("[dwCellId:{0}]", all.gcParamConfig.dwCellId);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[dwCellId:]");
                            }

                            break;

                            #endregion
                        }
                    case "FAP_TRACE_MSG":
                        {
                            #region FAP_TRACE_MSG

                            //	"wTraceLen":XXX	      Trace长度
                            //   "cTrace":XXX          Trace内容

                            if (all.gcTraceReportFlag != true)
                            {
                                all.gcTraceReportFlag = true;
                                all.gcTraceReport = new strGcTraceReport();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("wTraceLen"))
                            {
                                all.gcTraceReport.wTraceLen = imms.Body.n_dic[i].dic["wTraceLen"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("cTrace"))
                            {
                                all.gcTraceReport.cTrace = imms.Body.n_dic[i].dic["cTrace"].ToString();
                            }

                            break;

                            #endregion
                        }
                    case "UE_ORM_REPORT_MSG":
                        {
                            #region UE_ORM_REPORT_MSG

                            //	"bOrmType":XXX	    	主叫类型。1=呼叫号码, 2=短消息PDU,3=寻呼测量
                            //	"bUeId":XXX	     	    IMSI
                            //	"cRSRP":XXX	    	    接收信号强度。寻呼测量时，-128表示寻呼失败
                            //	"bUeContentLen":XXX	    Ue主叫内容长度
                            //	"bUeContent":XXX	    Ue主叫内容。最大249字节。

                            if (all.gcTraceReportFlag != true)
                            {
                                all.gcTraceReportFlag = true;
                                all.gcTraceReport = new strGcTraceReport();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bOrmType"))
                            {
                                all.gcTraceReport.bOrmType = imms.Body.n_dic[i].dic["bOrmType"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bUeId"))
                            {
                                all.gcTraceReport.bUeId = imms.Body.n_dic[i].dic["bUeId"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("cRSRP"))
                            {
                                all.gcTraceReport.cRSRP = imms.Body.n_dic[i].dic["cRSRP"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bUeContentLen"))
                            {
                                all.gcTraceReport.bUeContentLen = imms.Body.n_dic[i].dic["bUeContentLen"].ToString();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bUeContent"))
                            {
                                all.gcTraceReport.bUeContent = imms.Body.n_dic[i].dic["bUeContent"].ToString();
                            }

                            break;

                            #endregion
                        }
                    case "CONFIG_SMS_CONTENT_MSG":
                        {
                            #region CONFIG_SMS_CONTENT_MSG

                            //	"bSMSOriginalNumLen":XXX	    主叫号码长度
                            //	"bSMSOriginalNum":XXX	    	主叫号码
                            //	"bSMSContentLen":XXX	    	短信内容字数
                            //	"bSMSContent":XXX	            短信内容.unicode编码，每个字符占2字节

                            if (all.gcMiscFlag != true)
                            {
                                all.gcMiscFlag = true;
                                all.gcMisc = new strGcMisc();
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bSMSOriginalNumLen"))
                            {
                                all.gcMisc.bSMSOriginalNumLen = imms.Body.n_dic[i].dic["bSMSOriginalNumLen"].ToString();
                                gcReportFullString += string.Format("[bSMSOriginalNumLen:{0}]", all.gcMisc.bSMSOriginalNumLen);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[bSMSOriginalNumLen:]");
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bSMSOriginalNum"))
                            {
                                all.gcMisc.bSMSOriginalNum = imms.Body.n_dic[i].dic["bSMSOriginalNum"].ToString();
                                gcReportFullString += string.Format("[bSMSOriginalNum:{0}]", all.gcMisc.bSMSOriginalNum);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[bSMSOriginalNum:]");
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bSMSContentLen"))
                            {
                                all.gcMisc.bSMSContentLen = imms.Body.n_dic[i].dic["bSMSContentLen"].ToString();
                                gcReportFullString += string.Format("[bSMSContentLen:{0}]", all.gcMisc.bSMSContentLen);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[bSMSContentLen:]");
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bSMSContent"))
                            {
                                all.gcMisc.bSMSContent = imms.Body.n_dic[i].dic["bSMSContent"].ToString();
                                gcReportFullString += string.Format("[bSMSContent:{0}]", all.gcMisc.bSMSContent);
                            }
                            else
                            {
                                gcReportFullString += string.Format("[bSMSContent:]");
                            }

                            break;

                            #endregion
                        }
                    case "CONFIG_CDMA_CARRIER_MSG":
                        {
                            #region CONFIG_CDMA_CARRIER_MSG                            

                            //	"wARFCN1":XXX	        工作频点1	
                            //	"bARFCN1Mode":XXX	    工作频点1模式。0表示扫描，1表示常开,2表示关闭。
                            //	"wARFCN1Duration":XXX	工作频点1扫描时长
                            //	"wARFCN1Period":XXX	    工作频点1扫描间隔

                            //	"wARFCN2":XXX	        工作频点2
                            //	"bARFCN2Mode":XXX	    工作频点2模式。 0表示扫描，1表示常开,2表示关闭。
                            //	"wARFCN2Duration":XXX	工作频点2扫描时长
                            //	"wARFCN2Period":XXX	    工作频点2扫描间隔

                            //	"wARFCN3":XXX	        工作频点3	
                            //	"bARFCN3Mode":XXX	    工作频点3模式。 0表示扫描，1表示常开,2表示关闭。
                            //	"wARFCN3Duration":XXX	工作频点3扫描时长	
                            //	"wARFCN3Period":XXX	    工作频点3扫描间隔

                            //	"wARFCN4":XXX	        工作频点4	
                            //	"bARFCN4Mode":XXX	    工作频点4模式。	0表示扫描，1表示常开,2表示关闭。
                            //	"wARFCN4Duration":XXX	工作频点4扫描时长
                            //	"wARFCN4Period":XXX	    工作频点4扫描间隔

                            all.gcCarrierMsgFlag = true;

                            if (dm == devMode.MODE_CDMA)
                            {
                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN1"))
                                {
                                    all.gcCarrierMsg.wARFCN1 = imms.Body.n_dic[i].dic["wARFCN1"].ToString();
                                    gcReportFullString += string.Format("[wARFCN1:{0}]", all.gcCarrierMsg.wARFCN1);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN1:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN1Mode"))
                                {
                                    all.gcCarrierMsg.bARFCN1Mode = imms.Body.n_dic[i].dic["bARFCN1Mode"].ToString();
                                    gcReportFullString += string.Format("[bARFCN1Mode:{0}]", all.gcCarrierMsg.bARFCN1Mode);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[bARFCN1Mode:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN1Duration"))
                                {
                                    all.gcCarrierMsg.wARFCN1Duration = imms.Body.n_dic[i].dic["wARFCN1Duration"].ToString();
                                    gcReportFullString += string.Format("[wARFCN1Duration:{0}]", all.gcCarrierMsg.wARFCN1Duration);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN1Duration:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN1Period"))
                                {
                                    all.gcCarrierMsg.wARFCN1Period = imms.Body.n_dic[i].dic["wARFCN1Period"].ToString();
                                    gcReportFullString += string.Format("[wARFCN1Period:{0}]", all.gcCarrierMsg.wARFCN1Period);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN1Period:]");
                                }



                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN2"))
                                {
                                    all.gcCarrierMsg.wARFCN2 = imms.Body.n_dic[i].dic["wARFCN2"].ToString();
                                    gcReportFullString += string.Format("[wARFCN2:{0}]", all.gcCarrierMsg.wARFCN2);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN2:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN2Mode"))
                                {
                                    all.gcCarrierMsg.bARFCN2Mode = imms.Body.n_dic[i].dic["bARFCN2Mode"].ToString();
                                    gcReportFullString += string.Format("[bARFCN2Mode:{0}]", all.gcCarrierMsg.bARFCN2Mode);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[bARFCN2Mode:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN2Duration"))
                                {
                                    all.gcCarrierMsg.wARFCN2Duration = imms.Body.n_dic[i].dic["wARFCN2Duration"].ToString();
                                    gcReportFullString += string.Format("[wARFCN2Duration:{0}]", all.gcCarrierMsg.wARFCN2Duration);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN2Duration:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN2Period"))
                                {
                                    all.gcCarrierMsg.wARFCN2Period = imms.Body.n_dic[i].dic["wARFCN2Period"].ToString();
                                    gcReportFullString += string.Format("[wARFCN2Period:{0}]", all.gcCarrierMsg.wARFCN2Period);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN2Period:]");
                                }



                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN3"))
                                {
                                    all.gcCarrierMsg.wARFCN3 = imms.Body.n_dic[i].dic["wARFCN3"].ToString();
                                    gcReportFullString += string.Format("[wARFCN3:{0}]", all.gcCarrierMsg.wARFCN3);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN3:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN3Mode"))
                                {
                                    all.gcCarrierMsg.bARFCN3Mode = imms.Body.n_dic[i].dic["bARFCN3Mode"].ToString();
                                    gcReportFullString += string.Format("[bARFCN3Mode:{0}]", all.gcCarrierMsg.bARFCN3Mode);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[bARFCN3Mode:]");
                                }
                               
                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN3Duration"))
                                {
                                    all.gcCarrierMsg.wARFCN3Duration = imms.Body.n_dic[i].dic["wARFCN3Duration"].ToString();
                                    gcReportFullString += string.Format("[wARFCN3Duration:{0}]", all.gcCarrierMsg.wARFCN3Duration);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN3Duration:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN3Period"))
                                {
                                    all.gcCarrierMsg.wARFCN3Period = imms.Body.n_dic[i].dic["wARFCN3Period"].ToString();
                                    gcReportFullString += string.Format("[wARFCN3Period:{0}]", all.gcCarrierMsg.wARFCN3Period);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN3Period:]");
                                }


                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN4"))
                                {
                                    all.gcCarrierMsg.wARFCN4 = imms.Body.n_dic[i].dic["wARFCN4"].ToString();
                                    gcReportFullString += string.Format("[wARFCN4:{0}]", all.gcCarrierMsg.wARFCN4);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN4:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN4Mode"))
                                {
                                    all.gcCarrierMsg.bARFCN4Mode = imms.Body.n_dic[i].dic["bARFCN4Mode"].ToString();
                                    gcReportFullString += string.Format("[bARFCN4Mode:{0}]", all.gcCarrierMsg.bARFCN4Mode);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[bARFCN4Mode:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN4Duration"))
                                {
                                    all.gcCarrierMsg.wARFCN4Duration = imms.Body.n_dic[i].dic["wARFCN4Duration"].ToString();
                                    gcReportFullString += string.Format("[wARFCN4Duration:{0}]", all.gcCarrierMsg.wARFCN4Duration);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN4Duration:]");
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN4Period"))
                                {
                                    all.gcCarrierMsg.wARFCN4Period = imms.Body.n_dic[i].dic["wARFCN4Period"].ToString();
                                    gcReportFullString += string.Format("[wARFCN4Period:{0}]", all.gcCarrierMsg.wARFCN4Period);
                                }
                                else
                                {
                                    gcReportFullString += string.Format("[wARFCN4Period:]");
                                }
                            }
                            else
                            {
                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN1"))
                                {
                                    all.gcCarrierMsg.wARFCN1 = imms.Body.n_dic[i].dic["wARFCN1"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN1Mode"))
                                {
                                    all.gcCarrierMsg.bARFCN1Mode = imms.Body.n_dic[i].dic["bARFCN1Mode"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN1Duration"))
                                {
                                    all.gcCarrierMsg.wARFCN1Duration = imms.Body.n_dic[i].dic["wARFCN1Duration"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN1Period"))
                                {
                                    all.gcCarrierMsg.wARFCN1Period = imms.Body.n_dic[i].dic["wARFCN1Period"].ToString();
                                }



                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN2"))
                                {
                                    all.gcCarrierMsg.wARFCN2 = imms.Body.n_dic[i].dic["wARFCN2"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN2Mode"))
                                {
                                    all.gcCarrierMsg.bARFCN2Mode = imms.Body.n_dic[i].dic["bARFCN2Mode"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN2Duration"))
                                {
                                    all.gcCarrierMsg.wARFCN2Duration = imms.Body.n_dic[i].dic["wARFCN2Duration"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN2Period"))
                                {
                                    all.gcCarrierMsg.wARFCN2Period = imms.Body.n_dic[i].dic["wARFCN2Period"].ToString();
                                }



                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN3"))
                                {
                                    all.gcCarrierMsg.wARFCN3 = imms.Body.n_dic[i].dic["wARFCN3"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN3Mode"))
                                {
                                    all.gcCarrierMsg.bARFCN3Mode = imms.Body.n_dic[i].dic["bARFCN3Mode"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN3Duration"))
                                {
                                    all.gcCarrierMsg.wARFCN3Duration = imms.Body.n_dic[i].dic["wARFCN3Duration"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN3Period"))
                                {
                                    all.gcCarrierMsg.wARFCN3Period = imms.Body.n_dic[i].dic["wARFCN3Period"].ToString();
                                }


                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN4"))
                                {
                                    all.gcCarrierMsg.wARFCN4 = imms.Body.n_dic[i].dic["wARFCN4"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("bARFCN4Mode"))
                                {
                                    all.gcCarrierMsg.bARFCN4Mode = imms.Body.n_dic[i].dic["bARFCN4Mode"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN4Duration"))
                                {
                                    all.gcCarrierMsg.wARFCN4Duration = imms.Body.n_dic[i].dic["wARFCN4Duration"].ToString();
                                }

                                if (imms.Body.n_dic[i].dic.ContainsKey("wARFCN4Period"))
                                {
                                    all.gcCarrierMsg.wARFCN4Period = imms.Body.n_dic[i].dic["wARFCN4Period"].ToString();
                                }
                            }

                            break;

                            #endregion
                        }
                    case "CONFIG_IMSI_MSG_V3_ID":
                        {
                            #region CONFIG_IMSI_MSG_V3_ID

                            //	"bIMSINum":n		    本条消息中的IMSI(n<=50)                           
                            //	"bActionType":XXX		动作类型。1 = Delete All IMSI；2 = Delete Special IMSI；3 = Add IMSI；4 = Query IMSI
                            //	"bIMSI_#n#":XXX	        IMSI数组。0~9	配置/删除/查询的IMSI
                            //	"bUeActionFlag_#n#":XXX 目标IMSI对应的动作。1 = Reject；5 = Hold ON	

                            int bIMSINum = -1;
                            string field = "";
                            string bActionType = "";

                            if (imms.Body.n_dic[i].dic.ContainsKey("bIMSINum"))
                            {
                                if (imms.Body.n_dic[i].dic["bIMSINum"].ToString() != "")
                                {
                                    bIMSINum = int.Parse(imms.Body.n_dic[i].dic["bIMSINum"].ToString());
                                    if (bIMSINum < 0 || bIMSINum > 50)
                                    {
                                        errInfo = string.Format("bIMSINum = {0},越界.", bIMSINum);
                                        return -1;
                                    }
                                }
                            }
                            else
                            {
                                errInfo = string.Format("不包含bIMSINum字段.");
                                return -1;
                            }

                            if (imms.Body.n_dic[i].dic.ContainsKey("bActionType"))
                            {
                                if (imms.Body.n_dic[i].dic["bActionType"].ToString() != "")
                                {
                                    bActionType = imms.Body.n_dic[i].dic["bActionType"].ToString();
                                    if (bActionType != "1" &&
                                        bActionType != "2" &&
                                        bActionType != "3" &&
                                        bActionType != "4")
                                    {
                                        errInfo = string.Format("bActionType = {0},非法.", bActionType);
                                        return -1;
                                    }
                                    else
                                    {
                                        // 2018-08-24
                                        all.actionType = bActionType;
                                    }
                                }
                            }
                            else
                            {
                                errInfo = string.Format("不包含bActionType字段.");
                                return -1;
                            }

                            all.gcImsiActionFlag = true;
                            all.listGcImsiAction = new List<strGcImsiAction>();

                            for (int j = 0; j < bIMSINum; j++)
                            {
                                strGcImsiAction str = new strGcImsiAction();

                                str.rbStart = "";
                                str.rbEnd = "";
                                str.time = DateTime.Now.ToString();
                                str.des = "";

                                str.bindingDevId = "-1";

                                field = string.Format("bIMSI_#{0}#", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    if (imms.Body.n_dic[i].dic[field].ToString() != "")
                                    {
                                        str.bIMSI = imms.Body.n_dic[i].dic[field].ToString();
                                    }
                                }

                                field = string.Format("bUeActionFlag_#{0}#", j);
                                if (imms.Body.n_dic[i].dic.ContainsKey(field))
                                {
                                    if (imms.Body.n_dic[i].dic[field].ToString() != "")
                                    {
                                        str.bUeActionFlag = imms.Body.n_dic[i].dic[field].ToString();
                                    }
                                }

                                all.listGcImsiAction.Add(str);
                            }


                            #endregion

                            break;
                        }
                    default:
                        {
                            errInfo = string.Format("get_gc_report_info包含非法的ndic name:{0}.", name);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.R);
                            return -1;
                        }
                }
            }

            return 0;
        }

        /// <summary>
        /// 通过字符串计算MD5
        /// </summary>
        /// <param name="sDataIn"></param>
        /// <returns></returns>
        private string GetMD5WithString(string sDataIn)
        {
            string str = "";
            byte[] data = Encoding.GetEncoding("utf-8").GetBytes(str);

            MD5 md5 = new MD5CryptoServiceProvider();

            byte[] bytes = md5.ComputeHash(data);

            for (int i = 0; i < bytes.Length; i++)
            {
                str += bytes[i].ToString("x2");
            }

            return str;
        }

        /// <summary>
        /// 通过文件计算MD5
        /// </summary>
        /// <param name="filePath"></param>
        /// <returns></returns>
        private string GetMD5WithFilePath(string filePath)
        {
            FileStream file = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read);
            MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();

            byte[] hash_byte = md5.ComputeHash(file);
            string str = System.BitConverter.ToString(hash_byte);
            str = str.Replace("-", "");
            file.Close();

            return str;
        }

        /// <summary>
        /// 获取MD5校验和
        /// </summary>
        /// <param name="listImsi"></param>
        /// <param name="fromType">
        /// 0 ： listImsi生成字符串,再生成MD5
        /// 1 ： listImsi生成文件,再生成MD5
        /// </param>
        /// <param name="md5"></param>
        /// <returns></returns>
        private int Get_Md5_Sum(List<string> listImsi, int fromType, ref string md5)
        {
            if (listImsi == null)
            {
                return -1;
            }

            if (fromType != 0 && fromType != 1)
            {
                return -1;
            }

            md5 = "";
            if (fromType == 0)
            {
                string tmp = listImsi.ToString();
                md5 = GetMD5WithString(tmp);
            }
            else
            {
                string fileFullPath = Application.StartupPath + @"\tmp\md5.txt";              
                if (File.Exists(fileFullPath))
                {
                    File.Delete(fileFullPath);
                }

                try
                {
                    byte[] data = null;
                    FileStream fs = new FileStream(fileFullPath, FileMode.Create);
             
                    foreach (string str in listImsi)
                    {                                           
                        data = System.Text.Encoding.Default.GetBytes(str + "\n");
                        fs.Write(data, 0, data.Length);
                    }

                    //清空缓冲区、关闭流
                    fs.Flush();
                    fs.Close();
                }
                catch (Exception e)
                {
                    add_log_info(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                    return -1;
                }

                md5 = GetMD5WithFilePath(fileFullPath);
                md5 = md5.ToLower();
            }

            return 0;
        }

        /// <summary>
        /// 通过文件获取黑白名单列表
        /// </summary>
        /// <param name="fileFullPath"></param>
        /// <param name="bwFlag"></param>
        /// <param name="bwList"></param>
        /// <param name="errInfo"></param>
        /// <returns></returns>
        private int Get_BwList_From_File(string fileFullPath, bwType bwFlag, ref List<strBwList> bwList, ref string errInfo)
        {
            if (string.IsNullOrEmpty(fileFullPath))
            {
                errInfo = string.Format("文件名为空.");
                return -1;
            }

            if (!File.Exists(fileFullPath))
            {
                errInfo = string.Format("文件:{0}不存在.",fileFullPath);
                return -1;
            }

            if (bwFlag != bwType.BWTYPE_BLACK && bwFlag != bwType.BWTYPE_WHITE)
            {
                errInfo = string.Format("黑白标识:{0}有误.", bwFlag);
                return -1;
            }


            bwList = new List<strBwList>();

            string[] lines = System.IO.File.ReadAllLines(@fileFullPath);
            foreach (string line in lines)
            {
                strBwList str = new strBwList();
                if (string.IsNullOrEmpty(line) )
                {
                    continue;
                }

                if (bwFlag == bwType.BWTYPE_BLACK)
                {                             
                    string[] s = line.Split(new char[] { ',' });
                    if (s.Length != 3)
                    {
                        continue;
                    }
                    else
                    {
                        try
                        {
                            Int16.Parse(s[1]);
                            Int16.Parse(s[2]);
                        }
                        catch (Exception ee)
                        {
                            add_log_info(LogInfoType.EROR, "RB Parse Error." + ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.R);
                            Logger.Trace(LogInfoType.EROR, "RB Parse Error." + ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.R);
                            continue;
                        }

                        str.bwFlag = bwType.BWTYPE_BLACK;
                        str.imsi = s[0];
                        str.rbStart = s[1];
                        str.rbEnd = s[2];
                    }
                }
                else
                {
                    str.bwFlag = bwType.BWTYPE_WHITE;
                    str.imsi = line.Trim();
                }

                bwList.Add(str);
            }

            errInfo = string.Format("成功");
            return 0;
        }

        /// <summary>
        /// 确认上下线的状态
        /// </summary>
        private void check_online_offline_delegate_fun()
        {
            try
            {
                int rtv = -1;

                Dictionary<string, strDevice> dicDeviceIdCheck = new Dictionary<string, strDevice>();
                Dictionary<string, string> dicDSN = new Dictionary<string, string>();

                rtv = gDbHelperLower.domain_dictionary_info_join_get(ref dicDeviceIdCheck,ref dicDSN);
                if ((int)RC.SUCCESS != rtv)
                {
                    string errInfo = string.Format("dicDeviceIdCheck -> ({0})获取FAILED！", gDbHelperLower.get_rtv_str(rtv));
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    return;
                }

                print_dic_dev_fullname_info("check_online_offline_delegate_fun", gDicDevFullName);

                string info = "";
                InterModuleMsgStruct imms = new InterModuleMsgStruct();

                foreach (KeyValuePair<string, strDevice> item in dicDeviceIdCheck)
                {
                    imms = new InterModuleMsgStruct();


                    if (string.IsNullOrEmpty(item.Value.ipAddr) || 
                        string.IsNullOrEmpty(item.Value.port) || 
                        string.IsNullOrEmpty(item.Value.innerType))
                    {
                        info = string.Format("check_online_offline_delegate_fun:ipAddr,port or innerType are NULL.");
                        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                        continue;
                    }

                    if (!string.IsNullOrEmpty(item.Value.sn))
                    {
                        imms.ApInfo.SN = item.Value.sn;
                    }

                    if (!string.IsNullOrEmpty(item.Key))
                    {
                        imms.ApInfo.Fullname = item.Key;
                    }

                    if (!string.IsNullOrEmpty(item.Value.ipAddr))
                    {
                        imms.ApInfo.IP = item.Value.ipAddr;
                    }

                    if (!string.IsNullOrEmpty(item.Value.port))
                    {
                        imms.ApInfo.Port = int.Parse(item.Value.port);
                    }

                    if (!string.IsNullOrEmpty(item.Value.innerType))
                    {
                        imms.ApInfo.Type = item.Value.innerType;
                    }                   

                    imms.MsgType = MsgType.CONFIG.ToString();

                    info = string.Format("Send OnOffLineCheck -> [{0}]:[{1}]:[{2}][{3}]", imms.ApInfo.Fullname, imms.ApInfo.IP, imms.ApInfo.Port, item.Value.online);
                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                    imms.Body.type = Main2ApControllerMsgType.OnOffLineCheck;
                    imms.Body.dic = new Dictionary<string, object>();

                    if (item.Value.online == "1")
                    {
                        imms.Body.dic.Add("Status", "OnLine");
                    }
                    else
                    {
                        imms.Body.dic.Add("Status", "OffLine");
                    }

                    //发送给ApCtrl
                    Send_Msg_2_ApCtrl_Lower(imms);
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.INFO, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, ee.Message + ee.StackTrace, "Main", LogCategory.I);
            }

            return;
        }

        /// <summary>
        /// 确认上下线的状态
        /// </summary>
        //private void monitor_thread_status_delegate_fun(int type,string text)
        //{
        //    try
        //    {
        //        switch (type)
        //        {
        //            case 0:
        //                {
        //                    labelAp.Text = text;
        //                    labelAp1.Text = text;
        //                    break;
        //                }
        //            case 1:
        //                {
        //                    labelApp.Text = text;
        //                    labelApp1.Text = text;
        //                    break;
        //                }
        //            case 2:
        //                {
        //                    labelDb.Text = text;
        //                    labelDb1.Text = text;
        //                    break;
        //                }
        //            case 3:
        //                {
        //                    labelFtp.Text = text;
        //                    labelFtp1.Text = text;
        //                    break;
        //                }
        //        }
        //    }
        //    catch (Exception ee)
        //    {
        //        add_log_info(LogInfoType.INFO, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
        //        Logger.Trace(LogInfoType.INFO, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
        //    }

        //    return;
        //}

        /// <summary>
        /// 通过strApStatus中的状态转换成一个整形
        /// </summary>
        /// <param name="apSt"></param>
        /// <returns></returns>
        //private int get_status_value(strApStatus apSt, int wSelfStudy, ref string errInfo)
        //{
        //    //public string SCTP;          //SCTP连接状态 ：1,正常；0，不正常
        //    //public string S1;            //S1连接状态   ：1,正常；0，不正常
        //    //public string GPS;           //GPS连接状态  ：1,正常；0，不正常
        //    //public string CELL;          //CELL状态     :1,正常；0，不正常
        //    //public string SYNC;          //同步状态     ：1,正常；0，不正常
        //    //public string LICENSE;       //LICENSE状态 ：1,正常；0，不正常
        //    //public string RADIO;         //射频状态     ：1,正常；0，不正常

        //    int rtv = -1;

        //    // (1)
        //    if ((apSt.SCTP == null) || (apSt.SCTP != "0" && apSt.SCTP != "1"))
        //    {
        //        errInfo = string.Format("apSt.SCTP的值非法.");
        //        return -1;
        //    }

        //    // (2)
        //    if ((apSt.S1 == null) || (apSt.S1 != "0" && apSt.S1 != "1"))
        //    {
        //        errInfo = string.Format("apSt.S1的值非法.");
        //        return -1;
        //    }

        //    // (3)
        //    if ((apSt.GPS == null) || (apSt.GPS != "0" && apSt.GPS != "1"))
        //    {
        //        errInfo = string.Format("apSt.GPS的值非法.");
        //        return -1;
        //    }

        //    // (4)
        //    if ((apSt.CELL == null) || (apSt.CELL != "0" && apSt.CELL != "1"))
        //    {
        //        errInfo = string.Format("apSt.CELL的值非法.");
        //        return -1;
        //    }

        //    // (5)
        //    if ((apSt.SYNC == null) || (apSt.SYNC != "0" && apSt.SYNC != "1"))
        //    {
        //        errInfo = string.Format("apSt.SYNC的值非法.");
        //        return -1;
        //    }

        //    // (6)
        //    if ((apSt.LICENSE == null) || (apSt.LICENSE != "0" && apSt.LICENSE != "1"))
        //    {
        //        errInfo = string.Format("apSt.LICENSE的值非法.");
        //        return -1;
        //    }

        //    // (7)
        //    if ((apSt.RADIO == null) || (apSt.RADIO != "0" && apSt.RADIO != "1"))
        //    {
        //        errInfo = string.Format("apSt.RADIO的值非法.");
        //        return -1;
        //    }

        //    // (8)
        //    if (wSelfStudy != 0 && wSelfStudy != 1)
        //    {
        //        errInfo = string.Format("wSelfStudy的值非法.");
        //        return -1;
        //    }

        //    rtv = byte.Parse(apSt.SCTP) << 31 |
        //           byte.Parse(apSt.S1) << 30 |
        //           byte.Parse(apSt.GPS) << 29 |
        //           byte.Parse(apSt.CELL) << 28 |
        //           byte.Parse(apSt.SYNC) << 27 |
        //           byte.Parse(apSt.LICENSE) << 26 |
        //           byte.Parse(apSt.RADIO) << 25 |
        //           wSelfStudy << 24;

        //    return rtv;
        //}

        /// <summary>
        /// 用于接收ApController的消息线程
        /// </summary>
        /// <param name="obj"></param>
        private void thread_for_ap_controller(object obj)
        {
            bool noMsg = false;
            strMsgInfo msgInfo;

            DateTime startTime = System.DateTime.Now;
            DateTime endTime = System.DateTime.Now;
            TimeSpan ts = endTime.Subtract(startTime);

            //long monitorCnt = 0;
            DateTime startMonitor = System.DateTime.Now;
            DateTime endedMonitor = System.DateTime.Now;
            TimeSpan tsMonitor = endedMonitor.Subtract(startMonitor);

            /*
             * 用于修复mysql连接的空闲时间超过8小时后，MySQL自动断开该连接的问题
             * wait_timeout = 8*3600
             * 即每隔fix_for_wait_timeout的时间（秒数）就访问一下数据库
             */
            int fix_for_wait_timeout = 60; //10*60;
            int reConnCnt = 0;

            DateTime startTimeConn = System.DateTime.Now;
            DateTime endTimeConn = System.DateTime.Now;
            TimeSpan tsConn = endTimeConn.Subtract(startTimeConn);

            /*
             * 每隔10分钟确认一次
             */
            int check_onoffline_time = (10 * 60);
            bool check_onoffline_time_switch = true;

            while (true)
            {
                if (noMsg)
                {
                    Thread.Sleep(100);
                }
                else
                {
                    //Thread.Sleep(1);
                }               

                //try
                //{
                //    #region 显示运行状态

                //    endedMonitor = System.DateTime.Now;
                //    tsMonitor = endedMonitor.Subtract(startMonitor);

                //    if (tsMonitor.TotalSeconds >= 10)
                //    {
                //        monitorCnt++;
                //        string info = string.Format("A{0}", monitorCnt % 10);                        

                //        BeginInvoke(new monitor_thread_status_delegate(monitor_thread_status_delegate_fun), new object[] { 0, info });

                //        // 复位计时器
                //        startMonitor = System.DateTime.Now;
                //    }

                //    #endregion
                //}
                //catch (Exception ee)
                //{
                //    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                //    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                //    continue;
                //}

                try
                {
                    #region 防止自动断开该连接的问题

                    endTimeConn = System.DateTime.Now;
                    tsConn = endTimeConn.Subtract(startTimeConn);

                    if (tsConn.TotalSeconds >= fix_for_wait_timeout)
                    {
                        // 2018-08-09
                        re_connection_db(ref gDbHelperLower, "gDbHelperLower", ref reConnCnt);

                        Thread.Sleep(5);

                        if (gDbHelperLower.MyDbConnFlag)
                        {
                            List<string> listAllTbl = new List<string>();
                            listAllTbl = gDbHelperLower.Get_All_ColumnName("user");
                        }

                        //报到线程状态
                        write_monitor_status("ApCtrl_Status");

                        startTimeConn = System.DateTime.Now;
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    startTimeConn = System.DateTime.Now;
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }

                try
                {
                    #region 确认上下线状态一致

                    if (check_onoffline_time_switch)
                    {
                        endTime = System.DateTime.Now;
                        ts = endTime.Subtract(startTime);

                        if (ts.TotalSeconds >= check_onoffline_time)
                        {
                            string info = string.Format("对所有AP发送OnOffLineCheck进行上下线状态是否一致的确认!");
                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                            BeginInvoke(new check_online_offline_delegate(check_online_offline_delegate_fun), new object[] { });

                            // 复位计时器
                            startTime = System.DateTime.Now;
                        }
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }

                try
                {
                    #region 取出消息

                    lock (mutex_Ap_Controller)
                    {
                        if (gMsgFor_Ap_Controller.Count <= 0)
                        {
                            noMsg = true;
                            continue;
                        }

                        //string tmp = string.Format("【线程中处理设备的消息:{0}】\n", gMsgFor_Ap_Controller.Count);
                        //Logger.Trace(LogInfoType.EROR, tmp, "Main", LogCategory.I);

                        //循环处理从APController接收到的消息
                        msgInfo = gMsgFor_Ap_Controller.Dequeue();

                        //string tmp = string.Format("【ApCtrl剩余消息数量:{0}】\n", gMsgFor_Ap_Controller.Count);
                        //Logger.Trace(LogInfoType.EROR, tmp, "Main", LogCategory.I);
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }

                try
                {
                    #region 处理消息

                    noMsg = false;
                    switch (msgInfo.mt)
                    {
                        case MessageType.MSG_JSON:
                            {
                                if (ProcessMsg_WithThreadPool)
                                {
                                    Logger.Trace(LogInfoType.DEBG, "1:RecvFromLower，MSG_JSON:" + msgInfo.mb.bJson, "Main", LogCategory.R);
                                    BeginInvoke(new process_ap_controller_msg_delegate(process_ap_controller_msg), new object[] { msgInfo.mb.bJson });
                                    Logger.Trace(LogInfoType.DEBG, "2:RecvFromLower，MSG_JSON:" + msgInfo.mb.bJson, "Main", LogCategory.I);                                    
                                }
                                else
                                {
                                    process_ap_controller_msg(msgInfo.mb.bJson);
                                }                               

                                break;           
                            }
                        case MessageType.MSG_STRING:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from ap controller，MSG_STRING", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.DEBG, "recv from ap controller，MSG_STRING", "Main", LogCategory.I);
                                break;
                            }
                        case MessageType.MSG_INT:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from ap controller，MSG_INT", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.DEBG, "recv from ap controller，MSG_INT", "Main", LogCategory.I);

                                break;
                            }
                        case MessageType.MSG_DOUBLE:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from ap controller，MSG_DOUBLE", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.DEBG, "recv from ap controller，MSG_DOUBLE", "Main", LogCategory.I);

                                break;
                            }
                        case MessageType.MSG_DATATABLE:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from ap controller，MSG_DATATABLE", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.DEBG, "recv from ap controller，MSG_DATATABLE", "Main", LogCategory.I);

                                break;
                            }
                        case MessageType.MSG_XML:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from ap controller，MSG_XML", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.DEBG, "recv from ap controller，MSG_XML", "Main", LogCategory.I);

                                //发送消息给ApController
                                //Delegate_sendMsg_2_ApCtrl_Lower(msgInfo.mt, msgInfo.mb);
                                break;
                            }
                        case MessageType.MSG_STATUS:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from ap controller，MSG_STATUS", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.DEBG, "recv from ap controller，MSG_STATUS", "Main", LogCategory.I);


                                break;
                            }
                        default:
                            {
                                add_log_info(LogInfoType.WARN, "recv from ap controller，MSG_ERROR", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, "recv from ap controller，MSG_ERROR", "Main", LogCategory.I);
                                break;
                            }
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }
            }
        }

        private void Init_ApGenPara(ref strApGenPara agp)
        {
            agp.mode = "";              //制式：GSM,TD-SCDMA,WCDMA,LTE-TDD,LTE-FDD
            agp.primaryplmn = "";       //主plmn
            agp.earfcndl = "";          //工作上行频点
            agp.earfcnul = "";          //工作下行频点
            agp.cellid = "";            //cellid, 2018-06-26
            agp.pci = "";               //工作pci
            agp.bandwidth = "";         //工作带宽
            agp.tac = "";               //TAC
            agp.txpower = "";           //功率衰减
            agp.periodtac = "";         //TAC变化周期
            agp.manualfreq = "";        //选频方式 0：自动选频 1：手动选频
            agp.bootMode = "";          //设备启动方式 0：半自动 1：全自动
            agp.Earfcnlist = "";        //频点列表，如：38950,39150
            agp.Bandoffset = "";        //频偏":"39,70000;38,10000
            agp.NTP = "";               //NTP服务器ip
            agp.ntppri = "";            //Ntp的优先级
            agp.source = "";            //同步源（0：GPS ； 1：CNM ； 2：no sync）
            agp.ManualEnable = "";      //是否设定手动同步源
            agp.ManualEarfcn = "";      //手动设置同步频点
            agp.ManualPci = "";         //手动设置同步pci
            agp.ManualBw = "";          //手动设置同步带宽
            agp.gps_select = "";        //GPS配置，0表示NOGPS，1表示GPS

            agp.otherplmn = "";         //多PLMN选项，多个之间用逗号隔开
            agp.periodFreq = "";        //{周期:freq1,freq2,freq3}

            return;
        }

        /// <summary>
        /// 打印设备和全名的相关信息,2018-11-09
        /// </summary>
        /// <param name="title"></param>
        /// <param name="dic"></param>
        public void print_dic_dev_fullname_info(string title, Dictionary<string, strDevice> dic)
        {
            int inx = 1;
            string info = "";

            if (dic == null || dic.Count == 0)
            {
                info = string.Format("{0},gDicDevFullName为空.\r\n", title);

                add_log_info(LogInfoType.WARN, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.WARN, info, "Main", LogCategory.I);
                return;
            }

            info = string.Format("{0},gDicDevFullName.cout = {1}.\r\n", title, dic.Count);
            foreach (KeyValuePair<string, strDevice> kv in dic)
            {
                strDevice dev = kv.Value;
                info += string.Format("inx:{0,-6}", inx++);
                info += string.Format("FN:{0,-40}", kv.Key);

                info += string.Format("id:{0,-4}", dev.id);
                info += string.Format("mode:{0,-16}", dev.devMode);
                info += string.Format("name:{0,-10}", dev.name);
                info += string.Format("SN:{0,-20}", dev.station_and_name);
                info += string.Format("affDomainId:{0,-6}\r\n", dev.affDomainId);
            }

            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

            return;
        }

        /// <summary>
        /// 处理收到从ApController收到的消息
        /// </summary>
        /// <param name="strBody">消息体</param>
        /// <returns></returns>
        private int process_ap_controller_msg(string strBody)
        {
            int rv = 0;
            if (string.IsNullOrEmpty(strBody))
            {
                add_log_info(LogInfoType.EROR, "strBody is Error.\n", "Main", LogCategory.R);
                Logger.Trace(LogInfoType.EROR, "strBody is Error.\n", "Main", LogCategory.R);
                return -1;
            }

            try
            {
                gApLower = JsonConvert.DeserializeObject<InterModuleMsgStruct>(strBody);

                switch (gApLower.Body.type)
                {
                    case Main2ApControllerMsgType.OnOffLine:
                        {
                            #region 获取信息

                            //    "Status":OnLine：上线；OffLine:下线
                            //    "mode":"xxx"     //GSM,TD-SCDMA,WCDMA,LTE-TDD,LTE-FDD,2018-06-28
                            //    "version":"xxx"  //ap的版本信息,2018-08-17
                            //    "timestamp"   时间戳

                            int rtv = 0;
                            string mode = "";
                            string Status = "";
                            string version = "";

                            strDevice devInfo = new strDevice();

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {
                                //用于处理未指派设备的心跳消息
                                process_device_unknown(gApLower);
                                break;
                            }
                            else
                            {
                                if (!gDicDevFullName.ContainsKey(gApLower.ApInfo.Fullname))
                                {
                                    //用于处理未指派设备的心跳消息
                                    process_device_unknown(gApLower);
                                    break;
                                }
                            }

                            if (!gDicDevFullName.ContainsKey(gApLower.ApInfo.Fullname))
                            {
                                string errInfo = string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", gApLower.ApInfo.Fullname);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, -1, errInfo, true, null, null);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[gApLower.ApInfo.Fullname];
                            }


                            if (gApLower.Body.dic.ContainsKey("Status"))
                            {
                                Status = gApLower.Body.dic["Status"].ToString();
                                if (Status != "OnLine" && Status != "OffLine")
                                {
                                    string errInfo = string.Format("Status = {0},非法!", Status);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, -1, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;                                   
                                }
                            }
                            else
                            {
                                string errInfo = string.Format("{0}:不存在Key：Status", gApLower.ApInfo.Fullname);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, -1, errInfo, true, null, null);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;                              
                            }

                            if (gApLower.Body.dic.ContainsKey("version"))
                            {
                                version = gApLower.Body.dic["version"].ToString();                              
                            }

                            if (DataController.SimuTest == 0)
                            {
                                // 非模拟器测试
                                if (gApLower.Body.dic.ContainsKey("mode"))
                                {
                                    mode = gApLower.Body.dic["mode"].ToString();
                                    devMode dm = gDbHelperLower.get_device_mode(mode);

                                    if (dm == devMode.MODE_UNKNOWN)
                                    {
                                        string errInfo = string.Format("mode = {0},非法！", mode);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, -1, errInfo, true, null, null);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;                                       
                                    }
                                }
                                else
                                {
                                    string errInfo = string.Format("不存在Key：mode");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, -1, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;                                   
                                }
                            }
                            else
                            {
                                // 模拟器测试
                                Logger.Trace(LogInfoType.WARN, "进入模拟器测试模式", "Main", LogCategory.R);
                                add_log_info(LogInfoType.WARN, "进入模拟器测试模式", "Main", LogCategory.R);
                                
                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, 0, "成功(模拟器)", true, null, null);
                                gApLower.Body.dic.Add("Status", Status);
                                Send_Msg_2_ApCtrl_Lower(gApLower);                                                       
                                break;
                            }

                            #endregion

                            #region 更新数据库

                            //更新数据库中的信息                           
                            if (Status == "OnLine")
                            {
                                devInfo.online = "1";
                            }
                            else
                            {
                                devInfo.online = "0";
                            }

                            devInfo.sn = gApLower.ApInfo.SN;
                            devInfo.ipAddr = gApLower.ApInfo.IP;
                            devInfo.port = gApLower.ApInfo.Port.ToString();
                            devInfo.innerType = gApLower.ApInfo.Type;

                            // 2018-06-22
                            devInfo.lastOnline = DateTime.Now.ToString();

                            // 2018-06-28
                            devInfo.mode = mode;

                            // 2018-08-17
                            devInfo.apVersion = version;

                            rtv = gDbHelperLower.device_record_update(devInfo.id, devInfo);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("devInfo.id = {0},device_record_update出错：{1}", devInfo.id, gDbHelperLower.get_rtv_str(rtv));
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);                                

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, rtv, errInfo, true, null, null);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;                               
                            }
                            else
                            {
                                string onOffLineAfter = "";
                                rtv = gDbHelperLower.device_record_onoffline_get_by_devid(devInfo.id, ref onOffLineAfter);
                                if (rtv != 0)
                                {
                                    string errInfo = string.Format("回读上下线消息,device_record_entity_get_by_devid出错：{0}", gDbHelperLower.get_rtv_str(rtv));
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, rtv, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }

                                if (onOffLineAfter != devInfo.online)
                                {
                                    string errInfo = string.Format("回读上下线消息出错,devInfo.online = {0},onOffLineAfter = {1}",devInfo.online,onOffLineAfter);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, -1, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;                                    
                                }
                                else
                                {
                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.OnOffLine_Ack, rtv, "成功回读上下线", true, null, null);
                                    gApLower.Body.dic.Add("Status", Status);                                                                  
                                }
                            }

                            #region 更新一下内存中的设备信息

                            gDicDevFullName[gApLower.ApInfo.Fullname] = devInfo;

                            #endregion

                            Send_Msg_2_ApCtrl_Lower(gApLower);
                            Send_Msg_2_AppCtrl_Upper(gApLower);

                            break;

                            #endregion
                        }
                    case Main2ApControllerMsgType.ApStatusChange:
                        {
                            #region 获取信息

                            int rtv = 0;
                            string Fullname = "";
                            string wSelfStudy = "0";
                            string carry = "-1";
                            string detail = "";

                            strDevice devInfo = new strDevice();                            

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {
                                //返回出错处理
                                string errInfo = string.Format("{0}:Fullname is NULL.", Main2ApControllerMsgType.ApStatusChange);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;                                
                            }
                            else
                            {
                                Fullname = gApLower.ApInfo.Fullname;
                            }

                            if (gApLower.Body.dic.ContainsKey("detail"))
                            {
                                detail = gApLower.Body.dic["detail"].ToString();

                                try
                                {
                                    UInt32 detailValue = Convert.ToUInt32(detail, 16);
                                }
                                catch (Exception ee)
                                {
                                    string errInfo = string.Format("{0}:detail值非法:{1}", Main2ApControllerMsgType.ApStatusChange,ee.Message + ee.StackTrace + ee.StackTrace);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }                               
                            }
                            else
                            {
                                string errInfo = string.Format("{0}:没包含detail的值!", Main2ApControllerMsgType.ApStatusChange);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }

                            if (gApLower.Body.dic.ContainsKey("carry"))
                            {
                                carry = gApLower.Body.dic["carry"].ToString();
                                if (carry != "0" && carry != "1")
                                {
                                    string errInfo = string.Format("{0}:载波值非法!", Main2ApControllerMsgType.ApStatusChange);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }
                            }

                            if (!gDicDevFullName.ContainsKey(Fullname))
                            {                                
                                string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", Fullname);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[Fullname];                               
                            }


                            // 2018-09-25
                            if (devInfo.devMode == devMode.MODE_CDMA)
                            {
                                carry = "-1";
                            }

                            #endregion

                            #region 更新数据库

                            switch (devInfo.devMode)
                            {
                                case devMode.MODE_WCDMA:
                                case devMode.MODE_LTE_TDD:
                                case devMode.MODE_LTE_FDD:
                                    {
                                        #region 获取消息

                                        int mergeField = -1;
                                        strApStatus apSts = new strApStatus();
                                        if (gApLower.Body.dic.ContainsKey("SCTP"))
                                        {
                                            apSts.SCTP = gApLower.Body.dic["SCTP"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("S1"))
                                        {
                                            apSts.S1 = gApLower.Body.dic["S1"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("GPS"))
                                        {
                                            apSts.GPS = gApLower.Body.dic["GPS"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("CELL"))
                                        {
                                            apSts.CELL = gApLower.Body.dic["CELL"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("SYNC"))
                                        {
                                            apSts.SYNC = gApLower.Body.dic["SYNC"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("LICENSE"))
                                        {
                                            apSts.LICENSE = gApLower.Body.dic["LICENSE"].ToString();
                                            if (apSts.LICENSE != "0" && apSts.LICENSE != "1")
                                            {
                                                string errInfo = string.Format("LICENSE非法 = {0}，默认为0",apSts.LICENSE);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                apSts.LICENSE = "0";
                                            }
                                        }
                                        else
                                        {
                                            string errInfo = string.Format("不包含LICENSE字段，默认为0");
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            apSts.LICENSE = "0";
                                        }

                                        // 2018-11-05
                                        if (gApLower.Body.dic.ContainsKey("ALIGN"))
                                        {
                                            apSts.ALIGN = gApLower.Body.dic["ALIGN"].ToString();
                                            if (apSts.ALIGN != "0" && apSts.ALIGN != "1")
                                            {
                                                string errInfo = string.Format("ALIGN非法 = {0}，默认为0", apSts.ALIGN);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                apSts.ALIGN = "0";
                                            }
                                        }
                                        else
                                        {
                                            string errInfo = string.Format("不包含ALIGN字段，默认为0");
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            apSts.ALIGN = "0";
                                        }

                                        mergeField = int.Parse(apSts.ALIGN) << 1 | int.Parse(apSts.LICENSE);
                                        apSts.LICENSE = mergeField.ToString();

                                        if (gApLower.Body.dic.ContainsKey("RADIO"))
                                        {
                                            apSts.RADIO = gApLower.Body.dic["RADIO"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("ApReadySt"))
                                        {
                                            apSts.ApReadySt = gApLower.Body.dic["ApReadySt"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("timestamp"))
                                        {
                                            try
                                            {
                                                DateTime.Parse(gApLower.Body.dic["timestamp"].ToString());
                                                apSts.time = gApLower.Body.dic["timestamp"].ToString();
                                            }
                                            catch (Exception ee)
                                            {
                                                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.R);
                                                apSts.time = DateTime.Now.ToString();
                                            }
                                        }

                                        #endregion

                                        #region 白名单自学习处理

                                        if (gApLower.Body.dic.ContainsKey("wSelfStudy"))
                                        {
                                            wSelfStudy = gApLower.Body.dic["wSelfStudy"].ToString().Trim();
                                            if (!wSelfStudy.Equals(devInfo.wSelfStudy))
                                            {
                                                //【状态不一致才需要处理】

                                                if (wSelfStudy.Equals("1"))
                                                {
                                                    #region wSelfStudy : 0 -> 1

                                                    //(1) 记录状态变化
                                                    string errInfo = string.Format("白名单自学习:wSelfStudy : 0 -> 1");
                                                    add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.I);

                                                    //(2) 删除该AP的所有白名单
                                                    if (devInfo.clearWhiteList.Equals("1"))
                                                    {
                                                        rtv = gDbHelperLower.bwlist_record_bwflag_delete(bwType.BWTYPE_WHITE, devInfo.id);
                                                        if ((int)RC.SUCCESS != rtv)
                                                        {
                                                            errInfo = string.Format("白名单自学习:bwlist_record_bwflag_delete出错,{0}", gDbHelperLower.get_rtv_str(rtv));
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            errInfo = string.Format("白名单自学习:删除设备{0}的白名单成功.", Fullname);
                                                            add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        errInfo = string.Format("白名单自学习:不删除库中的白名单{0}.", devInfo.clearWhiteList);
                                                        add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                                        Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                                    }

                                                    //(3) 保存wSelfStudy的状态
                                                    devInfo.wSelfStudy = wSelfStudy;
                                                    gDicDevFullName[Fullname] = devInfo;

                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region wSelfStudy : 1 -> 0

                                                    //(1) 记录状态变化
                                                    string errInfo = string.Format("白名单自学习:wSelfStudy : 1 -> 0");
                                                    add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.I);

                                                    //(2) 保存wSelfStudy的状态
                                                    devInfo.wSelfStudy = wSelfStudy;
                                                    gDicDevFullName[Fullname] = devInfo;

                                                    #endregion
                                                }
                                            }
                                        }

                                        #endregion

                                        #region 更新数据库

                                        // 先转发给AppCtrl
                                        // 2018-08-27
                                        // gApLower.Body.type = Main2ApControllerMsgType.ApStatusChange_Ack;
                                        Send_Msg_2_AppCtrl_Upper(gApLower);

                                        rtv = gDbHelperLower.ap_status_record_update(devInfo.id, apSts);
                                        if (rtv != 0)
                                        {
                                            string errInfo = string.Format("ap_status_record_update出错:{0}", gDbHelperLower.get_rtv_str(rtv));
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                            break;
                                        }
                                        else
                                        {
                                            strApStatus apStsAfter = new strApStatus();
                                            rtv = gDbHelperLower.ap_status_record_get_by_devid(devInfo.id, ref apStsAfter);
                                            if (rtv != 0)
                                            {
                                                string errInfo = string.Format("ap_status_record_get_by_devid出错:{0}", gDbHelperLower.get_rtv_str(rtv));
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }
                                            else
                                            {
                                                #region 重新读数据库

                                                if (apSts.SCTP == apStsAfter.SCTP &&
                                                   apSts.S1 == apStsAfter.S1 &&
                                                   apSts.GPS == apStsAfter.GPS &&
                                                   apSts.CELL == apStsAfter.CELL &&
                                                   apSts.SYNC == apStsAfter.SYNC &&
                                                   apSts.LICENSE == apStsAfter.LICENSE &&
                                                   apSts.RADIO == apStsAfter.RADIO &&
                                                   apSts.ApReadySt == apStsAfter.ApReadySt)
                                                {
                                                    string INFO = string.Format("回读ApStatusChange_Ack成功");
                                                    add_log_info(LogInfoType.INFO, INFO, "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.INFO, INFO, "Main", LogCategory.I);

                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, 0, INFO, true, null, null);
                                                    gApLower.Body.dic.Add("detail", detail);
                                                    gApLower.Body.dic.Add("ApReadySt", apSts.ApReadySt);                                                 
                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                    break;
                                                }
                                                else
                                                {
                                                    string INFO = string.Format("回读ApStatusChange_Ack失败");
                                                    add_log_info(LogInfoType.INFO, INFO, "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.INFO, INFO, "Main", LogCategory.I);

                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, INFO, true, null, null);
                                                    gApLower.Body.dic.Add("detail", detail);
                                                    gApLower.Body.dic.Add("ApReadySt", apSts.ApReadySt);
                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                    break;
                                                }

                                                #endregion
                                            }
                                        }
                                      
                                        #endregion                                
                                    }
                                case devMode.MODE_GSM_V2:
                                case devMode.MODE_CDMA:
                                    {
                                        #region 获取消息

                                        int mergeField = -1;
                                        strGcMisc gm = new strGcMisc();
                                        if (gApLower.Body.dic.ContainsKey("SCTP"))
                                        {
                                            gm.SCTP = gApLower.Body.dic["SCTP"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("S1"))
                                        {
                                            gm.S1 = gApLower.Body.dic["S1"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("GPS"))
                                        {
                                            gm.GPS = gApLower.Body.dic["GPS"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("CELL"))
                                        {
                                            gm.CELL = gApLower.Body.dic["CELL"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("SYNC"))
                                        {
                                            gm.SYNC = gApLower.Body.dic["SYNC"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("LICENSE"))
                                        {
                                            gm.LICENSE = gApLower.Body.dic["LICENSE"].ToString();
                                            if (gm.LICENSE != "0" && gm.LICENSE != "1")
                                            {
                                                string errInfo = string.Format("LICENSE非法 = {0}，默认为0", gm.LICENSE);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                gm.LICENSE = "0";
                                            }
                                        }
                                        else
                                        {
                                            string errInfo = string.Format("不包含LICENSE字段，默认为0");
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            gm.LICENSE = "0";
                                        }

                                        // 2018-11-05
                                        if (gApLower.Body.dic.ContainsKey("ALIGN"))
                                        {
                                            gm.ALIGN = gApLower.Body.dic["ALIGN"].ToString();
                                            if (gm.ALIGN != "0" && gm.ALIGN != "1")
                                            {
                                                string errInfo = string.Format("ALIGN非法 = {0}，默认为0", gm.ALIGN);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                gm.ALIGN = "0";
                                            }
                                        }
                                        else
                                        {
                                            string errInfo = string.Format("不包含ALIGN字段，默认为0");
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            gm.ALIGN = "0";
                                        }

                                        mergeField = int.Parse(gm.ALIGN) << 1 | int.Parse(gm.LICENSE);
                                        gm.LICENSE = mergeField.ToString();

                                        if (gApLower.Body.dic.ContainsKey("RADIO"))
                                        {
                                            gm.RADIO = gApLower.Body.dic["RADIO"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("ApReadySt"))
                                        {
                                            gm.ApReadySt = gApLower.Body.dic["ApReadySt"].ToString();
                                        }

                                        if (gApLower.Body.dic.ContainsKey("timestamp"))
                                        {
                                            try
                                            {
                                                DateTime.Parse(gApLower.Body.dic["timestamp"].ToString());
                                                gm.time = gApLower.Body.dic["timestamp"].ToString();
                                            }
                                            catch (Exception ee)
                                            {
                                                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.R);
                                                gm.time = DateTime.Now.ToString();
                                            }
                                        }

                                        #endregion                                        

                                        #region 更新数据库

                                        // 先转发给AppCtrl
                                        // 2018-08-27
                                        // gApLower.Body.type = Main2ApControllerMsgType.ApStatusChange_Ack;
                                        Send_Msg_2_AppCtrl_Upper(gApLower);

                                        rtv = gDbHelperLower.gc_misc_record_update(int.Parse(carry),devInfo.id,gm);
                                        if (rtv != 0)
                                        {
                                            string errInfo = string.Format("gc_misc_record_update出错:{0}", gDbHelperLower.get_rtv_str(rtv));
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                            break;
                                        }
                                        else
                                        {
                                            strGcMisc gmAfter = new strGcMisc();
                                            rtv = gDbHelperLower.gc_misc_record_get_by_devid(int.Parse(carry), devInfo.id, ref gmAfter);
                                            if (rtv != 0)
                                            {
                                                string errInfo = string.Format("gc_misc_record_get_by_devid出错:{0}", gDbHelperLower.get_rtv_str(rtv));
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }
                                            else
                                            {
                                                #region 重新读数据库

                                                if (gm.SCTP == gmAfter.SCTP &&
                                                   gm.S1 == gmAfter.S1 &&
                                                   gm.GPS == gmAfter.GPS &&
                                                   gm.CELL == gmAfter.CELL &&
                                                   gm.SYNC == gmAfter.SYNC &&
                                                   gm.LICENSE == gmAfter.LICENSE &&
                                                   gm.RADIO == gmAfter.RADIO &&
                                                   gm.ApReadySt == gmAfter.ApReadySt)
                                                {
                                                    string INFO = string.Format("回读ApStatusChange_Ack成功");
                                                    add_log_info(LogInfoType.INFO, INFO, "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.INFO, INFO, "Main", LogCategory.I);

                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, 0, INFO, true, null, null);
                                                    gApLower.Body.dic.Add("detail", detail);
                                                    gApLower.Body.dic.Add("ApReadySt", gm.ApReadySt);

                                                    if (devInfo.devMode == devMode.MODE_CDMA)
                                                    {
                                                        carry = "0";
                                                    }

                                                    // 2018-08-16
                                                    gApLower.Body.dic.Add("carry", carry.ToString());

                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                    break;
                                                }
                                                else
                                                {
                                                    string INFO = string.Format("回读ApStatusChange_Ack失败");
                                                    add_log_info(LogInfoType.INFO, INFO, "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.INFO, INFO, "Main", LogCategory.I);

                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, INFO, true, null, null);
                                                    gApLower.Body.dic.Add("detail", detail);
                                                    gApLower.Body.dic.Add("ApReadySt", gm.ApReadySt);

                                                    if (devInfo.devMode == devMode.MODE_CDMA)
                                                    {
                                                        carry = "0";
                                                    }

                                                    // 2018-08-16
                                                    gApLower.Body.dic.Add("carry", carry.ToString());
                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                    break;
                                                }

                                                #endregion
                                            }
                                        }                                       

                                        #endregion                                                                  
                                    }
                                case devMode.MODE_GSM:
                                    {
                                        #region 获取消息

                                        string ApReadySt = "";
                                        if (gApLower.Body.dic.ContainsKey("ApReadySt"))
                                        {
                                            ApReadySt = gApLower.Body.dic["ApReadySt"].ToString();
                                        }

                                        #endregion

                                        #region 更新数据库

                                        string INFO = string.Format("回读ApStatusChange_Ack成功(GSM暂时都返回OK)");
                                        add_log_info(LogInfoType.INFO, INFO, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, INFO, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, 0, INFO, true, null, null);
                                        gApLower.Body.dic.Add("detail", detail);
                                        gApLower.Body.dic.Add("ApReadySt", ApReadySt);

                                        // 2018-08-16
                                        gApLower.Body.dic.Add("carry", carry.ToString());
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;


                                        #endregion
                                    }
                                default:
                                    {
                                        #region 出错处理

                                        //返回出错处理
                                        string errInfo = string.Format("ApStatusChange,devMode = {0},该设备没有详细参数.", devInfo.devMode.ToString());
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ApStatusChange_Ack, -1, errInfo, true, null, null);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);                                       
                                        break;

                                        #endregion
                                    }
                            }

                            break;

                            #endregion
                        }
                    case ApMsgType.scanner:
                        {
                            #region 合法性检查

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {
                                string errInfo = string.Format("{0}:Fullname is null.", ApMsgType.scanner);
                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                break;
                            }

                            if (!gDicDevFullName.ContainsKey(gApLower.ApInfo.Fullname))
                            {
                                string errInfo = string.Format("{0}:gDicDevFullName中没有设备{1}", ApMsgType.scanner, gApLower.ApInfo.Fullname);
                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                break;
                            }

                            if (gDicDevFullName[gApLower.ApInfo.Fullname].online == "0")
                            {
                                string errInfo = string.Format("{0}:设备{1}为下线.", ApMsgType.scanner, gApLower.ApInfo.Fullname);
                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                break;
                            }

                            #endregion

                            #region LTE捕号记录处理

                            lte_capture_info_process(ref gApLower);

                            #endregion

                            #region 转发给AppCtrl_Upper

                            //在此将数据送给AppCtrl_Upper
                            Send_Msg_2_AppCtrl_Upper(gApLower);
                            break;

                            #endregion
                        }
                    case AppMsgType.gsm_msg_recv:
                        {
                            #region 合法性检查

                            string carry = "";

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {
                                string errInfo = string.Format("{0}:Fullname is null.", ApMsgType.scanner);
                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                break;
                            }

                            if (!gDicDevFullName.ContainsKey(gApLower.ApInfo.Fullname))
                            {
                                string errInfo = string.Format("{0}:gDicDevFullName中没有设备{1}", ApMsgType.scanner, gApLower.ApInfo.Fullname);
                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                break;
                            }

                            if (gDicDevFullName[gApLower.ApInfo.Fullname].online == "0")
                            {
                                string errInfo = string.Format("{0}:设备{1}为下线.", ApMsgType.scanner, gApLower.ApInfo.Fullname);
                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                break;
                            }

                            #endregion

                            #region IMSI,截获号码，短信等处理

                            devMode dm = gDbHelperLower.get_device_mode(gApLower.ApInfo.Type);
                            if (dm == devMode.MODE_UNKNOWN)
                            {
                                string errInfo = string.Format("ApLower.ApInfo.Type = {0},错误的类型.", gApLower.ApInfo.Type);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            }

                            switch (dm)
                            {
                                case devMode.MODE_GSM:
                                    {
                                        #region GSM HJT

                                        if ((gApLower.Body.n_dic != null) && (gApLower.Body.n_dic.Count > 0))
                                        {
                                            for (int i = 0; i < gApLower.Body.n_dic.Count; i++)
                                            {
                                                if (gApLower.Body.n_dic[i].name == "SEND_UE_INFO")
                                                {
                                                    // HJT抓到的IMSI
                                                    gsm_capture_info_process(ref gApLower, i);
                                                }
                                                else if (gApLower.Body.n_dic[i].name == "SEND_MS_CALL_SETUP")
                                                {
                                                    // HJT手机主动发起呼叫(截获号码)
                                                    ms_call_process(ref gApLower, i);
                                                }
                                                else if (gApLower.Body.n_dic[i].name == "SEND_MS_SMS_SEND")
                                                {
                                                    // HJT手机主动发起短信(截获短信)
                                                    ms_sms_process(ref gApLower, i);
                                                }
                                                else
                                                {
                                                    //
                                                }                                                                                                    
                                            }
                                        }

                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_GSM_V2:
                                case devMode.MODE_CDMA:
                                    {
                                        #region GSM-V2/CDMA                                       

                                        if (dm == devMode.MODE_CDMA)
                                        {
                                            carry = "-1";
                                        }
                                        else
                                        {
                                            if (gApLower.Body.dic.ContainsKey("sys"))
                                            {
                                                carry = gApLower.Body.dic["sys"].ToString();
                                                if (carry != "0" && carry != "1")
                                                {
                                                    add_log_info(LogInfoType.EROR, "sys字段出错", "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.EROR, "sys字段出错", "Main", LogCategory.I);
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                add_log_info(LogInfoType.EROR, "ap.Body.dic不包含sys字段", "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, "ap.Body.dic不包含sys字段", "Main", LogCategory.I);
                                                break;
                                            }
                                        }
                                        
                                        if ((gApLower.Body.n_dic != null) && (gApLower.Body.n_dic.Count > 0))
                                        {
                                            for (int i = 0; i < gApLower.Body.n_dic.Count; i++)
                                            {
                                                if (gApLower.Body.n_dic[i].name == "UE_STATUS_REPORT_MSG")
                                                {
                                                    // ZYF
                                                    gc_capture_info_process(gApLower, i);
                                                    break;
                                                }                                                
                                                else if (gApLower.Body.n_dic[i].name == "UE_ORM_REPORT_MSG")
                                                {
                                                    ms_call_sms_process(ref gApLower, i, int.Parse(carry));
                                                }
                                                else
                                                {
                                                    //
                                                }
                                            }
                                        }

                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_TD_SCDMA:
                                    {
                                        break;
                                    }
                                case devMode.MODE_WCDMA:
                                case devMode.MODE_LTE_FDD:
                                case devMode.MODE_LTE_TDD:
                                    {                                                                               
                                        break;                   
                                    }
                                case devMode.MODE_UNKNOWN:
                                    {
                                        break;
                                    }
                            }

                            #endregion

                            #region 转发给AppCtrl_Upper

                            //在此将数据送给AppCtrl_Upper
                            Send_Msg_2_AppCtrl_Upper(gApLower);

                            break;

                            #endregion
                        }
                    case Main2ApControllerMsgType.ReportGenPara:
                        {
                            #region 获取信息

                            int rtv = 0;
                            int sys = 0;
                            string info = "";
                            string Fullname = "";
                            string FullnameAlign = "";

                            devMode dm;

                            //默认为设置
                            string reportType = "change";

                            string whiteimsi_md5 = "";
                            string blackimsi_md5 = "";

                            string whiteimsi_md5_db = "";
                            string blackimsi_md5_db = "";

                            //共24项
                            string genParaFullString = "";
                            string genParaFullString_db = "";

                            //共20项
                            string gsmParaFullString = "";
                            string gsmParaFullString_db = "";

                            //共31项(CDMA),共15项(GSM-V2)
                            string gcParaFullString = "";
                            string gcParaFullString_db = "";

                            bool whiteimsi_md5_match = false;
                            bool blackimsi_md5_match = false;

                            bool gen_para_match = false;
                            bool gsm_para_match = false;
                            bool gc_para_match = false;

                            strDevice devInfo = new strDevice();
                            strDataAlign daInfo = new strDataAlign();

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {
                                //返回出错处理
                                string errInfo = string.Format("{0}:Fullname is NULL.", Main2ApControllerMsgType.ReportGenPara);

                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }
                            else
                            {
                                Fullname = gApLower.ApInfo.Fullname;
                                if (!gDicDevFullName.ContainsKey(Fullname))
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", Fullname);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.R);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.R);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }
                                else
                                {
                                    devInfo = gDicDevFullName[Fullname];                                                               
                                }
                            }                                                   

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Type))
                            {
                                //返回出错处理
                                string errInfo = string.Format("{0}:ApInfo.Type is NULL.", Main2ApControllerMsgType.ReportGenPara);

                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }
                            else
                            {
                                dm = gDbHelperLower.get_device_mode(gApLower.ApInfo.Type);
                                if (dm == devMode.MODE_UNKNOWN)
                                {
                                    string errInfo = string.Format("ap.ApInfo.Type = {0},错误的类型.", gApLower.ApInfo.Type);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }                                                     
                            }

                            if (gApLower.Body.dic.ContainsKey("reportType"))
                            {
                                if (!string.IsNullOrEmpty(gApLower.Body.dic["reportType"].ToString()))
                                {
                                    reportType = gApLower.Body.dic["reportType"].ToString();
                                    if ("change" != reportType && "report" != reportType)
                                    {
                                        //返回出错处理
                                        string errInfo = string.Format("reportType = {0}出错", reportType);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }
                                }
                                else
                                {
                                    //默认处理
                                    string errInfo = string.Format("{0}:reportType字段为空,默认为change", Main2ApControllerMsgType.ReportGenPara);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    reportType = "change";
                                }
                            }
                            else
                            {
                                //默认处理
                                string errInfo = string.Format("{0}:没包含reportType字段,默认为change", Main2ApControllerMsgType.ReportGenPara);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                reportType = "change";
                            }                                                            

                            #endregion                  

                            #region 设置或对齐处理

                            if (reportType == "change")
                            {
                                #region 设置处理            

                                switch (dm)
                                {
                                    case devMode.MODE_GSM:
                                        {
                                            #region GSM_HJT处理

                                            str_Gsm_All_Para gsmAllPara = new str_Gsm_All_Para();

                                            if (get_gsm_info(gApLower, ref gsmAllPara) != 0)
                                            {
                                                string errInfo = string.Format("获取GSM相关的参数出错.");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            rtv = 0;
                                            int carry = gsmAllPara.sys;

                                            if (gsmAllPara.gsmSysParaFlag == true)
                                            {
                                                rtv += gDbHelperLower.gsm_sys_para_record_update(carry, devInfo.id, gsmAllPara.gsmSysPara);
                                            }

                                            if (gsmAllPara.gsmSysOptionFlag == true)
                                            {
                                                rtv += gDbHelperLower.gsm_sys_option_record_update(carry, devInfo.id, gsmAllPara.gsmSysOption);
                                            }

                                            if (gsmAllPara.gsmRfParaFlag == true)
                                            {
                                                rtv += gDbHelperLower.gsm_rf_para_record_update(carry, devInfo.id, gsmAllPara.gsmRfPara);
                                            }

                                            if (gsmAllPara.gsmMsgOptionFlag == true)
                                            {
                                                rtv += gDbHelperLower.gsm_msg_option_insert(carry, devInfo.id, gsmAllPara.gsmMsgOption);
                                            }

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, rtv, gDbHelperLower.get_rtv_str(rtv), true, null, null);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                            break;

                                            #endregion                                     
                                        }
                                    case devMode.MODE_GSM_V2:
                                    case devMode.MODE_CDMA:
                                        {
                                            #region GSM-V2处理

                                            string gcErrInfo = "";
                                            str_GC_All_Para gcAllPara = new str_GC_All_Para();

                                            if (get_gc_info(gApLower, ref gcAllPara, ref gcErrInfo) != 0)
                                            {
                                                string errInfo = string.Format("获取GSM-V2/CDMA相关的参数出错:{0}.", gcErrInfo);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            rtv = 0;
                                            int carry = gcAllPara.sys;

                                            if (dm == devMode.MODE_CDMA)
                                            {
                                                carry = -1;
                                            }

                                            if (gcAllPara.gcNbCellFlag)
                                            {
                                                rtv += gDbHelperLower.gc_nb_cell_record_delete(carry, devInfo.id);
                                                rtv += gDbHelperLower.gc_nb_cell_record_insert_batch(carry, devInfo.id, gcAllPara.listGcNbCell);
                                            }

                                            if (gcAllPara.gcParamConfigFlag)
                                            {
                                                rtv += gDbHelperLower.gc_param_config_record_update(carry, devInfo.id, gcAllPara.gcParamConfig);
                                            }

                                            if (gcAllPara.gcMiscFlag)
                                            {
                                                rtv += gDbHelperLower.gc_misc_record_update(carry, devInfo.id, gcAllPara.gcMisc);
                                            }

                                            // 2018-10-26
                                            if (gcAllPara.gcTraceReportFlag)
                                            {
                                                rtv += gDbHelperLower.gc_trace_report_record_insert(carry, devInfo.id, gcAllPara.gcTraceReport);
                                            }

                                            if (gcAllPara.gcCarrierMsgFlag)
                                            {
                                                rtv += gDbHelperLower.gc_carrier_msg_record_update(carry, devInfo.id, gcAllPara.gcCarrierMsg);
                                            }

                                            int failCnt = 0;
                                            int successCnt = 0;
                                            string rtvInfo = "";

                                            if (gcAllPara.gcImsiActionFlag)
                                            {
                                                /*
                                                 * 1 = Delete All IMSI；
                                                 * 2 = Delete Special IMSI；
                                                 * 3 = Add IMSI；
                                                 * 4 = Query IMSI
                                                 * 
                                                 * CDMA/GSM-V2的黑白名单都保存在表gc_imsi_action中，而
                                                 * WCDMA/LTE-FDD/LTE-TDD/GSM-HJT的黑白名单都保存在表bwlist中
                                                 * 2018-11-06
                                                 * 
                                                 * CDMA/GSM-V2黑白名单统一保存在bwlist中
                                                 * 2018-11-27
                                                 */
                                                if (gcAllPara.actionType == "1")
                                                {
                                                    //rtv += gDbHelperLower.gc_imsi_action_record_delete(carry, devInfo.id);
                                                    rtv += gDbHelperLower.bwlist_record_delete(devInfo.id);                                                    
                                                    rtvInfo = string.Format("1 = Delete All IMSI:{0}", gDbHelperLower.get_rtv_str(rtv));
                                                }
                                                else if (gcAllPara.actionType == "2")
                                                {
                                                    failCnt = 0;
                                                    successCnt = 0;                                                    
                                                    for (int i = 0; i < gcAllPara.listGcImsiAction.Count; i++)
                                                    {
                                                        //rtv += gDbHelperLower.gc_imsi_action_record_delete(carry, devInfo.id, gcAllPara.listGcImsiAction[i].bIMSI);
                                                        rtv += gDbHelperLower.bwlist_record_imsi_delete(gcAllPara.listGcImsiAction[i].bIMSI, devInfo.id);
                                                        
                                                        if (rtv == 0)
                                                        {
                                                            successCnt++;
                                                        }
                                                        else
                                                        {
                                                            failCnt++;
                                                        }
                                                    }

                                                    rtvInfo = string.Format("2 = Delete Special IMSI:successCnt={0},failCnt={1}", successCnt, failCnt);
                                                }
                                                else if (gcAllPara.actionType == "3")
                                                {
                                                    failCnt = 0;
                                                    successCnt = 0;
                                                    for (int i = 0; i < gcAllPara.listGcImsiAction.Count; i++)
                                                    {
                                                        #region 转化数据结构strBwList

                                                        strBwList str = new strBwList();
                                                        str.imsi = gcAllPara.listGcImsiAction[i].bIMSI;
                                                        str.imei = "";

                                                        if (gcAllPara.listGcImsiAction[i].bUeActionFlag == "1")
                                                        {
                                                            str.bwFlag = bwType.BWTYPE_WHITE;
                                                        }
                                                        else if (gcAllPara.listGcImsiAction[i].bUeActionFlag == "5")
                                                        {
                                                            str.bwFlag = bwType.BWTYPE_BLACK;
                                                        }
                                                        else
                                                        {
                                                            string errInfo = string.Format("获取GSM-V2/CDMA,bUeActionFlag参数出错:{0}.", gcAllPara.listGcImsiAction[i].bUeActionFlag);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                        }

                                                        str.rbStart = gcAllPara.listGcImsiAction[i].rbStart;
                                                        str.rbEnd = gcAllPara.listGcImsiAction[i].rbEnd;
                                                        str.des = gcAllPara.listGcImsiAction[i].des;
                                                        str.time = gcAllPara.listGcImsiAction[i].time;

                                                        str.linkFlag = "0";
                                                        str.affDeviceId = devInfo.id.ToString();
                                                        str.affDomainId = "";

                                                        #endregion

                                                        //rtv += gDbHelperLower.gc_imsi_action_record_insert(carry, devInfo.id, gcAllPara.listGcImsiAction[i]);
                                                        rtv += gDbHelperLower.bwlist_record_insert(str,devInfo.id);

                                                        if (rtv == 0)
                                                        {
                                                            successCnt++;
                                                        }
                                                        else
                                                        {
                                                            failCnt++;
                                                        }
                                                    }

                                                    rtvInfo = string.Format("3 = Add IMSI:successCnt={0},failCnt={1}", successCnt, failCnt);
                                                }
                                                else
                                                {
                                                    // Query IMSI
                                                    string errInfo = string.Format("获取GSM-V2/CDMA相关的参数出错:actionType={0},不支持.", gcAllPara.actionType);
                                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                    break;
                                                }
                                            }                                            

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, rtv, gDbHelperLower.get_rtv_str(rtv), true, null, null);
                                            gApLower.Body.dic.Add("rtvInfo", rtvInfo);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                            break;

                                            #endregion                                                                           
                                        }                                     
                                    case devMode.MODE_WCDMA:
                                    case devMode.MODE_LTE_TDD:
                                    case devMode.MODE_LTE_FDD:
                                        {
                                            #region LTE处理

                                            strApGenPara apGP = new strApGenPara();
                                            if (gApLower.Body.dic.ContainsKey("mode"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["mode"].ToString()))
                                                {
                                                    apGP.mode = gApLower.Body.dic["mode"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("primaryplmn"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["primaryplmn"].ToString()))
                                                {
                                                    apGP.primaryplmn = gApLower.Body.dic["primaryplmn"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("earfcndl"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["earfcndl"].ToString()))
                                                {
                                                    apGP.earfcndl = gApLower.Body.dic["earfcndl"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("earfcnul"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["earfcnul"].ToString()))
                                                {
                                                    apGP.earfcnul = gApLower.Body.dic["earfcnul"].ToString();
                                                }
                                            }


                                            if (gApLower.Body.dic.ContainsKey("cellid"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["cellid"].ToString()))
                                                {
                                                    apGP.cellid = gApLower.Body.dic["cellid"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("pci"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["pci"].ToString()))
                                                {
                                                    apGP.pci = gApLower.Body.dic["pci"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("bandwidth"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["bandwidth"].ToString()))
                                                {
                                                    apGP.bandwidth = gApLower.Body.dic["bandwidth"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("tac"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["tac"].ToString()))
                                                {
                                                    apGP.tac = gApLower.Body.dic["tac"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("txpower"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["txpower"].ToString()))
                                                {
                                                    apGP.txpower = gApLower.Body.dic["txpower"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("periodtac"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["periodtac"].ToString()))
                                                {
                                                    apGP.periodtac = gApLower.Body.dic["periodtac"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("manualfreq"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["manualfreq"].ToString()))
                                                {
                                                    apGP.manualfreq = gApLower.Body.dic["manualfreq"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("bootMode"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["bootMode"].ToString()))
                                                {
                                                    apGP.bootMode = gApLower.Body.dic["bootMode"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("Earfcnlist"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["Earfcnlist"].ToString()))
                                                {
                                                    apGP.Earfcnlist = gApLower.Body.dic["Earfcnlist"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("Bandoffset"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["Bandoffset"].ToString()))
                                                {
                                                    apGP.Bandoffset = gApLower.Body.dic["Bandoffset"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("NTP"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["NTP"].ToString()))
                                                {
                                                    apGP.NTP = gApLower.Body.dic["NTP"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("ntppri"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ntppri"].ToString()))
                                                {
                                                    apGP.ntppri = gApLower.Body.dic["ntppri"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("source"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["source"].ToString()))
                                                {
                                                    apGP.source = gApLower.Body.dic["source"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("ManualEnable"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ManualEnable"].ToString()))
                                                {
                                                    apGP.ManualEnable = gApLower.Body.dic["ManualEnable"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("ManualEarfcn"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ManualEarfcn"].ToString()))
                                                {
                                                    apGP.ManualEarfcn = gApLower.Body.dic["ManualEarfcn"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("ManualPci"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ManualPci"].ToString()))
                                                {
                                                    apGP.ManualPci = gApLower.Body.dic["ManualPci"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("ManualBw"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ManualBw"].ToString()))
                                                {
                                                    apGP.ManualBw = gApLower.Body.dic["ManualBw"].ToString();
                                                }
                                            }

                                            if (gApLower.Body.dic.ContainsKey("gps_select"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["gps_select"].ToString()))
                                                {
                                                    apGP.gps_select = gApLower.Body.dic["gps_select"].ToString();
                                                }
                                            }

                                            // 2018-07-23
                                            if (gApLower.Body.dic.ContainsKey("otherplmn"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["otherplmn"].ToString()))
                                                {
                                                    apGP.otherplmn = gApLower.Body.dic["otherplmn"].ToString();
                                                }
                                            }

                                            // 2018-07-23
                                            if (gApLower.Body.dic.ContainsKey("periodFreq"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["periodFreq"].ToString()))
                                                {
                                                    apGP.periodFreq = gApLower.Body.dic["periodFreq"].ToString();
                                                }
                                            }

                                            // 2018-07-23
                                            if (gApLower.Body.dic.ContainsKey("res1"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["res1"].ToString()))
                                                {
                                                    apGP.res1 = gApLower.Body.dic["res1"].ToString();
                                                }
                                            }

                                            // 2018-07-23
                                            if (gApLower.Body.dic.ContainsKey("res2"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["res2"].ToString()))
                                                {
                                                    apGP.res2 = gApLower.Body.dic["res2"].ToString();
                                                }
                                            }

                                            // 2018-07-23
                                            if (gApLower.Body.dic.ContainsKey("res3"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["res3"].ToString()))
                                                {
                                                    apGP.res3 = gApLower.Body.dic["res3"].ToString();
                                                }
                                            }

                                            rtv = gDbHelperLower.ap_general_para_record_update(devInfo.id, apGP);

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, rtv, gDbHelperLower.get_rtv_str(rtv), true, null, null);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                            break;

                                            #endregion                                  
                                        }                                   
                                    default:
                                        {
                                            #region 出错处理

                                            //返回出错处理
                                            string errInfo = string.Format("不支持的apInnerType:{0}.", dm);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                            break;

                                            #endregion
                                        }
                                }

                                #endregion                               
                            }
                            else
                            {                               
                                #region 对齐处理

                                #region 黑白MD5信息获取

                                if (gApLower.Body.dic.ContainsKey("whiteimsi_md5"))
                                {
                                    if (!string.IsNullOrEmpty(gApLower.Body.dic["whiteimsi_md5"].ToString()))
                                    {
                                        whiteimsi_md5 = gApLower.Body.dic["whiteimsi_md5"].ToString();
                                    }
                                }
                                else
                                {
                                    //返回出错处理
                                    string errInfo = string.Format("{0}:没包含whiteimsi_md5字段.", Main2ApControllerMsgType.ReportGenPara);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }

                                if (gApLower.Body.dic.ContainsKey("blackimsi_md5"))
                                {
                                    if (!string.IsNullOrEmpty(gApLower.Body.dic["blackimsi_md5"].ToString()))
                                    {
                                        blackimsi_md5 = gApLower.Body.dic["blackimsi_md5"].ToString();
                                    }
                                }
                                else
                                {
                                    //返回出错处理
                                    string errInfo = string.Format("{0}:没包含blackimsi_md5字段.", Main2ApControllerMsgType.ReportGenPara);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }                               

                                strApGenPara apGP = new strApGenPara();
                                Init_ApGenPara(ref apGP);

                                List<string> listBlackImsi = new List<string>();
                                List<string> listWhiteImsi = new List<string>();

                                #endregion

                                switch (dm)
                                {
                                    case devMode.MODE_GSM:                            
                                        {
                                            #region GSM处理

                                            #region 获取GSM所有的上报信息以及串

                                            string errInfo = "";
                                            str_Gsm_All_Para gsmAllParaReport = new str_Gsm_All_Para();
                                            if (get_gsm_report_info(gApLower, ref gsmAllParaReport, ref gsmParaFullString, ref errInfo) != 0)
                                            {
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            int carry = gsmAllParaReport.sys;
                                            sys = carry;

                                            #endregion

                                            #region 预处理

                                            FullnameAlign = string.Format("{0}.{1}", Fullname, sys);
                                            if (gDicDataAlign.ContainsKey(FullnameAlign))
                                            {
                                                //取出对应的数据结构
                                                daInfo = gDicDataAlign[FullnameAlign];
                                            }
                                            else
                                            {
                                                //填充对应的数据结构
                                                daInfo.devId = devInfo.id;
                                                daInfo.sys = sys;
                                                daInfo.dm = dm;
                                                daInfo.fullName = Fullname;
                                                daInfo.fileNameBlackList_Ap_Base = string.Format("{0}_black_ap.txt", devInfo.sn);
                                                daInfo.fileNameWhiteList_Ap_Base = string.Format("{0}_white_ap.txt", devInfo.sn);

                                                daInfo.fileNameBlackList_Db_Base = string.Format("{0}_black_db.txt", devInfo.sn);
                                                daInfo.fileNameWhiteList_Db_Base = string.Format("{0}_white_db.txt", devInfo.sn);
                                            }

                                            //打印对齐信息
                                            if (DataController.DataAlignMode == 0)
                                            {
                                                info = string.Format("FullnameAlign = {0},以DB为基准 -> DataAlignMode = {1},reportType = {2}", FullnameAlign, DataController.DataAlignMode, reportType);
                                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            }
                                            else if (DataController.DataAlignMode == 1)
                                            {
                                                info = string.Format("FullnameAlign = {0},以AP为基准 -> DataAlignMode = {1},reportType = {2}", FullnameAlign, DataController.DataAlignMode, reportType);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            }
                                            else
                                            {
                                                info = string.Format("FullnameAlign = {0},默认以DB为基准 -> DataAlignMode = {1},reportType = {2}", FullnameAlign, DataController.DataAlignMode, reportType);
                                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                DataController.DataAlignMode = 0;
                                            }

                                            #endregion

                                            #region 计算DB中所有的参数串

                                            rtv = gDbHelperLower.gsm_all_record_get_by_devid(carry, devInfo.id, ref gsmParaFullString_db);
                                            if ((int)RC.SUCCESS != rtv)
                                            {
                                                errInfo = string.Format("gsm_all_record_get_by_devid出错.");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            if (gsmParaFullString.Equals(gsmParaFullString_db))
                                            {
                                                gsm_para_match = true;
                                            }

                                            info = "\r\n";
                                            info += string.Format("gc_para_match        = {0}\r\n", gsm_para_match);
                                            info += string.Format("gsmParaFullString    = {0}\r\n", gsmParaFullString);
                                            info += string.Format("gsmParaFullString_db = {0}\r\n", gsmParaFullString_db);

                                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                            #endregion

                                            #region 计算DB中黑白名单的MD5

                                            rtv = gDbHelperLower.bwlist_record_md5sum_get(bwType.BWTYPE_BLACK, devInfo.id, ref listBlackImsi);
                                            if ((int)RC.SUCCESS != rtv)
                                            {
                                                //返回出错处理
                                                errInfo = string.Format("bwlist_record_md5sum_get出错：{0}", gDbHelperLower.get_rtv_str(rtv));
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }
                                            else
                                            {
                                                if (listBlackImsi.Count > 0)
                                                {
                                                    listBlackImsi.Sort();
                                                }
                                            }

                                            rtv = gDbHelperLower.bwlist_record_md5sum_get(bwType.BWTYPE_WHITE, devInfo.id, ref listWhiteImsi);
                                            if ((int)RC.SUCCESS != rtv)
                                            {
                                                //返回出错处理
                                                errInfo = string.Format("bwlist_record_md5sum_get出错：{0}", gDbHelperLower.get_rtv_str(rtv));
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }
                                            else
                                            {
                                                if (listWhiteImsi.Count > 0)
                                                {
                                                    listWhiteImsi.Sort();
                                                }
                                            }

                                            if (0 != Get_Md5_Sum(listBlackImsi, 1, ref blackimsi_md5_db))
                                            {
                                                //返回出错处理
                                                errInfo = string.Format("Get_Md5_Sum出错");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            if (0 != Get_Md5_Sum(listWhiteImsi, 1, ref whiteimsi_md5_db))
                                            {
                                                //返回出错处理
                                                errInfo = string.Format("Get_Md5_Sum出错");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            if (sys == 1)
                                            {
                                                //载波1不需要对齐黑白名单
                                                whiteimsi_md5_match = true;
                                            }
                                            else
                                            {
                                                if (whiteimsi_md5.Equals(whiteimsi_md5_db))
                                                {
                                                    whiteimsi_md5_match = true;
                                                }
                                            }

                                            info = "\r\n";
                                            info += string.Format("whiteimsi_md5_match = {0}\r\n", whiteimsi_md5_match);
                                            info += string.Format("whiteimsi_md5       = {0}\r\n", whiteimsi_md5);
                                            info += string.Format("whiteimsi_md5_db    = {0}\r\n", whiteimsi_md5_db);

                                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                            if (sys == 1)
                                            {
                                                //载波1不需要对齐黑白名单
                                                blackimsi_md5_match = true;
                                            }
                                            else
                                            {
                                                if (blackimsi_md5.Equals(blackimsi_md5_db))
                                                {
                                                    blackimsi_md5_match = true;
                                                }
                                            }

                                            info = "\r\n";
                                            info += string.Format("blackimsi_md5_match = {0}\r\n", blackimsi_md5_match);
                                            info += string.Format("blackimsi_md5       = {0}\r\n", blackimsi_md5);
                                            info += string.Format("blackimsi_md5_db    = {0}\r\n", blackimsi_md5_db);

                                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                            daInfo.whiteimsi_md5_match = whiteimsi_md5_match;
                                            daInfo.blackimsi_md5_match = blackimsi_md5_match;

                                            //修改数据对齐的全局数据结构
                                            if (gDicDataAlign.ContainsKey(FullnameAlign))
                                            {
                                                gDicDataAlign[FullnameAlign] = daInfo;
                                            }
                                            else
                                            {
                                                gDicDataAlign.Add(FullnameAlign, daInfo);
                                            }

                                            #endregion

                                            #region 回复ReportGenParaAck

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck,0,"成功", true, null, null);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);

                                            #endregion

                                            #region 流程处理

                                            if (gsm_para_match && blackimsi_md5_match && whiteimsi_md5_match)
                                            {
                                                info = string.Format("成功,gsm,black and white don't need to be aligned");

                                                //数据已经对齐，无需处理
                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, 0, info, true, null, null);
                                                gApLower.Body.dic.Add("sys", sys);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                            }
                                            else
                                            {
                                                //数据不对齐
                                                if (DataController.DataAlignMode == 0)
                                                {
                                                    #region 以DB为准

                                                    #region 填充SetGenParaReq头

                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.SetGenParaReq, 0, "成功", true, null, null);

                                                    gApLower.Body.dic.Remove("ReturnCode");
                                                    gApLower.Body.dic.Remove("ReturnStr");
                                                    gApLower.Body.dic.Add("sys", sys);
                                                    gApLower.Body.dic.Add("ApIsBase", DataController.DataAlignMode.ToString());

                                                    #endregion

                                                    #region 服务器上传白名单到FTP

                                                    if (!whiteimsi_md5_match)
                                                    {                                                        
                                                        string fileName = daInfo.fileNameWhiteList_Db_Base;

                                                        try
                                                        {
                                                            byte[] data = null;
                                                            if (0 == generate_ftp_byte(ref data, listWhiteImsi))
                                                            {
                                                                rtv = gFtpHelperFile.Put(fileName, data);
                                                                if (rtv != 0)
                                                                {
                                                                    //返回出错处理
                                                                    errInfo = string.Format("Server上传对齐文件listWhiteImsi到FTP服务器出错.");
                                                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                                    gApLower.Body.dic.Add("sys", sys);
                                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        catch (Exception e)
                                                        {
                                                            //返回出错处理
                                                            errInfo = string.Format("Server上传对齐文件listWhiteImsi到FTP服务器出错." + e.Message + e.StackTrace);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);                                                        

                                                        gApLower.Body.dic.Add("FtpUrl_White", ftpUrl);
                                                        gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                        gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                        gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                        gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                        gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                    }

                                                    #endregion

                                                    #region 服务器上传黑名单到FTP

                                                    if (!blackimsi_md5_match)
                                                    {                                                        
                                                        string fileName = daInfo.fileNameBlackList_Db_Base;

                                                        try
                                                        {
                                                            byte[] data = null;
                                                            if (0 == generate_ftp_byte(ref data, listBlackImsi))
                                                            {
                                                                rtv = gFtpHelperFile.Put(fileName, data);
                                                                if (rtv != 0)
                                                                {
                                                                    //返回出错处理
                                                                    errInfo = string.Format("服务器上传对齐文件listBlackImsi到FTP服务器出错.");
                                                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                                    gApLower.Body.dic.Add("sys", sys);
                                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        catch (Exception e)
                                                        {
                                                            //返回出错处理
                                                            errInfo = string.Format("服务器上传对齐文件listBlackImsi到FTP服务器出错." + e.Message + e.StackTrace);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        if (!whiteimsi_md5_match)
                                                        {
                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);
                                                        }
                                                        else
                                                        {
                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);

                                                            gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                            gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                            gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                            gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                            gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                        }
                                                    }

                                                    #endregion

                                                    #region 将DB中GSM参数传给AP

                                                    if (!gsm_para_match)
                                                    {
                                                        str_Gsm_All_Para allInfo = new str_Gsm_All_Para();

                                                        //(1)
                                                        rtv = gDbHelperLower.gsm_sys_para_record_get_by_devid(carry, devInfo.id, ref allInfo.gsmSysPara);
                                                        if (rtv != 0)
                                                        {
                                                            errInfo = string.Format("gsm_sys_para_record_get_by_devid出错:") + gDbHelperLower.get_rtv_str(rtv) ;
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        //(2)
                                                        rtv = gDbHelperLower.gsm_sys_option_record_get_by_devid(carry, devInfo.id, ref allInfo.gsmSysOption);
                                                        if (rtv != 0)
                                                        {
                                                            errInfo = string.Format("gsm_sys_option_record_get_by_devid出错:") + gDbHelperLower.get_rtv_str(rtv);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        //(3)
                                                        rtv = gDbHelperLower.gsm_rf_para_record_get_by_devid(carry, devInfo.id, ref allInfo.gsmRfPara);
                                                        if (rtv != 0)
                                                        {
                                                            errInfo = string.Format("gsm_rf_para_record_get_by_devid出错:") + gDbHelperLower.get_rtv_str(rtv);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        //       "name":"RECV_SYS_PARA",     //4.1   系统参数
                                                        //      {
                                                        //					"paraMcc":移动国家码
                                                        //					"paraMnc":移动网号
                                                        //					"paraBsic":基站识别码
                                                        //					"paraLac":位置区号
                                                        //					"paraCellId":小区ID
                                                        //					"paraC2":C2偏移量
                                                        //					"paraPeri":周期性位置更新周期
                                                        //					"paraAccPwr":接入功率
                                                        //					"paraMsPwr":手机发射功率
                                                        //					"paraRejCau":位置更新拒绝原因
                                                        //       }
                                                        Name_DIC_Struct ndic = new Name_DIC_Struct();
                                                        ndic.name = "RECV_SYS_PARA";

                                                        ndic.dic.Add("paraMcc", allInfo.gsmSysPara.paraMcc);
                                                        ndic.dic.Add("paraMnc", allInfo.gsmSysPara.paraMnc);
                                                        ndic.dic.Add("paraBsic", allInfo.gsmSysPara.paraBsic);
                                                        ndic.dic.Add("paraLac", allInfo.gsmSysPara.paraLac);
                                                        ndic.dic.Add("paraCellId", allInfo.gsmSysPara.paraCellId);
                                                        ndic.dic.Add("paraC2", allInfo.gsmSysPara.paraC2);
                                                        ndic.dic.Add("paraPeri", allInfo.gsmSysPara.paraPeri);
                                                        ndic.dic.Add("paraAccPwr", allInfo.gsmSysPara.paraAccPwr);
                                                        ndic.dic.Add("paraMsPwr", allInfo.gsmSysPara.paraMsPwr);
                                                        ndic.dic.Add("paraRejCau", allInfo.gsmSysPara.paraRejCau);
                                                        gApLower.Body.n_dic.Add(ndic);

                                                        //       "name":"RECV_SYS_OPTION",       //4.2  系统选项
                                                        //      {
                                                        //					"opLuSms":登录时发送短信
                                                        //					"opLuImei":登录时获取IMEI
                                                        //					"opCallEn":允许用户主叫
                                                        //					"opDebug":调试模式，上报信令
                                                        //					"opLuType":登录类型
                                                        //					"opSmsType":短信类型
                                                        //       }
                                                        ndic = new Name_DIC_Struct();
                                                        ndic.name = "RECV_SYS_OPTION";

                                                        ndic.dic.Add("opLuSms", allInfo.gsmSysOption.opLuSms);
                                                        ndic.dic.Add("opLuImei", allInfo.gsmSysOption.opLuImei);
                                                        ndic.dic.Add("opCallEn", allInfo.gsmSysOption.opCallEn);
                                                        ndic.dic.Add("opDebug", allInfo.gsmSysOption.opDebug);
                                                        ndic.dic.Add("opLuType", allInfo.gsmSysOption.opLuType);
                                                        ndic.dic.Add("opSmsType", allInfo.gsmSysOption.opSmsType);
                                                        //ndic.dic.Add("opRegModel", allInfo.gsmSysOption.opRegModel);
                                                        gApLower.Body.n_dic.Add(ndic);


                                                        //       "name":"RECV_RF_PARA",      //4.4	射频参数
                                                        //      {
                                                        //					"rfEnable":射频使能
                                                        //					"rfFreq":信道号
                                                        //					"rfPwr":发射功率衰减值
                                                        //       }
                                                        ndic = new Name_DIC_Struct();
                                                        ndic.name = "RECV_RF_PARA";
                                                        ndic.dic.Add("rfEnable", allInfo.gsmRfPara.rfEnable);
                                                        ndic.dic.Add("rfFreq", allInfo.gsmRfPara.rfFreq);
                                                        ndic.dic.Add("rfPwr", allInfo.gsmRfPara.rfPwr);
                                                        gApLower.Body.n_dic.Add(ndic);

                                                        //       "name":"RECV_REG_MODE",            //4.33	注册工作模式
                                                        //       {
                                                        //          "regMode":模式0时由设备自行根据系统选项决定是否允许终端入网，是否对终端发送短信；
                                                        //                    模式1时设备将终端标识发送给上位机，由上位机告知设备下一步的动作
                                                        //       }
                                                        ndic = new Name_DIC_Struct();
                                                        ndic.name = "RECV_REG_MODE";

                                                        ndic.dic.Add("regMode", allInfo.gsmSysOption.opRegModel);
                                                        gApLower.Body.n_dic.Add(ndic);
                                                    }

                                                    #endregion

                                                    Send_Msg_2_ApCtrl_Lower(gApLower);

                                                    break;

                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region 以AP为准

                                                    #region 告诉AP发白名单FTP服务器上

                                                    if (!whiteimsi_md5_match)
                                                    {
                                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.SetGenParaReq, 0, "成功", true, null, null);
                                                        gApLower.Body.dic.Remove("ReturnCode");
                                                        gApLower.Body.dic.Remove("ReturnStr");
                                                        gApLower.Body.dic.Add("sys", sys);
                                                        gApLower.Body.dic.Add("ApIsBase", DataController.DataAlignMode.ToString());


                                                        string fileName = daInfo.fileNameWhiteList_Ap_Base;

                                                        string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                        gApLower.Body.dic.Add("FtpUrl_White", ftpUrl);
                                                        gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                        gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                        gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                        gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                        gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                    }

                                                    #endregion

                                                    #region 告诉AP发黑名单到FTP服务器上

                                                    if (!blackimsi_md5_match)
                                                    {
                                                        if (!whiteimsi_md5_match)
                                                        {
                                                            //只需加一项
                                                            string fileName = daInfo.fileNameBlackList_Ap_Base;

                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);
                                                        }
                                                        else
                                                        {
                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.SetGenParaReq, 0, "成功", true, null, null);
                                                            gApLower.Body.dic.Remove("ReturnCode");
                                                            gApLower.Body.dic.Remove("ReturnStr");
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            gApLower.Body.dic.Add("ApIsBase", DataController.DataAlignMode.ToString());

                                                            //告诉AP发文件到FTP服务器上
                                                            string fileName = daInfo.fileNameBlackList_Ap_Base;

                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);
                                                            gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                            gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                            gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                            gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                            gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                        }
                                                    }

                                                    #endregion

                                                    #region 发消息给ApCtrl

                                                    if (!whiteimsi_md5_match || !blackimsi_md5_match)
                                                    {
                                                        //发SetGenParaReq
                                                        //然后在SetGenParaRsp中回DataAlignOver
                                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                                    }

                                                    #endregion

                                                    #region 将GSM参数更新到DB

                                                    if (!gsm_para_match)
                                                    {
                                                        rtv = 0;
                                                        if (gsmAllParaReport.gsmSysParaFlag == true)
                                                        {
                                                            rtv += gDbHelperLower.gsm_sys_para_record_update(carry, devInfo.id, gsmAllParaReport.gsmSysPara);
                                                        }

                                                        if (gsmAllParaReport.gsmSysOptionFlag == true)
                                                        {
                                                            rtv += gDbHelperLower.gsm_sys_option_record_update(carry, devInfo.id, gsmAllParaReport.gsmSysOption);
                                                        }

                                                        //if (gsmAllParaReport.gsmRfParaFlag == true)
                                                        //{
                                                        //    rtv += gDbHelperLower.gsm_rf_para_record_update(carry, devInfo.id, gsmAllParaReport.gsmRfPara);
                                                        //}

                                                        if (gsmAllParaReport.gsmMsgOptionFlag == true)
                                                        {
                                                            rtv += gDbHelperLower.gsm_msg_option_insert(carry, devInfo.id, gsmAllParaReport.gsmMsgOption);
                                                        }                                                        
                                                    }

                                                    if (whiteimsi_md5_match && blackimsi_md5_match)
                                                    {

                                                        info += string.Format("\n以AP为准，黑白名单无需对齐，直接回DataAlignOver\n,{0}", gDbHelperLower.get_rtv_str(rtv));
                                                        if (rv == 0)
                                                        {
                                                            //直接回DataAlignOver成功
                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, 0, info, true, null, null);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                        }
                                                        else
                                                        {
                                                            //直接回DataAlignOver失败
                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, info, true, null, null);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                        }
                                                    }

                                                    #endregion

                                                    #endregion
                                                }
                                            }

                                            #endregion

                                            break;

                                            #endregion                                            
                                        }
                                    case devMode.MODE_GSM_V2:
                                    case devMode.MODE_CDMA:
                                        {
                                            #region GSM-V2/CDMA处理

                                            #region 获取GC所有的上报信息以及串

                                            string errInfo = "";
                                            str_GC_All_Para gcAllParaReport = new str_GC_All_Para();
                                            if (get_gc_report_info(gApLower, ref gcAllParaReport, ref gcParaFullString, ref errInfo,dm) != 0)
                                            {
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            int carry = gcAllParaReport.sys;
                                            if (dm == devMode.MODE_CDMA)
                                            {
                                                sys = 0;
                                                carry = -1;                                                
                                            }
                                            else
                                            {
                                                sys = gcAllParaReport.sys;
                                            }

                                            #endregion

                                            #region 预处理

                                            FullnameAlign = string.Format("{0}.{1}", Fullname, sys);
                                            if (gDicDataAlign.ContainsKey(FullnameAlign))
                                            {
                                                //取出对应的数据结构
                                                daInfo = gDicDataAlign[FullnameAlign];
                                            }
                                            else
                                            {
                                                //填充对应的数据结构
                                                daInfo.devId = devInfo.id;
                                                daInfo.sys = sys;
                                                daInfo.dm = dm;
                                                daInfo.fullName = Fullname;
                                                daInfo.fileNameBlackList_Ap_Base = string.Format("{0}_black_ap.txt", devInfo.sn);
                                                daInfo.fileNameWhiteList_Ap_Base = string.Format("{0}_white_ap.txt", devInfo.sn);

                                                daInfo.fileNameBlackList_Db_Base = string.Format("{0}_black_db.txt", devInfo.sn);
                                                daInfo.fileNameWhiteList_Db_Base = string.Format("{0}_white_db.txt", devInfo.sn);
                                            }

                                            //打印对齐信息
                                            if (DataController.DataAlignMode == 0)
                                            {
                                                info = string.Format("FullnameAlign = {0},以DB为基准 -> DataAlignMode = {1},reportType = {2}", FullnameAlign, DataController.DataAlignMode, reportType);
                                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            }
                                            else if (DataController.DataAlignMode == 1)
                                            {
                                                info = string.Format("FullnameAlign = {0},以AP为基准 -> DataAlignMode = {1},reportType = {2}", FullnameAlign, DataController.DataAlignMode, reportType);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            }
                                            else
                                            {
                                                info = string.Format("FullnameAlign = {0},默认以DB为基准 -> DataAlignMode = {1},reportType = {2}", FullnameAlign, DataController.DataAlignMode, reportType);
                                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                DataController.DataAlignMode = 0;
                                            }

                                            #endregion

                                            #region 计算DB中所有的参数串

                                            rtv = gDbHelperLower.gc_all_record_get_by_devid(carry, devInfo.id, ref gcParaFullString_db,dm);
                                            if ((int)RC.SUCCESS != rtv)
                                            {
                                                errInfo = string.Format("gc_all_record_get_by_devid出错.");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            if (gcParaFullString.Equals(gcParaFullString_db))
                                            {
                                                gc_para_match = true;
                                            }


                                            info = "\r\n";
                                            info += string.Format("Fullname            = {0}\r\n", Fullname);
                                            info += string.Format("gc_para_match       = {0}\r\n", gc_para_match);
                                            info += string.Format("gcParaFullString    = {0}\r\n", gcParaFullString);
                                            info += string.Format("gcParaFullString_db = {0}\r\n", gcParaFullString_db);

                                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                            #endregion

                                            #region 计算DB中黑白名单的MD5

                                            //2018-11-27
                                            rtv = gDbHelperLower.bwlist_record_md5sum_get(bwType.BWTYPE_BLACK, devInfo.id, ref listBlackImsi);
                                            //rtv = gDbHelperLower.gc_imsi_action_record_md5sum_get(bwType.BWTYPE_BLACK, devInfo.id, ref listBlackImsi);   
                                            
                                            if ((int)RC.SUCCESS != rtv)
                                            {
                                                //返回出错处理
                                                errInfo = string.Format("bwlist_record_md5sum_get出错：{0}", gDbHelperLower.get_rtv_str(rtv));
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }
                                            else
                                            {
                                                if (listBlackImsi.Count > 0)
                                                {
                                                    listBlackImsi.Sort();
                                                }
                                            }

                                            //2018-11-27
                                            rtv = gDbHelperLower.bwlist_record_md5sum_get(bwType.BWTYPE_WHITE, devInfo.id, ref listWhiteImsi);
                                            //rtv = gDbHelperLower.gc_imsi_action_record_md5sum_get(bwType.BWTYPE_WHITE, devInfo.id, ref listWhiteImsi);

                                            if ((int)RC.SUCCESS != rtv)
                                            {
                                                //返回出错处理
                                                errInfo = string.Format("bwlist_record_md5sum_get出错：{0}", gDbHelperLower.get_rtv_str(rtv));
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }
                                            else
                                            {
                                                if (listWhiteImsi.Count > 0)
                                                {
                                                    listWhiteImsi.Sort();
                                                }
                                            }

                                            if (0 != Get_Md5_Sum(listBlackImsi, 1, ref blackimsi_md5_db))
                                            {
                                                //返回出错处理
                                                errInfo = string.Format("Get_Md5_Sum出错");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            if (0 != Get_Md5_Sum(listWhiteImsi, 1, ref whiteimsi_md5_db))
                                            {
                                                //返回出错处理
                                                errInfo = string.Format("Get_Md5_Sum出错");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            info = "\r\n";
                                            if (sys == 1)
                                            {
                                                //
                                                whiteimsi_md5_match = true;
                                                info += string.Format("载波1不需要对齐黑白名单\r\n");
                                            }
                                            else
                                            {
                                                if (whiteimsi_md5.Equals(whiteimsi_md5_db))
                                                {
                                                    whiteimsi_md5_match = true;
                                                }
                                            }

                                            if (dm == devMode.MODE_CDMA)
                                            {
                                                //CDMA没有黑白名单之说
                                                whiteimsi_md5_match = true;
                                                info += string.Format("CDMA没有黑白名单之说\r\n");
                                            }

                                            
                                            info += string.Format("Fullname            = {0}\r\n", Fullname);
                                            info += string.Format("whiteimsi_md5_match = {0}\r\n", whiteimsi_md5_match);
                                            info += string.Format("whiteimsi_md5       = {0}\r\n", whiteimsi_md5);
                                            info += string.Format("whiteimsi_md5_db    = {0}\r\n", whiteimsi_md5_db);

                                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                            info = "\r\n";
                                            if (sys == 1)
                                            {
                                                //载波1不需要对齐黑白名单
                                                blackimsi_md5_match = true;
                                                info += string.Format("载波1不需要对齐黑白名单\r\n");
                                            }
                                            else
                                            {
                                                if (blackimsi_md5.Equals(blackimsi_md5_db))
                                                {
                                                    blackimsi_md5_match = true;
                                                }
                                            }

                                            if (dm == devMode.MODE_CDMA)
                                            {
                                                //CDMA没有黑白名单之说
                                                blackimsi_md5_match = true;
                                                info += string.Format("CDMA没有黑白名单之说\r\n");
                                            }
                                            
                                            info += string.Format("Fullname            = {0}\r\n", Fullname);
                                            info += string.Format("blackimsi_md5_match = {0}\r\n", blackimsi_md5_match);
                                            info += string.Format("blackimsi_md5       = {0}\r\n", blackimsi_md5);
                                            info += string.Format("blackimsi_md5_db    = {0}\r\n", blackimsi_md5_db);

                                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                            daInfo.sys = sys;
                                            daInfo.whiteimsi_md5_match = whiteimsi_md5_match;
                                            daInfo.blackimsi_md5_match = blackimsi_md5_match;

                                            if (gDicDataAlign.ContainsKey(FullnameAlign))
                                            {
                                                gDicDataAlign[FullnameAlign] = daInfo;
                                            }
                                            else
                                            {
                                                gDicDataAlign.Add(FullnameAlign, daInfo);
                                            }

                                            #endregion

                                            #region 回复成功的ReportGenParaAck

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, 0, "成功", true, null, null);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);

                                            #endregion

                                            #region 流程处理

                                            if (gc_para_match && blackimsi_md5_match && whiteimsi_md5_match)
                                            {
                                                info = string.Format("成功,gc,black and white don't need to be aligned");

                                                //数据已经对齐，无需处理
                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, 0, info, true, null, null);                                            
                                                gApLower.Body.dic.Add("sys", sys);                                               
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                            }
                                            else
                                            {
                                                //数据不对齐
                                                if (DataController.DataAlignMode == 0)
                                                {
                                                    #region 以DB为准

                                                    #region 填充SetGenParaReq头

                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.SetGenParaReq, 0, "成功", true, null, null);

                                                    gApLower.Body.dic.Remove("ReturnCode");
                                                    gApLower.Body.dic.Remove("ReturnStr");
                                                    gApLower.Body.dic.Add("sys", sys);
                                                    gApLower.Body.dic.Add("ApIsBase", DataController.DataAlignMode.ToString());

                                                    #endregion                             

                                                    #region 服务器上传白名单到FTP

                                                    /*
                                                     * 【注意】,CDMA是没有黑白名单之说的，库中也没有保存
                                                     *  而其他的类型,LTE/WCDMA,GSM-HJT,GSM-V2就有存库。
                                                     */
                                                    if (!whiteimsi_md5_match)
                                                    {
                                                        string fileName = daInfo.fileNameWhiteList_Db_Base;

                                                        try
                                                        {
                                                            byte[] data = null;
                                                            if (0 == generate_ftp_byte(ref data, listWhiteImsi))
                                                            {
                                                                rtv = gFtpHelperFile.Put(fileName, data);
                                                                if (rtv != 0)
                                                                {
                                                                    //返回出错处理
                                                                    errInfo = string.Format("Server上传对齐文件listWhiteImsi到FTP服务器出错.");
                                                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                                    gApLower.Body.dic.Add("sys", sys);
                                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        catch (Exception e)
                                                        {
                                                            //返回出错处理
                                                            errInfo = string.Format("Server上传对齐文件listWhiteImsi到FTP服务器出错." + e.Message + e.StackTrace);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                        gApLower.Body.dic.Add("FtpUrl_White", ftpUrl);
                                                        gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                        gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                        gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                        gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                        gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                    }

                                                    #endregion

                                                    #region 服务器上传黑名单到FTP

                                                    /*
                                                     * 【注意】,CDMA是没有黑白名单之说的，库中也没有保存
                                                     *  而其他的类型,LTE/WCDMA,GSM-HJT,GSM-V2就有存库。
                                                     */
                                                    if (!blackimsi_md5_match)
                                                    {
                                                        string fileName = daInfo.fileNameBlackList_Db_Base;

                                                        try
                                                        {
                                                            byte[] data = null;
                                                            if (0 == generate_ftp_byte(ref data, listBlackImsi))
                                                            {
                                                                rtv = gFtpHelperFile.Put(fileName, data);
                                                                if (rtv != 0)
                                                                {
                                                                    //返回出错处理
                                                                    errInfo = string.Format("服务器上传对齐文件listBlackImsi到FTP服务器出错.");
                                                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                                    gApLower.Body.dic.Add("sys", sys);
                                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        catch (Exception e)
                                                        {
                                                            //返回出错处理
                                                            errInfo = string.Format("服务器上传对齐文件listBlackImsi到FTP服务器出错." + e.Message + e.StackTrace);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        if (!whiteimsi_md5_match)
                                                        {
                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);
                                                        }
                                                        else
                                                        {
                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);

                                                            gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                            gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                            gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                            gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                            gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                        }
                                                    }

                                                    #endregion

                                                    #region 将DB中GC参数传给AP

                                                    if (!gc_para_match)
                                                    {
                                                        str_GC_All_Para allInfo = new str_GC_All_Para();
                                                       
                                                        //(1)
                                                        rtv = gDbHelperLower.gc_param_config_record_get_by_devid(carry, devInfo.id, ref allInfo.gcParamConfig);
                                                        if (rtv != 0)
                                                        {
                                                            //返回出错处理
                                                            errInfo = string.Format("gc_param_config_record_get_by_devid出错:") + gDbHelperLower.get_rtv_str(rtv);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        //(2)
                                                        rtv = gDbHelperLower.gc_misc_record_get_by_devid(carry, devInfo.id, ref allInfo.gcMisc);
                                                        if (rtv != 0)
                                                        {
                                                            //返回出错处理
                                                            errInfo = string.Format("gc_misc_record_get_by_devid出错:") + gDbHelperLower.get_rtv_str(rtv);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        //(3)
                                                        rtv = gDbHelperLower.gc_carrier_msg_record_get_by_devid(carry, devInfo.id, ref allInfo.gcCarrierMsg);
                                                        if (rtv != 0)
                                                        {
                                                            //返回出错处理
                                                            errInfo = string.Format("gc_param_config_record_get_by_devid出错:") + gDbHelperLower.get_rtv_str(rtv);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        //       "name":"CONFIG_FAP_MSG",            //4.4  GUI配置FAP的启动参数
                                                        //       {
                                                        //					"bWorkingMode":XXX		    工作模式:1 为侦码模式 ;3驻留模式.
                                                        //					"bC":XXX		            是否自动切换模式。保留
                                                        //					"wRedirectCellUarfcn":XXX	CDMA黑名单频点	
                                                        //                  "dwDateTime":XXX 当前时间
                                                        //					"bPLMNId":XXX		    PLMN标志
                                                        //					"bTxPower":XXX			实际发射功率.设置发射功率衰减寄存器, 0输出最大功率, 每增加1, 衰减1DB
                                                        //					"bRxGain":XXX			接收信号衰减寄存器. 每增加1增加1DB的增益
                                                        //					"wPhyCellId":XXX		物理小区ID.
                                                        //					"wLAC":XXX			    追踪区域码。GSM：LAC;CDMA：REG_ZONE
                                                        //					"wUARFCN":XXX			小区频点. CDMA 制式为BSID
                                                        //					"dwCellId":XXX			小区ID。注意在CDMA制式没有小区ID，高位WORD 是SID ， 低位WORD 是NID
                                                        //       }

                                                        Name_DIC_Struct ndic = new Name_DIC_Struct();
                                                        ndic.name = "CONFIG_FAP_MSG";

                                                        ndic.dic.Add("bWorkingMode", allInfo.gcParamConfig.bWorkingMode);
                                                        ndic.dic.Add("bC", allInfo.gcParamConfig.bC);
                                                        ndic.dic.Add("wRedirectCellUarfcn", allInfo.gcParamConfig.wRedirectCellUarfcn);
                                                        //ndic.dic.Add("dwDateTime", allInfo.gcParamConfig.dwDateTime);
                                                        ndic.dic.Add("bPLMNId", allInfo.gcParamConfig.bPLMNId);
                                                        ndic.dic.Add("bTxPower", allInfo.gcParamConfig.bTxPower);
                                                        ndic.dic.Add("bRxGain", allInfo.gcParamConfig.bRxGain);
                                                        ndic.dic.Add("wPhyCellId", allInfo.gcParamConfig.wPhyCellId);
                                                        ndic.dic.Add("wLAC", allInfo.gcParamConfig.wLAC);
                                                        ndic.dic.Add("wUARFCN", allInfo.gcParamConfig.wUARFCN);
                                                        ndic.dic.Add("dwCellId", allInfo.gcParamConfig.dwCellId);
                                                        gApLower.Body.n_dic.Add(ndic);


                                                        //       "name":"CONFIG_SMS_CONTENT_MSG",           //4.10  FAP 配置下发短信号码和内容
                                                        //      {
                                                        //					"bSMSOriginalNumLen":XXX	    主叫号码长度
                                                        //					"bSMSOriginalNum":XXX	    	主叫号码
                                                        //					"bSMSContentLen":XXX	    	短信内容字数
                                                        //					"bSMSContent":XXX	            短信内容.unicode编码，每个字符占2字节
                                                        //       }
                                                        ndic = new Name_DIC_Struct();
                                                        ndic.name = "CONFIG_SMS_CONTENT_MSG";

                                                       
                                                        ndic.dic.Add("bSMSOriginalNumLen", allInfo.gcMisc.bSMSOriginalNumLen);
                                                        ndic.dic.Add("bSMSOriginalNum", allInfo.gcMisc.bSMSOriginalNum);
                                                        ndic.dic.Add("bSMSContentLen", allInfo.gcMisc.bSMSContentLen);
                                                        ndic.dic.Add("bSMSContent", allInfo.gcMisc.bSMSContent);                                                        
                                                        gApLower.Body.n_dic.Add(ndic);


                                                        //"n_dic":  --CDMA有该项，GSM-V2没有该项
                                                        //   [
                                                        //       "name":"CONFIG_CDMA_CARRIER_MSG",            //4.14  GUI 配置CDMA多载波参数
                                                        //       {
                                                        //					"wARFCN1":XXX	        工作频点1	
                                                        //					"bARFCN1Mode":XXX	    工作频点1模式。0表示扫描，1表示常开,2表示关闭。
                                                        //					"wARFCN1Duration":XXX	工作频点1扫描时长
                                                        //					"wARFCN1Period":XXX	    工作频点1扫描间隔
                                                        //					"wARFCN2":XXX	        工作频点2
                                                        //					"bARFCN2Mode":XXX	    工作频点2模式。 0表示扫描，1表示常开,2表示关闭。
                                                        //					"wARFCN2Duration":XXX	工作频点2扫描时长
                                                        //					"wARFCN2Period":XXX	    工作频点2扫描间隔
                                                        //					"wARFCN3":XXX	        工作频点3	
                                                        //					"bARFCN3Mode":XXX	    工作频点3模式。 0表示扫描，1表示常开,2表示关闭。
                                                        //					"wARFCN3Duration":XXX	工作频点3扫描时长	
                                                        //					"wARFCN3Period":XXX	    工作频点3扫描间隔
                                                        //					"wARFCN4":XXX	        工作频点4	
                                                        //					"bARFCN4Mode":XXX	    工作频点4模式。	0表示扫描，1表示常开,2表示关闭。
                                                        //					"wARFCN4Duration":XXX	工作频点4扫描时长
                                                        //					"wARFCN4Period":XXX	    工作频点4扫描间隔
                                                        //       }

                                                        if (dm == devMode.MODE_CDMA)
                                                        {
                                                            ndic = new Name_DIC_Struct();
                                                            ndic.name = "CONFIG_CDMA_CARRIER_MSG";

                                                            ndic.dic.Add("wARFCN1", allInfo.gcCarrierMsg.wARFCN1);
                                                            ndic.dic.Add("bARFCN1Mode", allInfo.gcCarrierMsg.bARFCN1Mode);
                                                            ndic.dic.Add("wARFCN1Duration", allInfo.gcCarrierMsg.wARFCN1Duration);
                                                            ndic.dic.Add("wARFCN1Period", allInfo.gcCarrierMsg.wARFCN1Period);

                                                            ndic.dic.Add("wARFCN2", allInfo.gcCarrierMsg.wARFCN2);
                                                            ndic.dic.Add("bARFCN2Mode", allInfo.gcCarrierMsg.bARFCN2Mode);
                                                            ndic.dic.Add("wARFCN2Duration", allInfo.gcCarrierMsg.wARFCN2Duration);
                                                            ndic.dic.Add("wARFCN2Period", allInfo.gcCarrierMsg.wARFCN2Period);

                                                            ndic.dic.Add("wARFCN3", allInfo.gcCarrierMsg.wARFCN3);
                                                            ndic.dic.Add("bARFCN3Mode", allInfo.gcCarrierMsg.bARFCN3Mode);
                                                            ndic.dic.Add("wARFCN3Duration", allInfo.gcCarrierMsg.wARFCN3Duration);
                                                            ndic.dic.Add("wARFCN3Period", allInfo.gcCarrierMsg.wARFCN3Period);

                                                            ndic.dic.Add("wARFCN4", allInfo.gcCarrierMsg.wARFCN4);
                                                            ndic.dic.Add("bARFCN4Mode", allInfo.gcCarrierMsg.bARFCN4Mode);
                                                            ndic.dic.Add("wARFCN4Duration", allInfo.gcCarrierMsg.wARFCN4Duration);
                                                            ndic.dic.Add("wARFCN4Period", allInfo.gcCarrierMsg.wARFCN4Period);

                                                            gApLower.Body.n_dic.Add(ndic);
                                                        }                                                       
                                                    }

                                                    #endregion

                                                    Send_Msg_2_ApCtrl_Lower(gApLower);

                                                    break;

                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region 以AP为准

                                                    #region 告诉AP发白名单FTP服务器上

                                                    if (!whiteimsi_md5_match)
                                                    {
                                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.SetGenParaReq, 0, "成功", true, null, null);
                                                        gApLower.Body.dic.Remove("ReturnCode");
                                                        gApLower.Body.dic.Remove("ReturnStr");
                                                        gApLower.Body.dic.Add("sys", sys);
                                                        gApLower.Body.dic.Add("ApIsBase", DataController.DataAlignMode.ToString());

                                                        //告诉AP发文件到FTP服务器上
                                                        string fileName = daInfo.fileNameWhiteList_Ap_Base;

                                                        string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                        gApLower.Body.dic.Add("FtpUrl_White", ftpUrl);
                                                        gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                        gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                        gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                        gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                        gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                    }

                                                    #endregion

                                                    #region 告诉AP发黑名单到FTP服务器上

                                                    if (!blackimsi_md5_match)
                                                    {
                                                        if (!whiteimsi_md5_match)
                                                        {
                                                            //只需加一项
                                                            string fileName = daInfo.fileNameBlackList_Ap_Base;

                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);
                                                        }
                                                        else
                                                        {
                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.SetGenParaReq, 0, "成功", true, null, null);
                                                            gApLower.Body.dic.Remove("ReturnCode");
                                                            gApLower.Body.dic.Remove("ReturnStr");
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            gApLower.Body.dic.Add("ApIsBase", DataController.DataAlignMode.ToString());

                                                            //告诉AP发文件到FTP服务器上
                                                            string fileName = daInfo.fileNameBlackList_Ap_Base;

                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);
                                                            gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                            gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                            gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                            gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                            gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                        }
                                                    }

                                                    #endregion

                                                    #region 发消息给ApCtrl

                                                    if (!whiteimsi_md5_match || !blackimsi_md5_match)
                                                    {
                                                        //发SetGenParaReq
                                                        //然后在SetGenParaRsp中回DataAlignOver
                                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                                    }

                                                    #endregion

                                                    #region 将GC参数更新到DB

                                                    if (!gc_para_match)
                                                    {
                                                        rtv = 0;
                                                        if (gcAllParaReport.gcParamConfigFlag == true)
                                                        {
                                                            rtv += gDbHelperLower.gc_param_config_record_update(carry, devInfo.id, gcAllParaReport.gcParamConfig);
                                                        }

                                                        if (gcAllParaReport.gcMiscFlag == true)
                                                        {
                                                            rtv += gDbHelperLower.gc_misc_record_update(carry, devInfo.id, gcAllParaReport.gcMisc);
                                                        }                                                       

                                                        if (gcAllParaReport.gcCarrierMsgFlag == true)
                                                        {
                                                            rtv += gDbHelperLower.gc_carrier_msg_record_update(carry, devInfo.id, gcAllParaReport.gcCarrierMsg);
                                                        }                                                                                                                                                                       
                                                    }

                                                    if (whiteimsi_md5_match && blackimsi_md5_match)
                                                    {                                                        
                                                        info += string.Format("\n以AP为准，黑白名单无需对齐，直接回DataAlignOver\n,{0}", gDbHelperLower.get_rtv_str(rtv));
                                                        if (rv == 0)
                                                        {
                                                            //直接回DataAlignOver成功
                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, 0, info, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                        }
                                                        else
                                                        {                                                           
                                                            //直接回DataAlignOver失败
                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, info, true, null, null);
                                                            gApLower.Body.dic.Add("sys", sys);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                        }
                                                    }

                                                    #endregion

                                                    #endregion
                                                }
                                            }

                                            #endregion

                                            break;

                                            #endregion                                            
                                        }
                                    case devMode.MODE_WCDMA:
                                    case devMode.MODE_LTE_TDD:
                                    case devMode.MODE_LTE_FDD:
                                        {
                                            #region LTE处理

                                            #region 获取所有通用参数以及串

                                            genParaFullString = "";

                                            // --(1)--
                                            if (gApLower.Body.dic.ContainsKey("mode"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["mode"].ToString()))
                                                {
                                                    apGP.mode = gApLower.Body.dic["mode"].ToString();
                                                    genParaFullString += string.Format("[mode:{0}]", apGP.mode);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含mode字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(2)--
                                            if (gApLower.Body.dic.ContainsKey("primaryplmn"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["primaryplmn"].ToString()))
                                                {
                                                    apGP.primaryplmn = gApLower.Body.dic["primaryplmn"].ToString();
                                                    genParaFullString += string.Format("[primaryplmn:{0}]", apGP.primaryplmn);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含primaryplmn字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(3)--
                                            if (gApLower.Body.dic.ContainsKey("earfcndl"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["earfcndl"].ToString()))
                                                {
                                                    apGP.earfcndl = gApLower.Body.dic["earfcndl"].ToString();
                                                    genParaFullString += string.Format("[earfcndl:{0}]", apGP.earfcndl);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含earfcndl字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(4)--
                                            if (gApLower.Body.dic.ContainsKey("earfcnul"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["earfcnul"].ToString()))
                                                {
                                                    apGP.earfcnul = gApLower.Body.dic["earfcnul"].ToString();
                                                    genParaFullString += string.Format("[earfcnul:{0}]", apGP.earfcnul);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含earfcnul字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(5)--
                                            if (gApLower.Body.dic.ContainsKey("cellid"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["cellid"].ToString()))
                                                {
                                                    apGP.cellid = gApLower.Body.dic["cellid"].ToString();
                                                    genParaFullString += string.Format("[cellid:{0}]", apGP.cellid);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含cellid字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(6)--
                                            if (gApLower.Body.dic.ContainsKey("pci"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["pci"].ToString()))
                                                {
                                                    apGP.pci = gApLower.Body.dic["pci"].ToString();
                                                    genParaFullString += string.Format("[pci:{0}]", apGP.pci);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含pci字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(7)--
                                            if (gApLower.Body.dic.ContainsKey("bandwidth"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["bandwidth"].ToString()))
                                                {
                                                    apGP.bandwidth = gApLower.Body.dic["bandwidth"].ToString();

                                                    // --WCDMA(1)--
                                                    if (dm != devMode.MODE_WCDMA)
                                                    {
                                                        genParaFullString += string.Format("[bandwidth:{0}]", apGP.bandwidth);
                                                    }
                                                }
                                            }
                                            //else   //WCDMA没有带这个字段
                                            //{
                                            //    //返回出错处理
                                            //    string errInfo = string.Format("{0}:没包含bandwidth字段.", Main2ApControllerMsgType.ReportGenPara);
                                            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            //    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            //    Send_Msg_2_ApCtrl_Lower(gApLower);
                                            //    break;
                                            //}

                                            // --(8)--
                                            if (gApLower.Body.dic.ContainsKey("tac"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["tac"].ToString()))
                                                {
                                                    apGP.tac = gApLower.Body.dic["tac"].ToString();
                                                    genParaFullString += string.Format("[tac:{0}]", apGP.tac);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含tac字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(9)--
                                            if (gApLower.Body.dic.ContainsKey("txpower"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["txpower"].ToString()))
                                                {
                                                    apGP.txpower = gApLower.Body.dic["txpower"].ToString();
                                                    genParaFullString += string.Format("[txpower:{0}]", apGP.txpower);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含txpower字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(10)--
                                            if (gApLower.Body.dic.ContainsKey("periodtac"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["periodtac"].ToString()))
                                                {
                                                    apGP.periodtac = gApLower.Body.dic["periodtac"].ToString();
                                                    genParaFullString += string.Format("[periodtac:{0}]", apGP.periodtac);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含periodtac字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(11)--
                                            if (gApLower.Body.dic.ContainsKey("manualfreq"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["manualfreq"].ToString()))
                                                {
                                                    apGP.manualfreq = gApLower.Body.dic["manualfreq"].ToString();

                                                    // --WCDMA(2)--
                                                    if (dm != devMode.MODE_WCDMA)
                                                    {
                                                        genParaFullString += string.Format("[manualfreq:{0}]", apGP.manualfreq);
                                                    }
                                                }
                                            }
                                            //else
                                            //{
                                            //    //返回出错处理
                                            //    string errInfo = string.Format("{0}:没包含manualfreq字段.", Main2ApControllerMsgType.ReportGenPara);
                                            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            //    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            //    Send_Msg_2_ApCtrl_Lower(gApLower);
                                            //    break;
                                            //}

                                            // --(12)--
                                            if (gApLower.Body.dic.ContainsKey("bootMode"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["bootMode"].ToString()))
                                                {
                                                    apGP.bootMode = gApLower.Body.dic["bootMode"].ToString();
                                                    genParaFullString += string.Format("[bootMode:{0}]", apGP.bootMode);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含bootMode字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }


                                            // --(13)--
                                            if (gApLower.Body.dic.ContainsKey("Earfcnlist"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["Earfcnlist"].ToString()))
                                                {
                                                    apGP.Earfcnlist = gApLower.Body.dic["Earfcnlist"].ToString();

                                                    // --WCDMA(3)--
                                                    if (dm != devMode.MODE_WCDMA)
                                                    {
                                                        genParaFullString += string.Format("[Earfcnlist:{0}]", apGP.Earfcnlist);
                                                    }
                                                }
                                            }
                                            //else
                                            //{
                                            //    //返回出错处理
                                            //    string errInfo = string.Format("{0}:没包含Earfcnlist字段.", Main2ApControllerMsgType.ReportGenPara);
                                            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            //    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            //    Send_Msg_2_ApCtrl_Lower(gApLower);
                                            //    break;
                                            //}


                                            // --(14)--
                                            if (gApLower.Body.dic.ContainsKey("Bandoffset"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["Bandoffset"].ToString()))
                                                {
                                                    apGP.Bandoffset = gApLower.Body.dic["Bandoffset"].ToString();
                                                    genParaFullString += string.Format("[Bandoffset:{0}]", apGP.Bandoffset);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含Bandoffset字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(15)--
                                            if (gApLower.Body.dic.ContainsKey("NTP"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["NTP"].ToString()))
                                                {
                                                    apGP.NTP = gApLower.Body.dic["NTP"].ToString();
                                                    genParaFullString += string.Format("[NTP:{0}]", apGP.NTP);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含NTP字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(16)--
                                            if (gApLower.Body.dic.ContainsKey("ntppri"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ntppri"].ToString()))
                                                {
                                                    apGP.ntppri = gApLower.Body.dic["ntppri"].ToString();
                                                    genParaFullString += string.Format("[ntppri:{0}]", apGP.ntppri);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含ntppri字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(17)--
                                            if (gApLower.Body.dic.ContainsKey("source"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["source"].ToString()))
                                                {
                                                    apGP.source = gApLower.Body.dic["source"].ToString();

                                                    // --WCDMA(4)--
                                                    if (dm != devMode.MODE_WCDMA)
                                                    {
                                                        genParaFullString += string.Format("[source:{0}]", apGP.source);
                                                    }
                                                }
                                            }
                                            //else
                                            //{
                                            //    //返回出错处理
                                            //    string errInfo = string.Format("{0}:没包含source字段.", Main2ApControllerMsgType.ReportGenPara);
                                            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            //    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            //    Send_Msg_2_ApCtrl_Lower(gApLower);
                                            //    break;
                                            //}

                                            // --(18)--
                                            if (gApLower.Body.dic.ContainsKey("ManualEnable"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ManualEnable"].ToString()))
                                                {
                                                    apGP.ManualEnable = gApLower.Body.dic["ManualEnable"].ToString();

                                                    // --WCDMA(5)--
                                                    if (dm != devMode.MODE_WCDMA)
                                                    {
                                                        genParaFullString += string.Format("[ManualEnable:{0}]", apGP.ManualEnable);
                                                    }
                                                }
                                            }
                                            //else
                                            //{
                                            //    //返回出错处理
                                            //    string errInfo = string.Format("{0}:没包含ManualEnable字段.", Main2ApControllerMsgType.ReportGenPara);
                                            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            //    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            //    Send_Msg_2_ApCtrl_Lower(gApLower);
                                            //    break;
                                            //}

                                            // --(19)--
                                            if (gApLower.Body.dic.ContainsKey("ManualEarfcn"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ManualEarfcn"].ToString()))
                                                {
                                                    apGP.ManualEarfcn = gApLower.Body.dic["ManualEarfcn"].ToString();

                                                    // --WCDMA(6)--
                                                    if (dm != devMode.MODE_WCDMA)
                                                    {
                                                        genParaFullString += string.Format("[ManualEarfcn:{0}]", apGP.ManualEarfcn);
                                                    }
                                                }
                                            }
                                            //else
                                            //{
                                            //    //返回出错处理
                                            //    string errInfo = string.Format("{0}:没包含ManualEarfcn字段.", Main2ApControllerMsgType.ReportGenPara);
                                            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            //    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            //    Send_Msg_2_ApCtrl_Lower(gApLower);
                                            //    break;
                                            //}


                                            // --(20)--
                                            if (gApLower.Body.dic.ContainsKey("ManualPci"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ManualPci"].ToString()))
                                                {
                                                    apGP.ManualPci = gApLower.Body.dic["ManualPci"].ToString();

                                                    // --WCDMA(7)--
                                                    if (dm != devMode.MODE_WCDMA)
                                                    {
                                                        genParaFullString += string.Format("[ManualPci:{0}]", apGP.ManualPci);
                                                    }
                                                }
                                            }
                                            //else
                                            //{
                                            //    //返回出错处理
                                            //    string errInfo = string.Format("{0}:没包含ManualPci字段.", Main2ApControllerMsgType.ReportGenPara);
                                            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            //    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            //    Send_Msg_2_ApCtrl_Lower(gApLower);
                                            //    break;
                                            //}

                                            // --(21)--
                                            if (gApLower.Body.dic.ContainsKey("ManualBw"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["ManualBw"].ToString()))
                                                {
                                                    apGP.ManualBw = gApLower.Body.dic["ManualBw"].ToString();

                                                    // --WCDMA(8)--
                                                    if (dm != devMode.MODE_WCDMA)
                                                    {
                                                        genParaFullString += string.Format("[ManualBw:{0}]", apGP.ManualBw);
                                                    }
                                                }
                                            }
                                            //else
                                            //{
                                            //    //返回出错处理
                                            //    string errInfo = string.Format("{0}:没包含ManualBw字段.", Main2ApControllerMsgType.ReportGenPara);
                                            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            //    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            //    Send_Msg_2_ApCtrl_Lower(gApLower);
                                            //    break;
                                            //}

                                            // --(22)--
                                            if (gApLower.Body.dic.ContainsKey("gps_select"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["gps_select"].ToString()))
                                                {
                                                    apGP.gps_select = gApLower.Body.dic["gps_select"].ToString();
                                                    genParaFullString += string.Format("[gps_select:{0}]", apGP.gps_select);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含gps_select字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(23)--
                                            // 2018-07-23
                                            if (gApLower.Body.dic.ContainsKey("otherplmn"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["otherplmn"].ToString()))
                                                {
                                                    apGP.otherplmn = gApLower.Body.dic["otherplmn"].ToString();
                                                    genParaFullString += string.Format("[otherplmn:{0}]", apGP.otherplmn);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含otherplmn字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            // --(24)--
                                            if (gApLower.Body.dic.ContainsKey("periodFreq"))
                                            {
                                                if (!string.IsNullOrEmpty(gApLower.Body.dic["periodFreq"].ToString()))
                                                {
                                                    apGP.periodFreq = gApLower.Body.dic["periodFreq"].ToString();
                                                    genParaFullString += string.Format("[periodFreq:{0}]", apGP.periodFreq);
                                                }
                                            }
                                            else
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("{0}:没包含periodFreq字段.", Main2ApControllerMsgType.ReportGenPara);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }


                                            #endregion

                                            #region 预处理

                                            FullnameAlign = string.Format("{0}.{1}", Fullname, sys);
                                            if (gDicDataAlign.ContainsKey(FullnameAlign))
                                            {
                                                //取出对应的数据结构
                                                daInfo = gDicDataAlign[FullnameAlign];
                                            }
                                            else
                                            {
                                                //填充对应的数据结构
                                                daInfo.devId = devInfo.id;
                                                daInfo.sys = sys;
                                                daInfo.dm = dm;
                                                daInfo.fullName = Fullname;
                                                daInfo.fileNameBlackList_Ap_Base = string.Format("{0}_black_ap.txt", devInfo.sn);
                                                daInfo.fileNameWhiteList_Ap_Base = string.Format("{0}_white_ap.txt", devInfo.sn);

                                                daInfo.fileNameBlackList_Db_Base = string.Format("{0}_black_db.txt", devInfo.sn);
                                                daInfo.fileNameWhiteList_Db_Base = string.Format("{0}_white_db.txt", devInfo.sn);
                                            }

                                            //打印对齐信息
                                            if (DataController.DataAlignMode == 0)
                                            {
                                                info = string.Format("FullnameAlign = {0},以DB为基准 -> DataAlignMode = {1},reportType = {2}", FullnameAlign, DataController.DataAlignMode, reportType);
                                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            }
                                            else if (DataController.DataAlignMode == 1)
                                            {
                                                info = string.Format("FullnameAlign = {0},以AP为基准 -> DataAlignMode = {1},reportType = {2}", FullnameAlign, DataController.DataAlignMode, reportType);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            }
                                            else
                                            {
                                                info = string.Format("FullnameAlign = {0},默认以DB为基准 -> DataAlignMode = {1},reportType = {2}", FullnameAlign, DataController.DataAlignMode, reportType);
                                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                DataController.DataAlignMode = 0;
                                            }

                                            #endregion

                                            #region 计算DB中的通用参数串

                                            rtv = gDbHelperLower.ap_general_para_string_get_by_devid(devInfo.id, ref genParaFullString_db,dm);
                                            if (rtv != 0)
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("ap_general_para_string_get_by_devid出错.");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            if (genParaFullString_db.Equals(genParaFullString))
                                            {
                                                gen_para_match = true;                                               
                                            }
                                           
                                            info = "\r\n";
                                            info += string.Format("Fullname             = {0}\r\n", Fullname);
                                            info += string.Format("gen_para_match       = {0}\r\n", gen_para_match);
                                            info += string.Format("genParaFullString    = {0}\r\n", genParaFullString);
                                            info += string.Format("genParaFullString_db = {0}\r\n", genParaFullString_db);

                                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                            #endregion

                                            #region 计算DB中黑白名单的MD5

                                            rtv = gDbHelperLower.bwlist_record_md5sum_get(bwType.BWTYPE_BLACK, devInfo.id, ref listBlackImsi);
                                            if ((int)RC.SUCCESS != rtv)
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("bwlist_record_md5sum_get出错：{0}", gDbHelperLower.get_rtv_str(rtv));
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }
                                            else
                                            {
                                                if (listBlackImsi.Count > 0)
                                                {
                                                    listBlackImsi.Sort();
                                                }
                                            }

                                            rtv = gDbHelperLower.bwlist_record_md5sum_get(bwType.BWTYPE_WHITE, devInfo.id, ref listWhiteImsi);
                                            if ((int)RC.SUCCESS != rtv)
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("bwlist_record_md5sum_get出错：{0}", gDbHelperLower.get_rtv_str(rtv));
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }
                                            else
                                            {
                                                if (listWhiteImsi.Count > 0)
                                                {
                                                    listWhiteImsi.Sort();
                                                }
                                            }

                                                                                       
                                            if (0 != Get_Md5_Sum(listBlackImsi, 1, ref blackimsi_md5_db))
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("Get_Md5_Sum出错");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            if (0 != Get_Md5_Sum(listWhiteImsi, 1, ref whiteimsi_md5_db))
                                            {
                                                //返回出错处理
                                                string errInfo = string.Format("Get_Md5_Sum出错");
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                                break;
                                            }

                                            if (whiteimsi_md5.Equals(whiteimsi_md5_db))
                                            {
                                                whiteimsi_md5_match = true;
                                            }
                                           
                                            info = "\r\n";
                                            info += string.Format("Fullname            = {0}\r\n", Fullname);
                                            info += string.Format("whiteimsi_md5_match = {0}\r\n", whiteimsi_md5_match);
                                            info += string.Format("whiteimsi_md5       = {0}\r\n", whiteimsi_md5);
                                            info += string.Format("whiteimsi_md5_db    = {0}\r\n", whiteimsi_md5_db);

                                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                            if (blackimsi_md5.Equals(blackimsi_md5_db))
                                            {
                                                blackimsi_md5_match = true;
                                            }
                                            
                                            info = "\r\n";
                                            info += string.Format("Fullname            = {0}\r\n", Fullname);
                                            info += string.Format("blackimsi_md5_match = {0}\r\n", blackimsi_md5_match);
                                            info += string.Format("blackimsi_md5       = {0}\r\n", blackimsi_md5);
                                            info += string.Format("blackimsi_md5_db    = {0}\r\n", blackimsi_md5_db);

                                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                            daInfo.whiteimsi_md5_match = whiteimsi_md5_match;
                                            daInfo.blackimsi_md5_match = blackimsi_md5_match;

                                            if (gDicDataAlign.ContainsKey(FullnameAlign))
                                            {
                                                gDicDataAlign[FullnameAlign] = daInfo;
                                            }
                                            else
                                            {
                                                gDicDataAlign.Add(FullnameAlign, daInfo);
                                            }

                                            #endregion

                                            #region 回复成功的ReportGenParaAck

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, 0, "成功", true, null, null);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);

                                            #endregion

                                            #region 流程处理

                                            if (gen_para_match && blackimsi_md5_match && whiteimsi_md5_match)
                                            {
                                                info = string.Format("成功,gen,black and white don't need to be aligned");

                                                //数据已经对齐，无需处理
                                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, 0, info, true, null, null);
                                                gApLower.Body.dic.Add("sys", 0);
                                                Send_Msg_2_ApCtrl_Lower(gApLower);                                         
                                            }
                                            else
                                            {
                                                //数据不对齐
                                                if (DataController.DataAlignMode == 0)
                                                {
                                                    #region 以DB为准

                                                    #region 填充SetGenParaReq头

                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.SetGenParaReq, 0, "成功", true, null, null);
                                                    gApLower.Body.dic.Remove("ReturnCode");
                                                    gApLower.Body.dic.Remove("ReturnStr");
                                                    gApLower.Body.dic.Add("sys", 0);
                                                    gApLower.Body.dic.Add("ApIsBase", DataController.DataAlignMode.ToString());                                                    

                                                    #endregion

                                                    #region 服务器上传白名单到FTP

                                                    if (!whiteimsi_md5_match)
                                                    {
                                                        string fileName = daInfo.fileNameWhiteList_Db_Base;

                                                        try
                                                        {
                                                            byte[] data = null;
                                                            if (0 == generate_ftp_byte(ref data, listWhiteImsi))
                                                            {
                                                                rtv = gFtpHelperFile.Put(fileName, data);
                                                                if (rtv != 0)
                                                                {
                                                                    //返回出错处理
                                                                    string errInfo = string.Format("Server上传对齐文件listWhiteImsi到FTP服务器出错.");
                                                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        catch (Exception e)
                                                        {
                                                            //返回出错处理
                                                            string errInfo = string.Format("Server上传对齐文件listWhiteImsi到FTP服务器出错." + e.Message + e.StackTrace);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                        gApLower.Body.dic.Add("FtpUrl_White", ftpUrl);
                                                        gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                        gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                        gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                        gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                        gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                    }

                                                    #endregion

                                                    #region 服务器上传黑名单到FTP

                                                    if (!blackimsi_md5_match)
                                                    {
                                                        string fileName = daInfo.fileNameBlackList_Db_Base;

                                                        try
                                                        {
                                                            byte[] data = null;
                                                            if (0 == generate_ftp_byte(ref data, listBlackImsi))
                                                            {
                                                                rtv = gFtpHelperFile.Put(fileName, data);
                                                                if (rtv != 0)
                                                                {
                                                                    //返回出错处理
                                                                    string errInfo = string.Format("服务器上传对齐文件listBlackImsi到FTP服务器出错.");
                                                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        catch (Exception e)
                                                        {
                                                            //返回出错处理
                                                            string errInfo = string.Format("服务器上传对齐文件listBlackImsi到FTP服务器出错." + e.Message + e.StackTrace);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        if (!whiteimsi_md5_match)
                                                        {
                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);
                                                        }
                                                        else
                                                        {
                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);

                                                            gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                            gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                            gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                            gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                            gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                        }
                                                    }

                                                    #endregion

                                                    #region 将DB中通用参数传给AP

                                                    if (!gen_para_match)
                                                    {
                                                        Init_ApGenPara(ref apGP);
                                                        rtv = gDbHelperLower.ap_general_para_record_get_by_devid(devInfo.id, ref apGP);
                                                        if (rtv != 0)
                                                        {
                                                            //返回出错处理
                                                            string errInfo = string.Format("ap_general_para_record_get_by_devid出错:") + gDbHelperLower.get_rtv_str(rtv);
                                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                                            gApLower.Body.dic.Add("sys",0);
                                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                                            break;
                                                        }

                                                        #region 填充参数

                                                        // --(1)--
                                                        if (!string.IsNullOrEmpty(apGP.mode))
                                                        {
                                                            gApLower.Body.dic.Add("mode", apGP.mode);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("mode", "");
                                                        }

                                                        // --(2)--
                                                        if (!string.IsNullOrEmpty(apGP.primaryplmn))
                                                        {
                                                            gApLower.Body.dic.Add("primaryplmn", apGP.primaryplmn);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("primaryplmn", "");
                                                        }

                                                        // --(3)--
                                                        if (!string.IsNullOrEmpty(apGP.earfcndl))
                                                        {
                                                            gApLower.Body.dic.Add("earfcndl", apGP.earfcndl);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("earfcndl", "");
                                                        }

                                                        // --(4)--
                                                        if (!string.IsNullOrEmpty(apGP.earfcnul))
                                                        {
                                                            gApLower.Body.dic.Add("earfcnul", apGP.earfcnul);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("earfcnul", "");
                                                        }

                                                        // --(5)--
                                                        // 2018-06-26
                                                        if (!string.IsNullOrEmpty(apGP.cellid))
                                                        {
                                                            gApLower.Body.dic.Add("cellid", apGP.cellid);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("cellid", "");
                                                        }

                                                        // --(6)--
                                                        if (!string.IsNullOrEmpty(apGP.pci))
                                                        {
                                                            gApLower.Body.dic.Add("pci", apGP.pci);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("pci", "");
                                                        }

                                                        // --(7)--
                                                        if (!string.IsNullOrEmpty(apGP.bandwidth))
                                                        {
                                                            gApLower.Body.dic.Add("bandwidth", apGP.bandwidth);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("bandwidth", "");
                                                        }

                                                        // --(8)--
                                                        if (!string.IsNullOrEmpty(apGP.tac))
                                                        {
                                                            gApLower.Body.dic.Add("tac", apGP.tac);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("tac", "");
                                                        }

                                                        // --(9)--
                                                        if (!string.IsNullOrEmpty(apGP.txpower))
                                                        {
                                                            gApLower.Body.dic.Add("txpower", apGP.txpower);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("txpower", "");
                                                        }

                                                        // --(10)--
                                                        if (!string.IsNullOrEmpty(apGP.periodtac))
                                                        {
                                                            gApLower.Body.dic.Add("periodtac", apGP.periodtac);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("periodtac", "");
                                                        }

                                                        // --(11)--
                                                        if (!string.IsNullOrEmpty(apGP.manualfreq))
                                                        {
                                                            gApLower.Body.dic.Add("manualfreq", apGP.manualfreq);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("manualfreq", "");
                                                        }

                                                        // --(12)--
                                                        if (!string.IsNullOrEmpty(apGP.bootMode))
                                                        {
                                                            gApLower.Body.dic.Add("bootMode", apGP.bootMode);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("bootMode", "");
                                                        }

                                                        // --(13)--
                                                        if (!string.IsNullOrEmpty(apGP.Earfcnlist))
                                                        {
                                                            gApLower.Body.dic.Add("Earfcnlist", apGP.Earfcnlist);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("Earfcnlist", "");
                                                        }

                                                        // --(14)--
                                                        if (!string.IsNullOrEmpty(apGP.Bandoffset))
                                                        {
                                                            gApLower.Body.dic.Add("Bandoffset", apGP.Bandoffset);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("Bandoffset", "");
                                                        }

                                                        // --(15)--
                                                        if (!string.IsNullOrEmpty(apGP.NTP))
                                                        {
                                                            gApLower.Body.dic.Add("NTP", apGP.NTP);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("NTP", "");
                                                        }

                                                        // --(16)--
                                                        if (!string.IsNullOrEmpty(apGP.ntppri))
                                                        {
                                                            gApLower.Body.dic.Add("ntppri", apGP.ntppri);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("ntppri", "");
                                                        }

                                                        // --(17)--
                                                        if (!string.IsNullOrEmpty(apGP.source))
                                                        {
                                                            gApLower.Body.dic.Add("source", apGP.source);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("source", "");
                                                        }

                                                        // --(18)--
                                                        if (!string.IsNullOrEmpty(apGP.ManualEnable))
                                                        {
                                                            gApLower.Body.dic.Add("ManualEnable", apGP.ManualEnable);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("ManualEnable", "");
                                                        }

                                                        // --(19)--
                                                        if (!string.IsNullOrEmpty(apGP.ManualEarfcn))
                                                        {
                                                            gApLower.Body.dic.Add("ManualEarfcn", apGP.ManualEarfcn);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("ManualEarfcn", "");
                                                        }

                                                        // --(20)--
                                                        if (!string.IsNullOrEmpty(apGP.ManualPci))
                                                        {
                                                            gApLower.Body.dic.Add("ManualPci", apGP.ManualPci);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("ManualPci", "");
                                                        }

                                                        // --(21)--
                                                        if (!string.IsNullOrEmpty(apGP.ManualBw))
                                                        {
                                                            gApLower.Body.dic.Add("ManualBw", apGP.ManualBw);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("ManualBw", "");
                                                        }

                                                        // --(22)--
                                                        if (!string.IsNullOrEmpty(apGP.gps_select))
                                                        {
                                                            gApLower.Body.dic.Add("gps_select", apGP.gps_select);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("gps_select", "");
                                                        }

                                                        // --(23)--
                                                        if (!string.IsNullOrEmpty(apGP.otherplmn))
                                                        {
                                                            gApLower.Body.dic.Add("otherplmn", apGP.otherplmn);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("otherplmn", "");
                                                        }

                                                        // --(24)--
                                                        if (!string.IsNullOrEmpty(apGP.periodFreq))
                                                        {
                                                            gApLower.Body.dic.Add("periodFreq", apGP.periodFreq);
                                                        }
                                                        else
                                                        {
                                                            gApLower.Body.dic.Add("periodFreq", "");
                                                        }

                                                        #endregion
                                                    }

                                                    #endregion

                                                    #region 发送SetGenParaReq消息给ApCtrl

                                                    //发送SetGenParaReq
                                                    //然后在SetGenParaRsp中回DataAlignOver
                                                    Send_Msg_2_ApCtrl_Lower(gApLower);                                                    

                                                    #endregion

                                                    break;

                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region 以AP为准

                                                    #region 告诉AP发白名单到FTP服务器上

                                                    if (!whiteimsi_md5_match)
                                                    {
                                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.SetGenParaReq, 0, "成功", true, null, null);
                                                        gApLower.Body.dic.Remove("ReturnCode");
                                                        gApLower.Body.dic.Remove("ReturnStr");
                                                        gApLower.Body.dic.Add("ApIsBase", DataController.DataAlignMode.ToString());

                                                        //告诉AP发文件到FTP服务器上
                                                        string fileName = daInfo.fileNameWhiteList_Ap_Base;

                                                        string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                        gApLower.Body.dic.Add("FtpUrl_White", ftpUrl);
                                                        gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                        gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                        gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                        gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                        gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                    }

                                                    #endregion

                                                    #region 告诉AP发黑名单到FTP服务器上

                                                    if (!blackimsi_md5_match)
                                                    {
                                                        if (!whiteimsi_md5_match)
                                                        {
                                                            //只需加一项
                                                            string fileName = daInfo.fileNameBlackList_Ap_Base;

                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);
                                                        }
                                                        else
                                                        {
                                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.SetGenParaReq, 0, "成功", true, null, null);
                                                            gApLower.Body.dic.Remove("ReturnCode");
                                                            gApLower.Body.dic.Remove("ReturnStr");
                                                            gApLower.Body.dic.Add("ApIsBase", DataController.DataAlignMode.ToString());

                                                            //告诉AP发文件到FTP服务器上
                                                            string fileName = daInfo.fileNameBlackList_Ap_Base;

                                                            string ftpUrl = string.Format("ftp://{0}:{1}@{2}:{3}/{4}/{5}",
                                                            DataController.StrFtpUserId,
                                                            DataController.StrFtpUserPsw,
                                                            DataController.StrFtpIpAddr,
                                                            DataController.StrFtpPort,
                                                            DataController.StrFtpUpdateDir,
                                                            fileName);

                                                            gApLower.Body.dic.Add("FtpUrl_Black", ftpUrl);
                                                            gApLower.Body.dic.Add("FtpUser", DataController.StrFtpUserId);
                                                            gApLower.Body.dic.Add("FtpPas", DataController.StrFtpUserPsw);
                                                            gApLower.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                                            gApLower.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                                            gApLower.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                                        }
                                                    }

                                                    #endregion

                                                    #region 发消息给ApCtrl

                                                    if (!whiteimsi_md5_match || !blackimsi_md5_match)
                                                    {
                                                        //发SetGenParaReq
                                                        //然后在SetGenParaRsp中回DataAlignOver
                                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                                    }

                                                    #endregion

                                                    #region 将AP通用参数更新到DB中

                                                    rv = 0;
                                                    info = "";
                                                    if (!gen_para_match)
                                                    {
                                                        //更新数据库
                                                        rtv = gDbHelperLower.ap_general_para_record_update(devInfo.id, apGP);
                                                        if (rtv == 0)
                                                        {
                                                            info = string.Format("ap_general_para_record_update成功.");
                                                        }
                                                        else
                                                        {
                                                            info = string.Format("ap_general_para_record_update失败.");
                                                        }
                                                    }

                                                    if (whiteimsi_md5_match && blackimsi_md5_match)
                                                    {
                                                        info += string.Format("\r\n以AP为准，黑白名单无需对齐,直接回DataAlignOver\r\n");
                                                  
                                                        //直接回DataAlignOver成功
                                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, rv, info, true, null, null);
                                                        Send_Msg_2_ApCtrl_Lower(gApLower);                                                      
                                                    }

                                                    #endregion

                                                    #endregion
                                                }
                                            }

                                            #endregion

                                            break;

                                            #endregion
                                        }
                                    default:
                                        {
                                            #region 出错处理

                                            //返回出错处理
                                            string errInfo = string.Format("不支持的apInnerType:{0}.", dm);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.ReportGenParaAck, -1, errInfo, true, null, null);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                            break;

                                            #endregion
                                        }
                                }

                                #endregion
                            }                            
                                  
                            break;

                            #endregion
                        }
                        case Main2ApControllerMsgType.SetGenParaRsp:
                        {
                            #region 获取信息

                            int rtv = -1;
                            int sys = 0;
                            int result = 0;

                            string Fullname = "";
                            string FullnameAlign = "";

                            string devId = "";
                            strDataAlign daInfo = new strDataAlign();

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {
                                //返回出错处理
                                string errInfo = string.Format("{0}:Fullname is NULL.", Main2ApControllerMsgType.SetGenParaRsp);

                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                gApLower.Body.dic.Add("sys",0);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }
                            else
                            {
                                Fullname = gApLower.ApInfo.Fullname;
                                if (!gDicDevFullName.ContainsKey(Fullname))
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", Fullname);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.R);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.R);

                                    Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                    gApLower.Body.dic.Add("sys", 0);
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }
                                else
                                {
                                    if (gApLower.Body.dic.ContainsKey("sys"))
                                    {
                                        sys = int.Parse(gApLower.Body.dic["sys"].ToString());
                                        if (sys != 0 && sys != 1)
                                        {
                                            string errInfo = string.Format("SetGenParaRsp:sys = {0},非法", sys);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.R);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.R);

                                            Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                            gApLower.Body.dic.Add("sys", sys);
                                            Send_Msg_2_ApCtrl_Lower(gApLower);
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        sys = 0;
                                    }

                                    FullnameAlign = string.Format("{0}.{1}", Fullname, sys);
                                    if (gDicDataAlign.ContainsKey(FullnameAlign))
                                    {
                                        //获取Fullname对应的数据结构
                                        daInfo = gDicDataAlign[FullnameAlign];

                                        #region 重新检查一下devId，同名覆盖时有问题

                                        if (gDicDevFullName.ContainsKey(daInfo.fullName))
                                        {
                                            // 2018-11-12
                                            devId = gDicDevFullName[daInfo.fullName].id.ToString();

                                            if (gDicDevFullName[daInfo.fullName].id != daInfo.devId)
                                            {
                                                string errInfo = "id不一致检查:\r\n";
                                                errInfo += string.Format("gDicDevFullName[{0}].id  = {1}\r\n", daInfo.fullName, gDicDevFullName[daInfo.fullName].id);
                                                errInfo += string.Format("gDicDataAlign[{0}],devId = {1}\r\n", daInfo.fullName, daInfo.devId);

                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.R);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.R);

                                                daInfo.devId = gDicDevFullName[daInfo.fullName].id;
                                            }
                                        }
                                        else
                                        {
                                            string errInfo = string.Format("{0}:在gDicDevFullName中找不到。", daInfo.fullName);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.R);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.R);
                                        }

                                        #endregion
                                    }
                                    else
                                    {
                                        string errInfo = get_debug_info() + string.Format("{0}:在gDicDataAlign中找不到。", FullnameAlign);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.R);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.R);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                        gApLower.Body.dic.Add("sys", sys);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }
                                }
                            }

                            if (gApLower.Body.dic.ContainsKey("result"))
                            {
                                result = int.Parse(gApLower.Body.dic["result"].ToString());
                            }
                            else
                            {
                                string errInfo = string.Format("SetGenParaRsp没包含result字段");                                 
                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                gApLower.Body.dic.Add("sys",daInfo.sys);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }

                            if (result != 0)
                            {
                                string errInfo = string.Format("SetGenParaRsp返回失败.");
                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                gApLower.Body.dic.Add("sys", daInfo.sys);
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }

                            #endregion

                            #region 返回处理

                            //数据不对齐
                            if (DataController.DataAlignMode == 0)
                            {
                                #region 以DB为准

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, 0, "SetGenParaRsp成功", true, null, null);
                                gApLower.Body.dic.Add("sys", daInfo.sys);
                                Send_Msg_2_ApCtrl_Lower(gApLower);

                                #endregion
                            }
                            else
                            {
                                #region 以AP为准

                                #region 白名单处理

                                if (daInfo.whiteimsi_md5_match == false)
                                {
                                    string tmp = string.Format("{0}\\tmp", Application.StartupPath);

                                    //从FTP服务器上下载文件
                                    rtv = gFtpHelperFile.Get(daInfo.fileNameWhiteList_Ap_Base, tmp, daInfo.fileNameWhiteList_Ap_Base);
                                    if (rtv != 0)
                                    {
                                        string errInfo = string.Format("从FTP服务器下载文件:{0}失败.", daInfo.fileNameWhiteList_Ap_Base);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                        gApLower.Body.dic.Add("sys", daInfo.sys);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }

                                    string info = "";
                                    List<strBwList> list = new List<strBwList>();
                                    string fileFullPath = string.Format("{0}\\{1}", tmp, daInfo.fileNameWhiteList_Ap_Base);

                                    //更新到数据库中
                                    rtv = Get_BwList_From_File(fileFullPath,bwType.BWTYPE_WHITE, ref list, ref info);
                                    if (rtv != 0)
                                    {
                                        string errInfo = string.Format("解析文件:{0}失败.", fileFullPath);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                        gApLower.Body.dic.Add("sys", daInfo.sys);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }

                                    //if (daInfo.dm == devMode.MODE_CDMA || daInfo.dm == devMode.MODE_GSM_V2)
                                    //{
                                    //    // 2018-11-06
                                    //    rtv = gDbHelperLower.gc_imsi_action_record_delete(bwType.BWTYPE_WHITE, daInfo.devId);
                                    //}
                                    //else
                                    //{
                                    //    rtv = gDbHelperLower.bwlist_record_bwflag_delete(bwType.BWTYPE_WHITE, daInfo.devId);
                                    //}

                                    // 2018-11-27
                                    rtv = gDbHelperLower.bwlist_record_bwflag_delete(bwType.BWTYPE_WHITE, daInfo.devId);

                                    if (rtv != 0)
                                    {
                                        string errInfo = "";
                                        if (daInfo.dm == devMode.MODE_CDMA || daInfo.dm == devMode.MODE_GSM_V2)
                                        {
                                            errInfo = string.Format("gc_imsi_action_record_delete失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                                        }
                                        else
                                        {
                                            errInfo = string.Format("bwlist_record_bwflag_delete失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                                        }

                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                        gApLower.Body.dic.Add("sys", daInfo.sys);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }

                                    //if (daInfo.dm == devMode.MODE_CDMA || daInfo.dm == devMode.MODE_GSM_V2)
                                    //{
                                    //    // 2018-11-06
                                    //    if (daInfo.dm == devMode.MODE_GSM_V2)
                                    //    {
                                    //        rtv = gDbHelperLower.gc_imsi_action_record_insert_batch(list, daInfo.devId,0);
                                    //    }
                                    //    else
                                    //    {
                                    //        rtv = gDbHelperLower.gc_imsi_action_record_insert_batch(list, daInfo.devId,-1);
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    // 2018-11-12
                                    //    Dictionary<string, string> dicImsiDes = new Dictionary<string, string>();
                                    //    if (gDicDevId_Imsi_Des.ContainsKey(devId))
                                    //    {
                                    //        dicImsiDes = gDicDevId_Imsi_Des[devId];
                                    //    }

                                    //    rtv = gDbHelperLower.bwlist_record_insert_batch(list, daInfo.devId,dicImsiDes);
                                    //}


                                    // 2018-11-27
                                    Dictionary<string, string> dicImsiDes = new Dictionary<string, string>();
                                    if (gDicDevId_Imsi_Des.ContainsKey(devId))
                                    {
                                        dicImsiDes = gDicDevId_Imsi_Des[devId];
                                    }

                                    rtv = gDbHelperLower.bwlist_record_insert_batch(list, daInfo.devId, dicImsiDes);

                                    if (rtv != 0)
                                    {
                                        string errInfo = "";
                                        if (daInfo.dm == devMode.MODE_CDMA || daInfo.dm == devMode.MODE_GSM_V2)
                                        {
                                            errInfo = string.Format("gc_imsi_action_record_insert_batch失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                                        }
                                        else
                                        {
                                            errInfo = string.Format("bwlist_record_insert_batch失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                                        }

                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                        gApLower.Body.dic.Add("sys", daInfo.sys);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }                                   
                                }


                                #endregion

                                #region 黑名单处理

                                if (daInfo.blackimsi_md5_match == false)
                                {
                                    string tmp = string.Format("{0}\\tmp", Application.StartupPath);

                                    //从FTP服务器上下载文件
                                    rtv = gFtpHelperFile.Get(daInfo.fileNameBlackList_Ap_Base, tmp, daInfo.fileNameBlackList_Ap_Base);
                                    if (rtv != 0)
                                    {
                                        string errInfo = string.Format("从FTP服务器下载文件:{0}失败.", daInfo.fileNameBlackList_Ap_Base);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                        gApLower.Body.dic.Add("sys", daInfo.sys);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }

                                    string info = "";
                                    List<strBwList> list = new List<strBwList>();
                                    string fileFullPath = string.Format("{0}\\{1}", tmp, daInfo.fileNameBlackList_Ap_Base);

                                    //更新到数据库中
                                    rtv = Get_BwList_From_File(fileFullPath, bwType.BWTYPE_BLACK, ref list, ref info);
                                    if (rtv != 0)
                                    {
                                        string errInfo = string.Format("解析文件:{0}失败.", fileFullPath);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                        gApLower.Body.dic.Add("sys", daInfo.sys);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }

                                    //if (daInfo.dm == devMode.MODE_CDMA || daInfo.dm == devMode.MODE_GSM_V2)
                                    //{
                                    //    // 2018-11-06
                                    //    rtv = gDbHelperLower.gc_imsi_action_record_delete(bwType.BWTYPE_BLACK, daInfo.devId);
                                    //}
                                    //else
                                    //{
                                    //    rtv = gDbHelperLower.bwlist_record_bwflag_delete(bwType.BWTYPE_BLACK, daInfo.devId);
                                    //}

                                    // 2018-11-28
                                    rtv = gDbHelperLower.bwlist_record_bwflag_delete(bwType.BWTYPE_BLACK, daInfo.devId);

                                    if (rtv != 0)
                                    {
                                        string errInfo = "";
                                        if (daInfo.dm == devMode.MODE_CDMA || daInfo.dm == devMode.MODE_GSM_V2)
                                        {
                                            errInfo = string.Format("gc_imsi_action_record_delete失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                                        }
                                        else
                                        {
                                            errInfo = string.Format("bwlist_record_bwflag_delete失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                                        }

                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                        gApLower.Body.dic.Add("sys", daInfo.sys);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }

                                    //if (daInfo.dm == devMode.MODE_CDMA || daInfo.dm == devMode.MODE_GSM_V2)
                                    //{
                                    //    // 2018-11-06
                                    //    if (daInfo.dm == devMode.MODE_GSM_V2)
                                    //    {
                                    //        rtv = gDbHelperLower.gc_imsi_action_record_insert_batch(list, daInfo.devId,0);
                                    //    }
                                    //    else
                                    //    {
                                    //        rtv = gDbHelperLower.gc_imsi_action_record_insert_batch(list, daInfo.devId, -1);
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    // 2018-11-12
                                    //    Dictionary<string, string> dicImsiDes = new Dictionary<string, string>();
                                    //    if (gDicDevId_Imsi_Des.ContainsKey(devId))
                                    //    {
                                    //        dicImsiDes = gDicDevId_Imsi_Des[devId];
                                    //    }

                                    //    rtv = gDbHelperLower.bwlist_record_insert_batch(list, daInfo.devId, dicImsiDes);
                                    //}

                                    // 2018-11-27
                                    Dictionary<string, string> dicImsiDes = new Dictionary<string, string>();
                                    if (gDicDevId_Imsi_Des.ContainsKey(devId))
                                    {
                                        dicImsiDes = gDicDevId_Imsi_Des[devId];
                                    }

                                    rtv = gDbHelperLower.bwlist_record_insert_batch(list, daInfo.devId, dicImsiDes);

                                    if (rtv != 0)
                                    {
                                        string errInfo = "";
                                        if (daInfo.dm == devMode.MODE_CDMA || daInfo.dm == devMode.MODE_GSM_V2)
                                        {
                                            errInfo = string.Format("gc_imsi_action_record_insert_batch失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                                        }
                                        else
                                        {
                                            errInfo = string.Format("bwlist_record_insert_batch失败:{0}", gDbHelperLower.get_rtv_str(rtv));
                                        }

                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, -1, errInfo, true, null, null);
                                        gApLower.Body.dic.Add("sys", daInfo.sys);
                                        Send_Msg_2_ApCtrl_Lower(gApLower);
                                        break;
                                    }                                   
                                }

                                #endregion

                                Fill_IMMS_Info(ref gApLower, Main2ApControllerMsgType.DataAlignOver, rtv, "SetGenParaRsp中:" + gDbHelperLower.get_rtv_str(rtv), true, null, null);
                                gApLower.Body.dic.Add("sys", daInfo.sys);
                                Send_Msg_2_ApCtrl_Lower(gApLower);

                                #region 重新获取gDicDevId_Imsi_Des

                                // 2018-11-12

                                if (rtv == 0)
                                {
                                    if (0 == gDbHelperUpper.domain_dictionary_info_join_imsi_des_get(ref gDicDevId_Imsi_Des))
                                    {
                                        add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                    }
                                    else
                                    {
                                        add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                    }
                                }

                                #endregion

                                #endregion
                            }

                            break;

                            #endregion
                        }
                    case ApMsgType.Update_result:
                        {
                            #region 转发结果

                            //修改消息type
                            gApLower.Body.type = AppMsgType.app_ftp_update_response;

                            //透传消息给AppController
                            Send_Msg_2_AppCtrl_Upper(gApLower);

                            break;

                            #endregion
                        }
                    case AppMsgType.app_add_bwlist_response:
                        {
                            #region 获取信息

                            string result = "";
                            strDevice devInfo = new strDevice();

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {
                                string errInfo = get_debug_info() + "Fullname is NULL.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }
                            else
                            {
                                if (!gDicDevFullName.ContainsKey(gApLower.ApInfo.Fullname))
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", gApLower.ApInfo.Fullname);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }
                                else
                                {
                                    devInfo = gDicDevFullName[gApLower.ApInfo.Fullname];
                                }
                            }


                            /*
                             *  在自学习的状态下，AP在自己添加白名单后，会持续发
                             *  app_add_bwlist_response给到上层这里，从而会
                             *  造成异常的流程处理，因此，在自学习的状态下，要忽略
                             *  这条消息。                             
                             */
                            if (devInfo.wSelfStudy.Equals("1"))
                            {
                                string errInfo = string.Format("{0}:正在自学习，忽略消息:{1}", gApLower.ApInfo.Fullname, AppMsgType.app_add_bwlist_response);
                                add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                break;
                            }

                            #endregion

                            #region 透传消息给AppCtrl

                            //转给界面
                            Send_Msg_2_AppCtrl_Upper(gApLower);

                            #endregion

                            #region 将结果反馈给处理线程
                          
                            if (gApLower.Body.dic.ContainsKey("result"))
                            {
                                if (!string.IsNullOrEmpty(gApLower.Body.dic["result"].ToString()))
                                {
                                    result = gApLower.Body.dic["result"].ToString();
                                    if (result.Equals("0"))
                                    {
                                        gBwListSetInfo.hasRsp = true;
                                        gBwListSetInfo.rspResult = true;
                                    }
                                    else
                                    {
                                        gBwListSetInfo.hasRsp = true;
                                        gBwListSetInfo.rspResult = false;
                                    }
                                }
                            }                           

                            break;
                                                      
                            #endregion                      
                        }
                    case AppMsgType.app_del_bwlist_response:
                        {
                            #region 获取信息

                            string result = "";                     
                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {
                                string errInfo = get_debug_info() + "Fullname is NULL.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gApLower, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }
                            else
                            {
                                if (!gDicDevFullName.ContainsKey(gApLower.ApInfo.Fullname))
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", gApLower.ApInfo.Fullname);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gApLower, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_ApCtrl_Lower(gApLower);
                                    break;
                                }
                            }

                            #endregion

                            #region 透传消息给AppCtrl

                            //转给界面
                            Send_Msg_2_AppCtrl_Upper(gApLower);

                            #endregion

                            #region 将结果反馈给处理线程

                            if (gApLower.Body.dic.ContainsKey("result"))
                            {
                                if (!string.IsNullOrEmpty(gApLower.Body.dic["result"].ToString()))
                                {
                                    result = gApLower.Body.dic["result"].ToString();
                                    if (result.Equals("0"))
                                    {
                                        gBwListSetInfo.hasRsp = true;
                                        gBwListSetInfo.rspResult = true;
                                    }
                                    else
                                    {
                                        gBwListSetInfo.hasRsp = true;
                                        gBwListSetInfo.rspResult = false;
                                    }
                                }
                            }

                            break;

                            #endregion                     
                        }
                    case AppMsgType.set_param_response:
                        {
                            #region 获取信息

                            string titleInfo = "";
                            string result = "";
                            string paramName = "";

                            if (gApLower.Body.dic.ContainsKey("paramName"))
                            {
                                if (!string.IsNullOrEmpty(gApLower.Body.dic["paramName"].ToString()))
                                {
                                    paramName = gApLower.Body.dic["paramName"].ToString();                                    
                                }
                            }

                            if (gApLower.Body.dic.ContainsKey("result"))
                            {
                                if (!string.IsNullOrEmpty(gApLower.Body.dic["result"].ToString()))
                                {
                                    result = gApLower.Body.dic["result"].ToString();
                                }
                            }

                            #endregion

                            #region 返回信息

                            if (paramName == "")
                            {
                                //透传消息给AppCtrlUpper
                                Send_Msg_2_AppCtrl_Upper(gApLower);
                                break;
                            }
                            else
                            {
                                if (paramName != "CFG_FULL_NAME")
                                {
                                    //透传消息给AppCtrlUpper
                                    Send_Msg_2_AppCtrl_Upper(gApLower);
                                    break;
                                }
                                else
                                {
                                    #region 处理设置全名                         
                                   
                                    if (gTimerSetFullName.TimeOutFlag == false && !string.IsNullOrEmpty(gTimerSetFullName.parentFullPathName))
                                    {
                                        #region 计时器尚未超时

                                        gTimerSetFullName.Stop();

                                        //修改消息type
                                        gApLower.Body.type = AppMsgType.app_add_device_response;
                                       
                                        if (result.Equals("0"))
                                        {                                           
                                            int affDomainId = -1;
                                            int rtv = gDbHelperLower.domain_get_id_by_nameFullPath(gTimerSetFullName.parentFullPathName, ref affDomainId);
                                            if (rtv == 0)
                                            {
                                                if (gTimerSetFullName.SameNameCover)
                                                {
                                                    // 删除同名的设备
                                                    //string errInfo = "";
                                                    //if (false == device_delete(gTimerSetFullName.parentFullPathName, gTimerSetFullName.devName, ref errInfo))
                                                    //{                                                      
                                                    //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.S);
                                                    //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.S);
                                                    //    break;
                                                    //}

                                                    //titleInfo = string.Format("删除同名的设备,SameNameCover,device_delete,成功");

                                                    // 保留同名的设备，2019-02-25   
                                                    // 即不删除
                                                    titleInfo = string.Format("保留同名的设备:{0}.{1},SameNameCover.", gTimerSetFullName.parentFullPathName, gTimerSetFullName.devName);
                                                }
                                            }
                                            else
                                            {
                                                string errInfo = string.Format("domain_get_id_by_nameFullPath出错:{0}", gDbHelperLower.get_rtv_str(rtv));
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.S);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.S);
                                                break;
                                            }

                                            if (rtv == 0)
                                            {
                                                if (gTimerSetFullName.SameNameCover)
                                                {
                                                    // 保留同名的设备，2019-02-25 
                                                    // 即不用插入
                                                }
                                                else
                                                {
                                                    rtv = gDbHelperLower.device_record_insert(affDomainId, gTimerSetFullName.devName, gTimerSetFullName.mode);
                                                }
                                            }
                                            
                                            gApLower.Body.dic = new Dictionary<string, object>();
                                            gApLower.Body.dic.Add("ReturnCode", rtv);
                                            gApLower.Body.dic.Add("ReturnStr", gDbHelperLower.get_rtv_str(rtv));

                                            //将添加设备的状态返回给界面
                                            Send_Msg_2_AppCtrl_Upper(gApLower);

                                            if (rtv == 0)
                                            {
                                                if (gTimerSetFullName.SameNameCover)
                                                {
                                                    // 保留同名的设备，2019-02-25 
                                                    titleInfo += string.Format("保留同名的设备,affDomainId:{0},devName:{1},mode:{2}.", affDomainId, gTimerSetFullName.devName, gTimerSetFullName.mode);
                                                }
                                                else
                                                {
                                                    titleInfo += string.Format("device_record_insert成功,affDomainId:{0},devName:{1},mode:{2}.", affDomainId, gTimerSetFullName.devName, gTimerSetFullName.mode);
                                                }

                                                #region 重新获取gDicDevFullName

                                                if (rtv == 0)
                                                {
                                                    if (0 == gDbHelperLower.domain_dictionary_info_join_get(ref gDicDevFullName,ref gDicDevId_Station_DevName))
                                                    {
                                                        add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);
                                                        Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);

                                                        print_dic_dev_fullname_info(titleInfo, gDicDevFullName);
                                                    }
                                                    else
                                                    {
                                                        add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                                        Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                                    }
                                                }

                                                #endregion
                                             
                                                //更新新记录
                                                rtv = gDbHelperLower.device_unknown_record_delete(gTimerSetFullName.ipAddr);
                                                if (rtv != 0)
                                                {
                                                    string errInfo = string.Format("device_unknown_record_delete出错:{0}", gDbHelperLower.get_rtv_str(rtv));
                                                    Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.S);
                                                    add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.S);
                                                }
                                                else
                                                {
                                                    #region 重新获取未指派设备

                                                    //2018-06-26
                                                    DataTable dt = new DataTable();
                                                    rtv = gDbHelperLower.device_unknown_record_entity_get(ref dt);

                                                    gAppUpper.Body.type = Main2ApControllerMsgType.app_all_device_response;
                                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                                    gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                                    gAppUpper.Body.dic.Add("ReturnStr", gDbHelperLower.get_rtv_str(rtv));
                                                    gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                                                    if (rtv == 0)
                                                    {
                                                        gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();
                                                        set_device_unknown_info_by_datatable(dt, ref gAppUpper);
                                                    }

                                                    string info = string.Format("发送app_all_device_response给AppCtrl,未指派个数{0}", dt.Rows.Count);
                                                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.S);

                                                    //发送给APP去更新未指派设备信息
                                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                                    dt.Dispose();
                                                    dt = null;

                                                    #endregion
                                                }
                                            }                                           
                                        }
                                        else
                                        {
                                            Send_Msg_2_AppCtrl_Upper(gApLower);
                                        }

                                        #endregion 
                                    }
                                    else
                                    {
                                        #region 计时器已经超时

                                        //已经在gTimerSetFullName超时中反馈给Ap了。
                                        //不再处理
                                        break;

                                        #endregion
                                    }

                                    break;

                                    #endregion
                                }
                            }

                            #endregion
                        }
                    case "gsm_para_change-No-Act-Now":
                        {
                            #region 获取信息

                            int rtv = 0;
                            string Fullname = "";
                            str_Gsm_All_Para gsmAllPara = new str_Gsm_All_Para();

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {
                                //返回出错处理
                                gApLower.Body.type = "Main2ApControllerMsgType.gsm_para_change_ack";
                                gApLower.Body.dic = new Dictionary<string, object>();
                                gApLower.Body.dic.Add("ReturnCode", -1);
                                gApLower.Body.dic.Add("ReturnStr", get_debug_info() + "Fullname is NULL.");

                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }
                            else
                            {
                                Fullname = gApLower.ApInfo.Fullname;
                            }

                            if (get_gsm_info(gApLower, ref gsmAllPara) != 0)
                            {
                                //返回出错处理
                                gApLower.Body.type = "Main2ApControllerMsgType.gsm_para_change_ack";
                                gApLower.Body.dic = new Dictionary<string, object>();
                                gApLower.Body.dic.Add("ReturnCode", -1);
                                gApLower.Body.dic.Add("ReturnStr", get_debug_info() + "获取GSM相关的参数出错.");

                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }

                            //string ipAddr = gApLower.ApInfo.IP;
                            //string name = "";               

                            //if (gApLower.ApInfo.Fullname.Contains("."))
                            //{
                            //    int i = gApLower.ApInfo.Fullname.LastIndexOf(".");
                            //    name = gApLower.ApInfo.Fullname.Substring(i + 1);                               
                            //}

                            // Fullname = Fullname + "." + gsmAllPara.sys.ToString();

                            int carry = gsmAllPara.sys;

                            #endregion

                            #region 更新数据库

                            if (!gDicDevFullName.ContainsKey(Fullname))
                            {
                                string info = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", Fullname);

                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.R);
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.R);

                                gApLower.Body.type = "Main2ApControllerMsgType.gsm_para_change_ack";
                                gApLower.Body.dic = new Dictionary<string, object>();
                                gApLower.Body.dic.Add("ReturnCode", -1);
                                gApLower.Body.dic.Add("ReturnStr", info);

                                Send_Msg_2_ApCtrl_Lower(gApLower);
                                break;
                            }
                            else
                            {
                                strDevice devInfo = gDicDevFullName[Fullname];
                                rtv = 0;

                                if (gsmAllPara.gsmSysParaFlag == true)
                                {
                                    rtv += gDbHelperLower.gsm_sys_para_record_update(carry, devInfo.id, gsmAllPara.gsmSysPara);
                                }

                                if (gsmAllPara.gsmSysOptionFlag == true)
                                {
                                    rtv += gDbHelperLower.gsm_sys_option_record_update(carry, devInfo.id, gsmAllPara.gsmSysOption);
                                }

                                if (gsmAllPara.gsmRfParaFlag == true)
                                {
                                    rtv += gDbHelperLower.gsm_rf_para_record_update(carry, devInfo.id, gsmAllPara.gsmRfPara);
                                }

                                if (gsmAllPara.gsmMsgOptionFlag == true)
                                {                                 
                                    rtv += gDbHelperLower.gsm_msg_option_insert(carry, devInfo.id, gsmAllPara.gsmMsgOption);
                                }
                            }                                                                                         

                            gApLower.Body.type = "Main2ApControllerMsgType.gsm_para_change_ack";
                            gApLower.Body.dic = new Dictionary<string, object>();
                            gApLower.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gApLower.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperLower.get_rtv_str(rtv));
                            }
                            else
                            {
                                gApLower.Body.dic.Add("ReturnStr", gDbHelperLower.get_rtv_str(rtv));
                            }

                            Send_Msg_2_ApCtrl_Lower(gApLower);                       

                            break;

                            #endregion                       
                        }
                    case AppMsgType.set_redirection_rsp:
                        {
                            #region 转发给AppController
                            
                            if (gTimerSetRedirection.TimeOutFlag == false)
                            {
                                //计时器尚未超时，关闭先
                                gTimerSetRedirection.Stop();

                                //修改消息type
                                gApLower.Body.type = AppMsgType.app_set_redirection_response;

                                //透传消息给AppController
                                Send_Msg_2_AppCtrl_Upper(gApLower);                                
                            }
                            else
                            {
                                //已经在gTimerSetRedirection超时中反馈给Ap了。
                                //不在处理
                                break;
                            }

                            #endregion          

                            #region 根据结果决定是否更新库
                     
                            string Fullname = "";
                            string result = "";

                            if (string.IsNullOrEmpty(gApLower.ApInfo.Fullname))
                            {                                
                                break;
                            }
                            else
                            {
                                Fullname = gApLower.ApInfo.Fullname;
                            }

                            if (gApLower.Body.dic.ContainsKey("result"))
                            {
                                if (!string.IsNullOrEmpty(gApLower.Body.dic["result"].ToString()))
                                {
                                    result = gApLower.Body.dic["result"].ToString();
                                }
                            }

                            if (!gDicDevFullName.ContainsKey(Fullname))
                            {                                
                                break;
                            }
                            else
                            {
                                strDevice devInfo = gDicDevFullName[Fullname];

                                if (result.Equals("0"))
                                {
                                    //保存到库中
                                    if ((int)RC.EXIST == gDbHelperLower.redirection_record_exist(int.Parse(gRedirectionInfo.category), devInfo.id))
                                    {
                                        //记录存在，只是更新
                                        gDbHelperLower.redirection_record_update(int.Parse(gRedirectionInfo.category), devInfo.id, gRedirectionInfo);
                                    }
                                    else
                                    {
                                        //记录不存在，先插入，再更新
                                        gDbHelperLower.redirection_record_insert(int.Parse(gRedirectionInfo.category), devInfo.id);
                                        gDbHelperLower.redirection_record_update(int.Parse(gRedirectionInfo.category), devInfo.id, gRedirectionInfo);
                                    }                                                                       
                                }
                            }

                            break;

                            #endregion                                                                   
                        }                    
                    default:
                        {
                            #region 透传给AppCtrlUpper

                            string info = string.Format("透传给AppCtrlUpper的消息:{0}", gApLower.Body.type);
                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.S);
                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.S);

                            //透传消息给AppCtrlUpper
                            Send_Msg_2_AppCtrl_Upper(gApLower);                                                

                            break;
                           
                            #endregion
                        }
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return rv;
        }

        #endregion

        #region 接收【界面】的消息线程
    
        /// <summary>
        /// 填充IMMS信息
        /// </summary>
        /// <param name="imms"></param>
        /// <param name="type"></param>
        /// <param name="rtvCode"></param>
        /// <param name="rtvStr"></param>
        /// <param name="ndicClear"></param>
        /// <param name="result"></param>
        /// <param name="rebootflag"></param>
        private void Fill_IMMS_Info(ref InterModuleMsgStruct imms, string type, int rtvCode, string rtvStr, bool ndicClear,string result,string rebootflag)
        {
            imms.Body.type = type;
            imms.Body.dic = new Dictionary<string, object>();
            imms.Body.dic.Add("ReturnCode", rtvCode);
            imms.Body.dic.Add("ReturnStr", rtvStr);

            // result:"0",      // 0:SUCCESS ; 1:GENERAL FAILURE;2:CONFIGURATION FAIURE OR NOT SUPPORTED
            // rebootflag:"1",	// 1—立刻reboot,2—需要reboot
            // timestamp:"xxx"  // Time in seconds when send this message, start from 00:00:00 UTC 1

            if (null != result)
            {
                imms.Body.dic.Add("result", result);
            }

            if (null != rebootflag)
            {
                imms.Body.dic.Add("rebootflag", rebootflag);
                imms.Body.dic.Add("timestamp", DateTime.Now.ToString());
            }            

            if (ndicClear)
            {
                imms.Body.n_dic = new List<Name_DIC_Struct>();
            }
        }

        private string Get_App_Info(InterModuleMsgStruct imms)
        {
            if (!string.IsNullOrEmpty(imms.AppInfo.Ip) && (imms.AppInfo.Port> 0))
            {
                return string.Format("{0}:{1}", imms.AppInfo.Ip, imms.AppInfo.Port);
            }
            else
            {
                return "";
            }
        }

        /// <summary>
        /// 用于从AppController中收消息
        /// </summary>
        /// <param name="mt"></param>
        /// <param name="mb"></param>
        public static void MessageDelegate_For_AppController(MessageType mt, MessageBody mb)
        {
            strMsgInfo msgInfo;
            msgInfo.mt = mt;
            msgInfo.mb = mb;

            //string tmp = string.Format("【收到AppCtrl的消息:{0}】:\n{1}\n",  gMsgFor_App_Controller.Count, mb.bJson);
            //Logger.Trace(LogInfoType.DEBG, tmp, "Main", LogCategory.R);
            //add_log_info(LogInfoType.DEBG, tmp, "Main", LogCategory.R);

            lock (mutex_App_Controller)
            {
                gMsgFor_App_Controller.Enqueue(msgInfo);
            }
        }

        private strMsgInfo msgInfoUpper = new strMsgInfo();

        /// <summary>
        /// 发送消息给AppController--Upper
        /// </summary>
        /// <param name="app"></param>
        private void Send_Msg_2_AppCtrl_Upper(InterModuleMsgStruct app)
        {
            msgInfoUpper.mt = MessageType.MSG_JSON;
            msgInfoUpper.mb.bJson = JsonConvert.SerializeObject(app);

            add_log_info(LogInfoType.DEBG, "Main->AppCtrl:" + msgInfoUpper.mb.bJson, "Main", LogCategory.S);
            Logger.Trace(LogInfoType.DEBG, "Main->AppCtrl:" + msgInfoUpper.mb.bJson, "Main", LogCategory.S);

            #region 检查Type，2018-08-01

            AppInnerType appInnerType;
            if ((!app.AppInfo.Ip.Equals(MsgStruct.AllDevice))
                        && (!Enum.TryParse(app.AppInfo.Type, true, out appInnerType)))
            {
                string errInfo = string.Format("app.AppInfo.Type = {0},错误的类型.", app.AppInfo.Type);
                app.Body.type = AppMsgType.general_error_result;

                app.Body.dic = new Dictionary<string, object>();
                app.Body.dic.Add("RecvType", app.Body.type);
                app.Body.dic.Add("ErrStr", errInfo);

                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.S);
                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.S);

                //Send_Msg_2_ApCtrl_Lower(app);              
                return;
            }

            #endregion

            //将消息转发给ApController
            Delegate_SendMsg_2_AppCtrl_Upper(msgInfoUpper.mt, msgInfoUpper.mb);
        }

        /// <summary>
        /// 用于接收AppController的消息线程
        /// </summary>
        /// <param name="obj"></param>
        private void thread_for_app_controller(object obj)
        {
            bool noMsg = false;
            strMsgInfo msgInfo;
          
            //DateTime startMonitor = System.DateTime.Now;
            //DateTime endedMonitor = System.DateTime.Now;
            //TimeSpan tsMonitor = endedMonitor.Subtract(startMonitor);

            /*
             * 用于修复mysql连接的空闲时间超过8小时后，MySQL自动断开该连接的问题
             * wait_timeout = 8*3600
             * 即每隔fix_for_wait_timeout的时间（秒数）就访问一下数据库
             */
            int fix_for_wait_timeout = 60; //10*60;
            int reConnCnt = 0;
            int reConnCntSts = 0;

            DateTime startTimeConn = System.DateTime.Now;
            DateTime endTimeConn = System.DateTime.Now;
            TimeSpan tsConn = endTimeConn.Subtract(startTimeConn);

            DateTime startTimeConnSts = System.DateTime.Now;
            DateTime endTimeConnSts = System.DateTime.Now;
            TimeSpan tsConnSts = endTimeConnSts.Subtract(startTimeConnSts);


            while (true)
            {
                if (noMsg)
                {
                    Thread.Sleep(100);
                }
                else
                {
                    //Thread.Sleep(1);
                }               

               
                try
                {
                    #region 防止自动断开该连接的问题

                    endTimeConn = System.DateTime.Now;
                    tsConn = endTimeConn.Subtract(startTimeConn);

                    if (tsConn.TotalSeconds >= fix_for_wait_timeout)
                    {
                        // 2018-08-09
                        re_connection_db(ref gDbHelperUpper, "gDbHelperUpper", ref reConnCnt);

                        Thread.Sleep(5);

                        if (gDbHelperUpper.MyDbConnFlag)
                        {
                            List<string> listAllTbl = new List<string>();
                            listAllTbl = gDbHelperUpper.Get_All_ColumnName("user");
                        }

                        //报到线程状态
                        write_monitor_status("AppCtrl_Status");

                        startTimeConn = System.DateTime.Now;
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    startTimeConn = System.DateTime.Now;
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }

                //try
                //{
                //    #region 防止自动断开该连接的问题

                //    endTimeConnSts = System.DateTime.Now;
                //    tsConnSts = endTimeConnSts.Subtract(startTimeConnSts);

                //    if (tsConnSts.TotalSeconds >= fix_for_wait_timeout)
                //    {
                //        // 2019-01-23
                //        re_connection_db(ref gDbHelperSts, "gDbHelperSts", ref reConnCntSts);

                //        Thread.Sleep(5);

                //        if (gDbHelperSts.MyDbConnFlag)
                //        {
                //            List<string> listAllTbl = new List<string>();
                //            listAllTbl = gDbHelperSts.Get_All_ColumnName("user");
                //        }

                //        startTimeConnSts = System.DateTime.Now;
                //    }

                //    #endregion
                //}
                //catch (Exception ee)
                //{
                //    startTimeConnSts = System.DateTime.Now;
                //    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                //    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                //    continue;
                //}

                try
                {
                    #region 取出消息

                    lock (mutex_App_Controller)
                    {
                        if (gMsgFor_App_Controller.Count <= 0)
                        {
                            noMsg = true;
                            continue;
                        }

                        string tmp = string.Format("【线程中处理AppCtrl的消息:{0}】\n", gMsgFor_App_Controller.Count);
                        Logger.Trace(LogInfoType.DEBG, tmp, "Main", LogCategory.R);
                        add_log_info(LogInfoType.DEBG, tmp, "Main", LogCategory.R);

                        //循环处理从AppController接收到的消息
                        msgInfo = gMsgFor_App_Controller.Dequeue();
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }

                try
                {
                    #region 处理消息

                    noMsg = false;
                    switch (msgInfo.mt)
                    {
                        case MessageType.MSG_JSON:
                            {
                                if (ProcessMsg_WithThreadPool)
                                {
                                    Logger.Trace(LogInfoType.DEBG, "1:RecvFromUpper:" + msgInfo.mb.bJson, "Main", LogCategory.R);                                                                   
                                    BeginInvoke(new process_app_controller_msg_delegate(process_app_controller_msg), new object[] { msgInfo.mb.bJson });
                                    Logger.Trace(LogInfoType.DEBG, "2:RecvFromUpper:" + msgInfo.mb.bJson, "Main", LogCategory.I);
                                }
                                else
                                {                                                                       
                                    process_app_controller_msg(msgInfo.mb.bJson);                                                                      
                                }

                                break;                         
                            }
                        case MessageType.MSG_STRING:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from app controller，MSG_STRING", "Main", LogCategory.R);
                                Logger.Trace(LogInfoType.DEBG, "recv from app controller，MSG_STRING", "Main", LogCategory.R);

                                break;
                            }
                        case MessageType.MSG_INT:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from app controller，MSG_INT", "Main", LogCategory.R);
                                Logger.Trace(LogInfoType.DEBG, "recv from app controller，MSG_INT", "Main", LogCategory.R);

                                break;
                            }
                        case MessageType.MSG_DOUBLE:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from app controller，MSG_DOUBLE", "Main", LogCategory.R);
                                Logger.Trace(LogInfoType.DEBG, "recv from app controller，MSG_DOUBLE", "Main", LogCategory.R);
                                break;
                            }
                        case MessageType.MSG_DATATABLE:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from app controller，MSG_DATATABLE", "Main", LogCategory.R);
                                Logger.Trace(LogInfoType.DEBG, "recv from app controller，MSG_DATATABLE", "Main", LogCategory.R);

                                break;
                            }
                        case MessageType.MSG_XML:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from app controller，MSG_XML", "Main", LogCategory.R);
                                Logger.Trace(LogInfoType.DEBG, "recv from app controller，MSG_XML", "Main", LogCategory.R);

                                break;
                            }
                        case MessageType.MSG_STATUS:
                            {
                                add_log_info(LogInfoType.DEBG, "recv from app controller，MSG_STATUS", "Main", LogCategory.R);
                                Logger.Trace(LogInfoType.DEBG, "recv from app controller，MSG_STATUS", "Main", LogCategory.R);

                                break;
                            }
                        default:
                            {
                                add_log_info(LogInfoType.WARN, "recv from app controller，MSG_ERROR", "Main", LogCategory.R);
                                Logger.Trace(LogInfoType.WARN, "recv from app controller，MSG_ERROR", "Main", LogCategory.R);
                                break;
                            }
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }
            }
        }
        
        //private void process_app_controller_msg(object strBody)
        //{
        //    try
        //    {
        //        this.process_app_controller_msg((string)strBody);
        //    }
        //    catch (Exception ee)
        //    {
        //        add_log_info(LogInfoType.EROR, "process_app_controller_msg is Error." + ee.Message.ToString(), "Main", LogCategory.R);
        //        Logger.Trace(LogInfoType.EROR, "process_app_controller_msg is Error." + ee.Message.ToString(), "Main", LogCategory.R);
        //    }
        //
        //    AppThreadExecFlag = true;
        //}

        /// <summary>
        /// 检查ID集合的合法性，返回分离后的list
        /// </summary>
        /// <param name="idSet">2:50</param>
        /// <param name="curPageInx">当前页指向</param>
        /// <param name="totalPages">总页数</param>
        /// <returns>
        /// true  ： 合法
        /// false ： 非法
        /// </returns>
        private bool check_and_get_page_info(string idSet,ref int curPageInx,ref int totalPages)
        {
            if (string.IsNullOrEmpty(idSet))
            {
                Logger.Trace(LogInfoType.EROR, "idSet参数为空", "Main", LogCategory.I);
                return false;
            }

            if (idSet.Length > 16)
            {
                Logger.Trace(LogInfoType.EROR, "idSet参数长度有误", "Main", LogCategory.I);
                return false;
            }

            curPageInx = -1;
            totalPages = -1;

            string[] s = idSet.Split(new char[] { ':' });

            if (s.Length <= 0)
            {
                return false;
            }
            else
            {
                if( s.Length < 2)
                {
                    return false;
                }           

                try
                {
                    curPageInx = UInt16.Parse(s[0]);
                    totalPages = UInt16.Parse(s[1]);
                }
                catch (Exception ee)
                {
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                    return false;
                }
            }

            if (curPageInx <= 0)
            {
                return false;
            }

            if(totalPages >= curPageInx)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool IsValidFileName(string fileName)
        {
            System.Diagnostics.Debug.Assert(fileName != null);
            bool isValid = true;
            try
            {
                FileInfo fileInfor = new FileInfo(fileName);
                if (fileInfor.Name != fileName)
                {
                    isValid = false;
                }
            }
            catch (ArgumentException ee)
            {         
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "FTP", LogCategory.I);
                isValid = false;
            }
            catch (PathTooLongException ee)
            {
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "FTP", LogCategory.I);
                isValid = false;
            }
            catch (NotSupportedException ee)
            {
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "FTP", LogCategory.I);
                isValid = false;
            }
            catch (Exception ee)
            {
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "FTP", LogCategory.I);
                isValid = true;
            }

            return isValid;
        }

        private bool history_record_query_flag = true;

        private bool statistics_record_query_flag = true;

        private bool resident_record_query_flag = true;

        private bool collision_record_query_flag = true;

        private bool accompany_record_query_flag = true;
        
        private bool path_record_query_flag = true;              

        /// <summary>
        /// 历史记录搜索处理
        /// </summary>
        /// <param name="imms"></param>
        //private void history_record_process_delegate_fun(InterModuleMsgStruct imms)
        private void history_record_process_delegate_fun(object immsObj)
        {
            InterModuleMsgStruct imms = (InterModuleMsgStruct)immsObj;

            if (history_record_query_flag == false)
            {
                string errInfo = string.Format("上次的历史搜索尚未完成，请稍后再试试！");
                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);

                Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                Send_Msg_2_AppCtrl_Upper(imms);
                return;
            }

            #region 获取信息

            string appId = Get_App_Info(imms);

            //   "bwListApplyTo":"device",                                    //历史记录搜索适用于那种类型，device，domain或者none
            //   "deviceFullPathName":"设备.深圳.福田.中心广场.西北监控.电信TDD",   //bwListApplyTo为device时起作用
            //   "domainFullPathName":"设备.深圳.福田",                         //bwListApplyTo为domain时起作用
            //   "imsi":"46000xxxxxxxxx",                                     //指定要搜索的IMSI号，不指定是为""
            //   "imei":"46000xxxxxxxxx",                                     //指定要搜索的IMEI号，不指定是为""
            //   "bwFlag":"设备.深圳.福田",                                     //black,white,other,不指定是为""
            //   "timeStart":"2018-05-23 12:34:56",                           //开始时间，不指定是为""
            //   "timeEnded":"2018-05-29 12:34:56",                           //结束时间，不指定是为""
            //   "RmDupFlag":"0",                                             //是否对设备名称和SN去重标志，0:不去重，1:去重

            int rtv = -1;
            strDevice devInfo = new strDevice();

            string bwListApplyTo = "";
            string deviceFullPathName = "";
            string domainFullPathName = "";
            string imsi = "";
            string imei = "";
            string bwFlag = "";
            string timeStart = "";
            string timeEnded = "";
            string RmDupFlag = "";

            strCaptureQuery cq = new strCaptureQuery();

            if (imms.Body.dic.ContainsKey("imsi"))
            {
                if (!string.IsNullOrEmpty(imms.Body.dic["imsi"].ToString()))
                {
                    imsi = imms.Body.dic["imsi"].ToString();
                    cq.imsi = imsi;
                }
            }

            if (imms.Body.dic.ContainsKey("imei"))
            {
                if (!string.IsNullOrEmpty(imms.Body.dic["imei"].ToString()))
                {
                    imei = imms.Body.dic["imei"].ToString();
                    cq.imei = imei;
                }
            }

            if (imms.Body.dic.ContainsKey("bwFlag"))
            {
                if (!string.IsNullOrEmpty(imms.Body.dic["bwFlag"].ToString()))
                {
                    bwFlag = imms.Body.dic["bwFlag"].ToString();
                    if (bwFlag != "black" && bwFlag != "white" && bwFlag != "other")
                    {
                        string errInfo = get_debug_info() + string.Format("bwFlag的类型不对");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }

                    if (bwFlag == "black")
                    {
                        cq.bwFlag = bwType.BWTYPE_BLACK;
                    }
                    else if (bwFlag == "white")
                    {
                        cq.bwFlag = bwType.BWTYPE_WHITE;
                    }
                    else
                    {
                        cq.bwFlag = bwType.BWTYPE_OTHER;
                    }
                }
                else
                {
                    cq.bwFlag = bwType.BWTYPE_ALL;
                }
            }

            if (imms.Body.dic.ContainsKey("timeStart"))
            {
                if (!string.IsNullOrEmpty(imms.Body.dic["timeStart"].ToString()))
                {
                    timeStart = imms.Body.dic["timeStart"].ToString();
                    try
                    {
                        DateTime.Parse(timeStart);
                        cq.timeStart = timeStart;
                    }
                    catch
                    {
                        string errInfo = get_debug_info() + string.Format("timeStart的格式不对");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                }
                else
                {
                    cq.timeStart = "1900-01-01 12:34:56";
                }
            }
            else
            {
                cq.timeStart = "1900-01-01 12:34:56";
            }

            if (imms.Body.dic.ContainsKey("timeEnded"))
            {
                if (!string.IsNullOrEmpty(imms.Body.dic["timeEnded"].ToString()))
                {
                    timeEnded = imms.Body.dic["timeEnded"].ToString();
                    try
                    {
                        DateTime.Parse(timeEnded);
                        cq.timeEnded = timeEnded;

                        if (string.Compare(cq.timeStart, cq.timeEnded) > 0)
                        {
                            string errInfo = get_debug_info() + string.Format("timeStart大于timeEnded.");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    catch
                    {
                        string errInfo = get_debug_info() + string.Format("timeEnded的格式不对");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                }
                else
                {
                    cq.timeEnded = "2918-06-05 12:34:56";
                }
            }
            else
            {
                cq.timeEnded = "2918-06-05 12:34:56";
            }

            if (imms.Body.dic.ContainsKey("RmDupFlag"))
            {
                if (!string.IsNullOrEmpty(imms.Body.dic["RmDupFlag"].ToString()))
                {
                    RmDupFlag = imms.Body.dic["RmDupFlag"].ToString();
                    if (RmDupFlag != "0" && RmDupFlag != "1")
                    {
                        string errInfo = get_debug_info() + string.Format("RmDupFlag的类型不对");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                    cq.RmDupFlag = int.Parse(RmDupFlag);
                }
                else
                {
                    RmDupFlag = "0";
                }
            }

            if (imms.Body.dic.ContainsKey("bwListApplyTo"))
            {
                bwListApplyTo = imms.Body.dic["bwListApplyTo"].ToString();
            }

            if (imms.Body.dic.ContainsKey("deviceFullPathName"))
            {
                deviceFullPathName = imms.Body.dic["deviceFullPathName"].ToString();
            }

            if (imms.Body.dic.ContainsKey("domainFullPathName"))
            {
                domainFullPathName = imms.Body.dic["domainFullPathName"].ToString();
            }

            if (bwListApplyTo == "device")
            {
                if (!gDicDevFullName.ContainsKey(deviceFullPathName))
                {
                    string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", deviceFullPathName);
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }
                else
                {
                    devInfo = gDicDevFullName[deviceFullPathName];
                    cq.affDeviceId = devInfo.id;
                }
            }
            else if (bwListApplyTo == "domain")
            {
                if ((int)RC.NO_EXIST == gDbHelperUpper.domain_record_exist(domainFullPathName))
                {
                    string errInfo = get_debug_info() + domainFullPathName + ":记录不存在";
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }
            }
            else if (bwListApplyTo == "none")
            {
                //
                cq.affDeviceId = -1;
            }
            else
            {
                string errInfo = get_debug_info() + "bwListApplyTo必须为device,domain或者none.";
                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                Fill_IMMS_Info(ref imms, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                Send_Msg_2_AppCtrl_Upper(imms);
                return;
            }


            #endregion

            #region 返回消息            

            if (string.IsNullOrEmpty(appId))
            {
                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                Send_Msg_2_AppCtrl_Upper(imms);
                return;
            }

            history_record_query_flag = false;

            if (bwListApplyTo == "device" || bwListApplyTo == "none")
            {
                #region 设备的处理 

                if (gDicCaptureQueryInfo.ContainsKey(appId))
                {
                    string info = string.Format("gDicCaptureQueryInfo.Count = {0},appId = {1}存在,现在进行清除.", gDicCaptureQueryInfo.Count, appId);
                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                    gDicCaptureQueryInfo[appId].dt.Dispose();           
                    gDicCaptureQueryInfo.Remove(appId);
                }
          
                strCaptureQueryInfo qi = new strCaptureQueryInfo();
                qi.dt = new DataTable();

                Stopwatch sw = new Stopwatch();
                sw.Start();
                                      
                rtv = gDbHelperUpper.capture_record_entity_query(ref qi.dt, cq,gDicDevId_Imsi_Des,gDicDevId_Station_DevName);
                if (rtv == 0)
                {
                    qi.totalRecords = qi.dt.Rows.Count;
                    qi.totalPages = (int)Math.Ceiling((double)qi.dt.Rows.Count / DataController.RecordsOfPageSize);
                    qi.pageSize = DataController.RecordsOfPageSize;
                }

                sw.Stop();
                TimeSpan ts2 = sw.Elapsed;

                qi.queryTime = (int)Math.Ceiling(ts2.TotalMilliseconds);

                //添加App对应的黑白名单查询条件和结果
                gDicCaptureQueryInfo.Add(appId, qi);

                if (rtv != (int)RC.SUCCESS)
                {
                    Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    history_record_query_flag = true;
                    return;
                }
                else
                {
                    string pageInfo = "";
                    if (gDicCaptureQueryInfo[appId].dt.Rows.Count == 0)
                    {
                        pageInfo = "0:0";
                    }
                    else
                    {
                        pageInfo = string.Format("1:{0}", Math.Ceiling((double)gDicCaptureQueryInfo[appId].dt.Rows.Count / DataController.RecordsOfPageSize));
                    }

                    int firstPageSize = 0;
                    if (gDicCaptureQueryInfo[appId].dt.Rows.Count > DataController.RecordsOfPageSize)
                    {
                        firstPageSize = DataController.RecordsOfPageSize;
                    }
                    else
                    {
                        firstPageSize = gDicCaptureQueryInfo[appId].dt.Rows.Count;
                    }

                    #region 取出各条记录

                    //     "n_dic":[         
                    //      {
                    //         "name":"1",
                    //         "dic":{
                    //         "imsi":"46000123456788",       //imsi
                    //         "imei":"46000123456789",       //imei
                    //         "name":"电信TDD",               //名称
                    //         "tmsi":"xxxxxxx",              //TMSI
                    //         "bsPwr":"-20",                 //bsPwr
                    //         "time":"2018-05-24 18:58:50",  //时间信息
                    //         "bwFlag":"black",              //黑白名单类型，black,white或者other
                    //         "sn":"EN16110123456789",       //SN号     
                    //         "des":"imsi对应的别名"           //2018-09-06新增
                    //       }                    

                    Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    imms.Body.dic.Add("TotalRecords", gDicCaptureQueryInfo[appId].totalRecords.ToString());
                    imms.Body.dic.Add("CurPageIndex", pageInfo);
                    imms.Body.dic.Add("PageSize", gDicCaptureQueryInfo[appId].pageSize.ToString());
                    imms.Body.dic.Add("queryTime", gDicCaptureQueryInfo[appId].queryTime.ToString()+"ms");

                    for (int inx = 0; inx < firstPageSize; inx++)
                    {
                        DataRow dr = gDicCaptureQueryInfo[appId].dt.Rows[inx];

                        Name_DIC_Struct ndic = new Name_DIC_Struct();
                        ndic.name = (inx + 1).ToString();

                        //(1)
                        if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                        {
                            ndic.dic.Add("imsi", "null");
                        }
                        else
                        {
                            ndic.dic.Add("imsi", dr["imsi"].ToString());
                        }

                        //(2)
                        if (string.IsNullOrEmpty(dr["imei"].ToString()))
                        {
                            ndic.dic.Add("imei", "null");
                        }
                        else
                        {
                            ndic.dic.Add("imei", dr["imei"].ToString());
                        }

                        //(3)
                        if (string.IsNullOrEmpty(dr["name"].ToString()))
                        {
                            ndic.dic.Add("name", "null");
                        }
                        else
                        {
                            ndic.dic.Add("name", dr["name"].ToString());
                        }

                        //(4)
                        if (string.IsNullOrEmpty(dr["tmsi"].ToString()))
                        {
                            ndic.dic.Add("tmsi", "null");
                        }
                        else
                        {
                            ndic.dic.Add("tmsi", dr["tmsi"].ToString());
                        }

                        //(5)
                        if (string.IsNullOrEmpty(dr["bsPwr"].ToString()))
                        {
                            ndic.dic.Add("bsPwr", "null");
                        }
                        else
                        {
                            ndic.dic.Add("bsPwr", dr["bsPwr"].ToString());
                        }

                        //(6)
                        if (string.IsNullOrEmpty(dr["time"].ToString()))
                        {
                            ndic.dic.Add("time", "null");
                        }
                        else
                        {
                            ndic.dic.Add("time", dr["time"].ToString());
                        }

                        //(7)
                        if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                        {
                            ndic.dic.Add("bwFlag", "bwFlag");
                        }
                        else
                        {
                            ndic.dic.Add("bwFlag", dr["bwFlag"].ToString());
                        }

                        //(9)
                        if (string.IsNullOrEmpty(dr["sn"].ToString()))
                        {
                            ndic.dic.Add("sn", "");
                        }
                        else
                        {
                            ndic.dic.Add("sn", dr["sn"].ToString());
                        }

                        //(9) 2018-09-06
                        if (string.IsNullOrEmpty(dr["des"].ToString()))
                        {
                            ndic.dic.Add("des", "");
                        }
                        else
                        {
                            ndic.dic.Add("des", dr["des"].ToString());
                        }

                        imms.Body.n_dic.Add(ndic);
                    }

                    #endregion
                }

                #endregion
            }
            else if (bwListApplyTo == "domain")
            {
                #region 域的处理

                //历史记录关联到域                                

                //获取一个节点下所有站点下所有设备Id的列表
                rtv = gDbHelperUpper.domain_record_device_id_list_get(domainFullPathName, ref cq.listAffDeviceId);
                if (rtv != (int)RC.SUCCESS)
                {
                    Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    history_record_query_flag = true;
                    return;
                }

                if (gDicCaptureQueryInfo.ContainsKey(appId))
                {
                    string info = string.Format("gDicCaptureQueryInfo.Count = {0},appId = {1}存在,现在进行清除.", gDicCaptureQueryInfo.Count, appId);
                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                    gDicCaptureQueryInfo[appId].dt.Dispose();
                    gDicCaptureQueryInfo.Remove(appId);
                }

     
                strCaptureQueryInfo qi = new strCaptureQueryInfo();
                qi.dt = new DataTable();

                Stopwatch sw = new Stopwatch();
                sw.Start();
                                      
                rtv = gDbHelperUpper.capture_record_entity_query(ref qi.dt, cq, gDicDevId_Imsi_Des, gDicDevId_Station_DevName);
                if (rtv == 0)
                {
                    qi.totalRecords = qi.dt.Rows.Count;
                    qi.totalPages = (int)Math.Ceiling((double)qi.dt.Rows.Count / DataController.RecordsOfPageSize);
                    qi.pageSize = DataController.RecordsOfPageSize;
                }

                sw.Stop();
                TimeSpan ts2 = sw.Elapsed;

                qi.queryTime = (int)Math.Ceiling(ts2.TotalMilliseconds);

                //string info = string.Format("capture_record_entity_query总共花费:{0}ms", Math.Ceiling(ts2.TotalMilliseconds));
                //add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                //Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);


                //添加App对应的黑白名单查询条件和结果
                gDicCaptureQueryInfo.Add(appId, qi);
       

                if (rtv != (int)RC.SUCCESS)
                {
                    Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    history_record_query_flag = true;
                    return;
                }
                else
                {
                    string pageInfo = "";
                    if (gDicCaptureQueryInfo[appId].dt.Rows.Count == 0)
                    {
                        pageInfo = "0:0";
                    }
                    else
                    {
                        pageInfo = string.Format("1:{0}", Math.Ceiling((double)gDicCaptureQueryInfo[appId].dt.Rows.Count / DataController.RecordsOfPageSize));
                    }

                    int firstPageSize = 0;
                    if (gDicCaptureQueryInfo[appId].dt.Rows.Count > DataController.RecordsOfPageSize)
                    {
                        firstPageSize = DataController.RecordsOfPageSize;
                    }
                    else
                    {
                        firstPageSize = gDicCaptureQueryInfo[appId].dt.Rows.Count;
                    }

                    #region 取出各条记录

                    //         "imsi":"46000123456788",       //imsi
                    //         "imei":"46000123456789",       //imei
                    //         "name":"电信TDD",               //名称
                    //         "time":"2018-05-24 18:58:50",  //时间信息
                    //         "bwFlag":"black",              //黑白名单类型，black,white或者other
                    //         "sn":"EN16110123456789",       //SN号    

                    Fill_IMMS_Info(ref imms, AppMsgType.app_history_record_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    imms.Body.dic.Add("TotalRecords", gDicCaptureQueryInfo[appId].totalRecords.ToString());
                    imms.Body.dic.Add("CurPageIndex", pageInfo);
                    imms.Body.dic.Add("PageSize", gDicCaptureQueryInfo[appId].pageSize.ToString());
                    imms.Body.dic.Add("queryTime", gDicCaptureQueryInfo[appId].queryTime.ToString() + "ms");

                    for (int inx = 0; inx < firstPageSize; inx++)
                    {
                        DataRow dr = gDicCaptureQueryInfo[appId].dt.Rows[inx];

                        Name_DIC_Struct ndic = new Name_DIC_Struct();
                        ndic.name = (inx + 1).ToString();

                        //(1)
                        if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                        {
                            ndic.dic.Add("imsi", "null");
                        }
                        else
                        {
                            ndic.dic.Add("imsi", dr["imsi"].ToString());
                        }

                        //(2)
                        if (string.IsNullOrEmpty(dr["imei"].ToString()))
                        {
                            ndic.dic.Add("imei", "null");
                        }
                        else
                        {
                            ndic.dic.Add("imei", dr["imei"].ToString());
                        }

                        //(3)
                        if (string.IsNullOrEmpty(dr["name"].ToString()))
                        {
                            ndic.dic.Add("name", "null");
                        }
                        else
                        {
                            ndic.dic.Add("name", dr["name"].ToString());
                        }

                        //(4)
                        if (string.IsNullOrEmpty(dr["tmsi"].ToString()))
                        {
                            ndic.dic.Add("tmsi", "null");
                        }
                        else
                        {
                            ndic.dic.Add("tmsi", dr["tmsi"].ToString());
                        }

                        //(5)
                        if (string.IsNullOrEmpty(dr["bsPwr"].ToString()))
                        {
                            ndic.dic.Add("bsPwr", "null");
                        }
                        else
                        {
                            ndic.dic.Add("bsPwr", dr["bsPwr"].ToString());
                        }

                        //(6)
                        if (string.IsNullOrEmpty(dr["time"].ToString()))
                        {
                            ndic.dic.Add("time", "null");
                        }
                        else
                        {
                            ndic.dic.Add("time", dr["time"].ToString());
                        }

                        //(7)
                        if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                        {
                            ndic.dic.Add("bwFlag", "bwFlag");
                        }
                        else
                        {
                            ndic.dic.Add("bwFlag", dr["bwFlag"].ToString());
                        }

                        //(9)
                        if (string.IsNullOrEmpty(dr["sn"].ToString()))
                        {
                            ndic.dic.Add("sn", "");
                        }
                        else
                        {
                            ndic.dic.Add("sn", dr["sn"].ToString());
                        }

                        //(9) 2018-09-06
                        if (string.IsNullOrEmpty(dr["des"].ToString()))
                        {
                            ndic.dic.Add("des", "");
                        }
                        else
                        {
                            ndic.dic.Add("des", dr["des"].ToString());
                        }

                        imms.Body.n_dic.Add(ndic);
                    }

                    #endregion
                }

                #endregion
            }

            history_record_query_flag = true;
            Send_Msg_2_AppCtrl_Upper(imms);
            return;

            #endregion
        }

        /// <summary>
        /// 统计记录的处理
        /// </summary>
        /// <param name="imms"></param>
        //private void statistics_record_process_delegate_fun(InterModuleMsgStruct imms)
        private void statistics_record_process_delegate_fun(object immsObj)        
        {
            string errInfo = "";
            InterModuleMsgStruct imms = (InterModuleMsgStruct)immsObj;

            if (statistics_record_query_flag == false)
            {
                errInfo = string.Format("上次的统计处理尚未完成，请稍后再试试！");
                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);

                Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                Send_Msg_2_AppCtrl_Upper(imms);
                return;
            }

            try
            {
                #region 获取信息                

                //   "timeStart":"2018-05-23 12:34:56",                      //开始时间，不指定是为""
                //   "timeEnded":"2018-05-29 12:34:56",                      //结束时间，不指定是为""
                //   "deviceCount":"3",                                      //设备列表个数
                //   "deviceFullPathName1":"设备.深圳.西北监控.电信TDD1",        //设备1的全路径   
                //   "deviceFullPathName2":"设备.深圳.西北监控.电信TDD2",        //设备2的全路径   
                //   "deviceFullPathName3":"设备.深圳.西北监控.电信TDD3",        //设备3的全路径   
                //   "bwFlag":"black",                                       //用户类型，black,white,other,不指定是为""
                //   "operators":"移动",                                      //运营商，移动，联通，电信,不指定是为""                                             //是否对设备名称和SN去重标志，0:不去重，1:去重

                int rtv = -1;
                int queryTime = -1;

                string timeStart = "";
                string timeEnded = "";

                string deviceCount = "";
                string bwFlag = "";
                string operators = "";
                string deviceFullPathName = "";

                strCaptureQuery cq = new strCaptureQuery();
                cq.listAffDeviceId = new List<int>();

                if (imms.Body.dic.ContainsKey("timeStart"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["timeStart"].ToString()))
                    {
                        timeStart = imms.Body.dic["timeStart"].ToString();
                        try
                        {
                            DateTime.Parse(timeStart);
                            cq.timeStart = timeStart;
                        }
                        catch
                        {
                            errInfo = get_debug_info() + string.Format("timeStart的格式不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        cq.timeStart = "1900-01-01 12:34:56";
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含timeStart字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }

                if (imms.Body.dic.ContainsKey("timeEnded"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["timeEnded"].ToString()))
                    {
                        timeEnded = imms.Body.dic["timeEnded"].ToString();
                        try
                        {
                            DateTime.Parse(timeEnded);
                            cq.timeEnded = timeEnded;

                            if (string.Compare(cq.timeStart, cq.timeEnded) > 0)
                            {
                                errInfo = get_debug_info() + string.Format("timeStart大于timeEnded.");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(imms);
                                return;
                            }
                        }
                        catch
                        {
                            errInfo = get_debug_info() + string.Format("timeEnded的格式不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        cq.timeEnded = "2918-12-26 12:34:56";
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含timeEnded字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }


                if (imms.Body.dic.ContainsKey("bwFlag"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["bwFlag"].ToString()))
                    {
                        bwFlag = imms.Body.dic["bwFlag"].ToString();
                        if (bwFlag != "black" && bwFlag != "white" && bwFlag != "other")
                        {
                            errInfo = get_debug_info() + string.Format("bwFlag的类型不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }

                        if (bwFlag == "black")
                        {
                            cq.bwFlag = bwType.BWTYPE_BLACK;
                        }
                        else if (bwFlag == "white")
                        {
                            cq.bwFlag = bwType.BWTYPE_WHITE;
                        }
                        else
                        {
                            cq.bwFlag = bwType.BWTYPE_OTHER;
                        }
                    }
                    else
                    {
                        cq.bwFlag = bwType.BWTYPE_ALL;
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含bwFlag字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }


                if (imms.Body.dic.ContainsKey("deviceCount"))
                {
                    deviceCount = imms.Body.dic["deviceCount"].ToString();

                    try
                    {
                        UInt16 cnt = UInt16.Parse(deviceCount);
                        for (int i = 1; i <= cnt; i++)
                        {
                            deviceFullPathName = string.Format("deviceFullPathName{0}", i);
                            if (imms.Body.dic.ContainsKey(deviceFullPathName))
                            {
                                deviceFullPathName = imms.Body.dic[deviceFullPathName].ToString();
                                if (!gDicDevFullName.ContainsKey(deviceFullPathName))
                                {
                                    errInfo = get_debug_info() + string.Format("找不到设备:{0}", deviceFullPathName);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(imms);
                                    return;
                                }

                                cq.listAffDeviceId.Add(gDicDevFullName[deviceFullPathName].id);
                            }
                            else
                            {
                                errInfo = get_debug_info() + string.Format("没包含字段:{0}", deviceFullPathName);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(imms);
                                return;
                            }
                        }

                        if (cq.listAffDeviceId.Count <= 0)
                        {
                            errInfo = get_debug_info() + string.Format("没获取到任何设备.");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    catch
                    {
                        errInfo = get_debug_info() + string.Format("deviceCount的格式不对");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含deviceCount字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }


                if (imms.Body.dic.ContainsKey("operators"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["operators"].ToString()))
                    {
                        operators = imms.Body.dic["operators"].ToString();
                        if (operators != "移动" && operators != "联通" && operators != "电信")
                        {
                            errInfo = get_debug_info() + string.Format("operators的类型不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }                        
                    }

                    cq.operators = operators;
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含operators字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }

                #endregion

                #region 返回消息            

                statistics_record_query_flag = false;

                Stopwatch sw = new Stopwatch();
                sw.Start();

                List<string> lstImsi = new List<string>();

                //rtv = gDbHelperSts.capture_record_entity_query(cq, ref lstImsi);
                rtv = gDbHelperUpper.capture_record_entity_query(cq, ref lstImsi);
                
                sw.Stop();
                TimeSpan ts2 = sw.Elapsed;

                queryTime = (int)Math.Ceiling(ts2.TotalMilliseconds);

                if (rtv != (int)RC.SUCCESS)
                {
                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    statistics_record_query_flag = true;
                    return;
                }
                else
                {
                    //    "ReturnCode": 返回码：0,成功；其它值为失败
                    //    "ReturnStr": 失败原因值。ReturnCode不为0时有意义
                    //    "ImsiTotal":"10000",       //IMSI总个数(没有去重)
                    //    "ImsiTotalRmDup":"9000",   //IMSI总个数(已经去重)
                    //    "queryTime":"123"          //查询时间，单位毫秒                    

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_statistics_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                    imms.Body.dic.Add("ImsiTotal", lstImsi.Count.ToString());

                    lstImsi = lstImsi.Distinct().ToList();
                    imms.Body.dic.Add("ImsiTotalRmDup", lstImsi.Count.ToString());
                    imms.Body.dic.Add("queryTime", queryTime.ToString() + "ms");
                }

                statistics_record_query_flag = true;
                Send_Msg_2_AppCtrl_Upper(imms);
                return;

                #endregion
            }
            catch (Exception ee)
            {
                statistics_record_query_flag = true;
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return;
            }
        }

        /// <summary>
        /// 统计记录的处理
        /// </summary>
        /// <param name="imms"></param>
        //private void path_record_process_delegate_fun(InterModuleMsgStruct imms)
        private void path_record_process_delegate_fun(object immsObj)
        {
            string errInfo = "";
            InterModuleMsgStruct imms = (InterModuleMsgStruct)immsObj;

            if (path_record_query_flag == false)
            {
                errInfo = string.Format("上次的轨迹处理尚未完成，请稍后再试试！");
                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);

                Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, -1, errInfo, true, null, null);
                Send_Msg_2_AppCtrl_Upper(imms);
                return;
            }

            try
            {
                #region 获取信息     

                //   "timeStart":"2018-05-23 12:34:56",        //开始时间，不指定是为""
                //   "timeEnded":"2018-05-29 12:34:56",        //结束时间，不指定是为""
                //   "imsi":"46000xxxxxxxxx",                  //指定要进行轨迹统计的IMSI号                                          //是否对设备名称和SN去重标志，0:不去重，1:去重

                int rtv = -1;
                int queryTime = -1;

                string timeStart = "";
                string timeEnded = "";
                string imsi = "";
                string WarnInfo = "";
                string tmp = "";

                strCaptureQuery cq = new strCaptureQuery();             

                if (imms.Body.dic.ContainsKey("timeStart"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["timeStart"].ToString()))
                    {
                        timeStart = imms.Body.dic["timeStart"].ToString();
                        try
                        {
                            DateTime.Parse(timeStart);
                            cq.timeStart = timeStart;
                        }
                        catch
                        {
                            errInfo = get_debug_info() + string.Format("timeStart的格式不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        cq.timeStart = "1900-01-01 12:34:56";
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含timeStart字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }

                if (imms.Body.dic.ContainsKey("timeEnded"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["timeEnded"].ToString()))
                    {
                        timeEnded = imms.Body.dic["timeEnded"].ToString();
                        try
                        {
                            DateTime.Parse(timeEnded);
                            cq.timeEnded = timeEnded;

                            if (string.Compare(cq.timeStart, cq.timeEnded) > 0)
                            {
                                errInfo = get_debug_info() + string.Format("timeStart大于timeEnded.");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(imms);
                                return;
                            }
                        }
                        catch
                        {
                            errInfo = get_debug_info() + string.Format("timeEnded的格式不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        cq.timeEnded = "2918-12-26 12:34:56";
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含timeEnded字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }


                if (imms.Body.dic.ContainsKey("imsi"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["imsi"].ToString()))
                    {
                        imsi = imms.Body.dic["imsi"].ToString();
                    }

                    if (imsi == "" || imsi.Length != 15)
                    {
                        errInfo = get_debug_info() + string.Format("imsi = {0},imsi字段长度不对.", imsi);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }

                    cq.imsi = imsi;
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含imsi字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }


                #endregion

                #region 返回消息            

                path_record_query_flag = false;

                Stopwatch sw = new Stopwatch();
                sw.Start();

                List<strJWD> lstJWD = new List<strJWD>();
                //rtv = gDbHelperSts.capture_record_entity_query(cq, ref lstJWD);
                rtv = gDbHelperUpper.capture_record_entity_query(cq, ref lstJWD);                

                sw.Stop();
                TimeSpan ts2 = sw.Elapsed;
                queryTime = (int)Math.Ceiling(ts2.TotalMilliseconds);

                if (rtv != (int)RC.SUCCESS)
                {
                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    path_record_query_flag = true;
                    return;
                }
                else
                {
                    //    "ReturnCode": 返回码：0,成功；其它值为失败
                    //    "ReturnStr": 失败原因值。ReturnCode不为0时有意义
                    //    "WarnInfo": "警告信息"                  //警告信息
                    //    "queryTime":"123ms"                    //查询时间，单位毫秒 
                    //    "stationCount":"3",                    //抓取到该IMSI的站点个数
                    //
                    //    "nameFullPath1":"设备.深圳.西北监控1",    //站点1的全名
                    //    "longitude1":"114.06667",              //站点1的经度
                    //    "latitude1":"22.61667",                //站点1的纬度
                    //
                    //    "nameFullPath2":"设备.深圳.西北监控1",    //站点2的全名
                    //    "longitude2":"114.06667",              //站点2的经度
                    //    "latitude2":"22.61667",                //站点2的纬度
                    //
                    //    "nameFullPath3":"设备.深圳.西北监控1",    //站点3的全名
                    //    "longitude3":"114.06667",              //站点3的经度
                    //    "latitude3":"22.61667",                //站点4的纬度          

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_imsi_path_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    imms.Body.dic.Add("queryTime", queryTime.ToString() + "ms");
                    imms.Body.dic.Add("stationCount", lstJWD.Count.ToString());

                    WarnInfo = "";
                    for(int i =0;i < lstJWD.Count;i++)
                    {                       
                        tmp = string.Format("nameFullPath{0}",i+1);
                        imms.Body.dic.Add(tmp, lstJWD[i].nameFullPath);

                        tmp = string.Format("longitude{0}", i + 1);
                        imms.Body.dic.Add(tmp, lstJWD[i].longitude);

                        tmp = string.Format("latitude{0}", i + 1);
                        imms.Body.dic.Add(tmp, lstJWD[i].latitude);

                        if (string.IsNullOrEmpty(lstJWD[i].longitude) || string.IsNullOrEmpty(lstJWD[i].latitude))
                        {
                            WarnInfo += string.Format("站点:{0},经纬度尚未配置.\r\n", lstJWD[i].nameFullPath);                           
                        }
                    }

                    imms.Body.dic.Add("WarnInfo", WarnInfo);
                }

                path_record_query_flag = true;
                Send_Msg_2_AppCtrl_Upper(imms);
                return;

                #endregion
            }
            catch (Exception ee)
            {
                statistics_record_query_flag = true;
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return;
            }
        }

        /// <summary>
        /// 通过大段和小段列表计算常驻人口名单
        /// </summary>
        /// <param name="lstBigImsi">大段的IMSI列表</param>
        /// <param name="lstLstSmall">小段的IMSI列表</param>
        /// <param name="lstResident">返回的常驻人口名单</param>
        /// <returns>
        /// 0 ： 成功
        /// -1： 失败
        /// </returns>
        public int resident_record_compute(List<string> lstBigImsi,List<List<string>> lstLstSmall,ref List<string> lstResident)
        {
            int smallZeroCnt = 0;
            int residentOkCnt = 0;
            int residentNoCnt = 0;
            double tmp;

            if (lstBigImsi.Count == 0 || lstLstSmall.Count == 0)
            {
                lstResident = new List<string>();
                return 0;
            }

            for (int i = 0; i < lstLstSmall.Count; i++)
            {
                if (lstLstSmall[i].Count == 0)
                {
                    smallZeroCnt++;
                }
            }

            // 小段数组为非0的个数所占的比例
            // 小于阈值的话，那么肯定没有常驻人口了
            tmp = (double)(lstLstSmall.Count - smallZeroCnt) / lstLstSmall.Count;
            if (tmp < DataController.ImsiThresholdValue)
            {
                lstResident = new List<string>();
                return 0;
            }

            lstResident = new List<string>();
            foreach (string imsi in lstBigImsi)
            {
                residentOkCnt = 0;
                residentNoCnt = 0;
                foreach (List<string> lst in lstLstSmall)
                {
                    if (lst.Contains(imsi))
                    {
                        residentOkCnt++;
                        if (((double)residentOkCnt / lstLstSmall.Count) >= DataController.ImsiThresholdValue)
                        {
                            break;
                        }
                    }
                    else
                    {
                        residentNoCnt++;
                        if (((double)(lstLstSmall.Count - residentNoCnt) / lstLstSmall.Count) < DataController.ImsiThresholdValue)
                        {
                            break;
                        }
                    }
                }

                tmp = (double)residentOkCnt / lstLstSmall.Count;
                if (tmp >= DataController.ImsiThresholdValue)
                {
                    lstResident.Add(imsi);
                }
            }

            return 0;
        }

        /// <summary>
        /// 常驻人口的处理
        /// </summary>
        /// <param name="imms"></param>
        //private void resident_record_process_delegate_fun(InterModuleMsgStruct imms)
        private void resident_record_process_delegate_fun(object immsObj)        
        {
            string errInfo = "";

            InterModuleMsgStruct imms = (InterModuleMsgStruct)immsObj;

            if (resident_record_query_flag == false)
            {
                errInfo = string.Format("上次的常驻人口处理尚未完成，请稍后再试试！");
                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);

                Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                Send_Msg_2_AppCtrl_Upper(imms);
                return;
            }

            try
            {
                #region 获取信息     

                //   "timeStart":"2018-05-23 12:34:56",                  //开始时间，以天为粒度
                //   "timeEnded":"2018-05-29 12:34:56",                  //结束时间，范围为[2,30]
                //   "deviceFullPathName":"设备.深圳.西北监控.电信TDD",      //设备的全路径                                         //是否对设备名称和SN去重标志，0:不去重，1:去重

                int rtv = -1;
                int queryTime = -1;

                string timeStart = "";
                string timeEnded = "";

                DateTime dt1;
                DateTime dt2;

                string deviceFullPathName = "";

                strCaptureQuery cq = new strCaptureQuery();
                cq.listAffDeviceId = new List<int>();
                cq.operators = "";
                cq.bwFlag = bwType.BWTYPE_ALL;

                if (imms.Body.dic.ContainsKey("timeStart"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["timeStart"].ToString()))
                    {
                        timeStart = imms.Body.dic["timeStart"].ToString();
                        try
                        {
                            dt1 = DateTime.Parse(timeStart);
                            cq.timeStart = timeStart;
                        }
                        catch
                        {
                            errInfo = get_debug_info() + string.Format("timeStart的格式不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        errInfo = get_debug_info() + string.Format("timeStart不能为空");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含timeStart字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }

                if (imms.Body.dic.ContainsKey("timeEnded"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["timeEnded"].ToString()))
                    {
                        timeEnded = imms.Body.dic["timeEnded"].ToString();
                        try
                        {
                            dt2 = DateTime.Parse(timeEnded);
                            cq.timeEnded = timeEnded;

                            if (string.Compare(cq.timeStart, cq.timeEnded) > 0)
                            {
                                errInfo = get_debug_info() + string.Format("timeStart大于timeEnded.");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(imms);
                                return;
                            }

                            TimeSpan ts = dt2.Subtract(dt1);
                            if (ts.TotalHours <= 24 || ts.TotalHours > 30 * 24)
                            {
                                errInfo = get_debug_info() + string.Format("ts.TotalHours = {0},请设置时间跨度为(1,30)天.", ts.TotalHours);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(imms);
                                return;
                            }
                        }
                        catch
                        {
                            errInfo = get_debug_info() + string.Format("timeEnded的格式不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        errInfo = get_debug_info() + string.Format("timeEnded不能为空");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含timeEnded字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }


                if (imms.Body.dic.ContainsKey("deviceFullPathName"))
                {
                    deviceFullPathName = imms.Body.dic["deviceFullPathName"].ToString();
                    if (!gDicDevFullName.ContainsKey(deviceFullPathName))
                    {
                        errInfo = get_debug_info() + string.Format("找不到设备:{0}", deviceFullPathName);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }

                    cq.listAffDeviceId.Add(gDicDevFullName[deviceFullPathName].id);
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含deviceFullPathName字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }

                #endregion

                #region 返回消息            

                resident_record_query_flag = false;

                Stopwatch sw = new Stopwatch();
                sw.Start();

                List<string> lstBigImsi = new List<string>();
                List<List<string>> lstLstSmall = new List<List<string>>();

                //rtv = gDbHelperUpper.capture_record_entity_query_old(cq, ref lstBigImsi,ref lstLstSmall);
                rtv = gDbHelperUpper.capture_record_entity_query(cq, ref lstBigImsi, ref lstLstSmall);

                sw.Stop();
                TimeSpan ts2 = sw.Elapsed;

                queryTime = (int)Math.Ceiling(ts2.TotalMilliseconds);

                if (rtv != (int)RC.SUCCESS)
                {
                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    resident_record_query_flag = true;
                    return;
                }
                else
                {
                    //    "ReturnCode": 返回码：0,成功；其它值为失败
                    //    "ReturnStr": 失败原因值。ReturnCode不为0时有意义
                    //    "queryTime1":"123ms"         //查询时间，单位毫秒 
                    //    "queryTime2":"1230ms"        //计算时间，单位毫秒 
                    //    "imsiTotal":"1000",          //IMSI的总个数 -- 2019-01-28
                    //    "imsiCount":"3",             //常驻IMSI个数
                    //    "imsi1":"46000xxxxxxxxx",    //第1个IMSI
                    //    "imsi2":"46000xxxxxxxxx",    //第2个IMSI
                    //    "imsi3":"46000xxxxxxxxx",    //第3个IMSI           

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_resident_imsi_list_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                    List<string> lstResident = new List<string>();

                    sw.Restart();
                    resident_record_compute(lstBigImsi, lstLstSmall, ref lstResident);
                    sw.Stop();
                    ts2 = sw.Elapsed;
                    
                    imms.Body.dic.Add("queryTime1", queryTime.ToString() + "ms");

                    queryTime = (int)Math.Ceiling(ts2.TotalMilliseconds);
                    imms.Body.dic.Add("queryTime2", queryTime.ToString() + "ms");

                    imms.Body.dic.Add("imsiTotal", lstBigImsi.Count.ToString());
                    imms.Body.dic.Add("imsiCount", lstResident.Count.ToString());

                    if (lstResident.Count > 0)
                    {
                        for (int i = 0; i < lstResident.Count; i++)
                        {
                            imms.Body.dic.Add(string.Format("imsi{0}",i+1), lstResident[i]);
                        }
                    }                                 
                }

                resident_record_query_flag = true;
                Send_Msg_2_AppCtrl_Upper(imms);
                return;

                #endregion
            }
            catch (Exception ee)
            {
                resident_record_query_flag = true;
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return;
            }
        }

        /// <summary>
        /// 通过各个条件获取碰撞名单
        /// </summary>
        /// <param name="lstImsi1">条件1的IMSI列表</param>
        /// <param name="lstImsi2">条件2的IMSI列表</param>
        /// <param name="lstCollision">碰撞名单</param>
        /// <returns>
        /// 0 ： 成功
        /// -1： 失败
        /// </returns>
        public int collision_record_compute(List<string> lstImsi1, List<string> lstImsi2, ref List<string> lstCollision)
        {
            if (lstImsi1.Count == 0 || lstImsi2.Count == 0)
            {
                lstCollision = new List<string>();
                return 0;
            }

            lstCollision = new List<string>();
            foreach (string imsi in lstImsi1)
            {
                if (lstImsi2.Contains(imsi))
                {
                    lstCollision.Add(imsi);
                }
            }

            return 0;
        }

        /// <summary>
        /// 通过各个条件获取碰撞名单
        /// </summary>
        /// <param name="lstImsi1">条件1的IMSI列表</param>
        /// <param name="lstImsi2">条件2的IMSI列表</param>
        /// <param name="lstImsi3">条件3的IMSI列表</param>
        /// <param name="lstCollision">碰撞名单</param>
        /// <returns>
        /// 0 ： 成功
        /// -1： 失败
        /// </returns>
        public int collision_record_compute(List<string> lstImsi1, List<string> lstImsi2, List<string> lstImsi3, ref List<string> lstCollision)
        {
            if (lstImsi1.Count == 0 || lstImsi2.Count == 0 || lstImsi3.Count == 0)
            {
                lstCollision = new List<string>();
                return 0;
            }

            lstCollision = new List<string>();

            foreach (string imsi in lstImsi1)
            {
                if (lstImsi2.Contains(imsi) && lstImsi3.Contains(imsi))
                {
                    lstCollision.Add(imsi);
                }
            }

            return 0;
        }

        /// <summary>
        /// 通过各个条件获取碰撞名单
        /// </summary>
        /// <param name="lstImsi1">条件1的IMSI列表</param>
        /// <param name="lstImsi2">条件2的IMSI列表</param>
        /// <param name="lstImsi3">条件3的IMSI列表</param>
        /// <param name="lstImsi4">条件4的IMSI列表</param>
        /// <param name="lstCollision">碰撞名单</param>
        /// <returns>
        /// 0 ： 成功
        /// -1： 失败
        /// </returns>
        public int collision_record_compute(List<string> lstImsi1, List<string> lstImsi2, List<string> lstImsi3, List<string> lstImsi4, ref List<string> lstCollision)
        {
            if (lstImsi1.Count == 0 || lstImsi2.Count == 0 || lstImsi3.Count == 0 || lstImsi4.Count == 0)
            {
                lstCollision = new List<string>();
                return 0;
            }

            lstCollision = new List<string>();

            foreach (string imsi in lstImsi1)
            {
                if (lstImsi2.Contains(imsi) && lstImsi3.Contains(imsi) && lstImsi4.Contains(imsi))
                {
                    lstCollision.Add(imsi);
                }
            }

            return 0;
        }

        /// <summary>
        /// 通过各个条件获取碰撞名单
        /// </summary>
        /// <param name="lstlstIMSI">所有组的IMSI列表</param>
        /// <param name="lstCollision">碰撞名单</param>
        /// <returns>
        /// 0 ： 成功
        /// -1： 失败
        /// </returns>
        public int collision_record_compute(List<List<string>> lstlstIMSI, ref List<string> lstCollision)
        {
            if (lstlstIMSI.Count == 0 || lstlstIMSI.Count < 2)
            {
                lstCollision = new List<string>();
                return 0;
            }

            lstCollision = new List<string>();

            int inx = 0;
            int min = lstlstIMSI[0].Count;
            for (int i = 1; i < lstlstIMSI.Count; i++)
            {
                if (lstlstIMSI[i].Count < min)
                {
                    min = lstlstIMSI[i].Count;
                    inx = i;
                }
            }

            bool flag = true;
            List<string> lstMin = new List<string>();
            lstMin = lstlstIMSI[inx];

            foreach (string imsi in lstMin)
            {
                flag = true;
                for (int i = 0; i < lstlstIMSI.Count; i++)
                {
                    if (i != inx)
                    {
                        if (!lstlstIMSI[i].Contains(imsi))
                        {
                            flag = false;
                            break;
                        }
                    }
                }

                if (flag == true)
                {
                    lstCollision.Add(imsi);
                }
            }

            return 0;
        }

        /// <summary>
        /// 碰撞处理
        /// </summary>
        /// <param name="imms"></param>
        //private void collision_record_process_delegate_fun(InterModuleMsgStruct imms)
        private void collision_record_process_delegate_fun(object immsObj)
        {
            string errInfo = "";
            InterModuleMsgStruct imms = (InterModuleMsgStruct)immsObj;

            if (collision_record_query_flag == false)
            {
                errInfo = string.Format("上次的碰撞处理尚未完成，请稍后再试试！");
                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);

                Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                Send_Msg_2_AppCtrl_Upper(imms);
                return;
            }

            try
            {
                #region 获取信息     

                //   "groupCount":"4",                                   //条件组的个数，范围为[2,8]组
                //   "timeStart1":"2018-05-23 12:34:56",                 //开始时间1
                //   "timeEnded1":"2018-05-29 12:34:56",                 //结束时间1       
                //   "deviceFullPathName1":"设备.深圳.西北监控.电信TDD1",    //设备1的全路径   
                //
                //   "timeStart2":"2018-05-23 12:34:56",                 //开始时间2
                //   "timeEnded2":"2018-05-29 12:34:56",                 //结束时间2      
                //   "deviceFullPathName2":"设备.深圳.西北监控.电信TDD2",    //设备2的全路径
                //
                //   "timeStart3":"2018-05-23 12:34:56",                 //开始时间3
                //   "timeEnded3":"2018-05-29 12:34:56",                 //结束时间3     
                //   "deviceFullPathName3":"设备.深圳.西北监控.电信TDD3",    //设备3的全路径
                //
                //   "timeStart4":"2018-05-23 12:34:56",                 //开始时间4
                //   "timeEnded4":"2018-05-29 12:34:56",                 //结束时间4    
                //   "deviceFullPathName4":"设备.深圳.西北监控.电信TDD4",    //设备4的全路径      

                int rtv = -1;
                int queryTime1 = -1;
                int queryTime2 = -1;

                string groupCount = "";
                int groupCountInt = -1;

                string timeStart = "";
                string timeEnded = "";
                string deviceFullPathName = "";
                
                DateTime dt1;
                DateTime dt2;
              
                List<strCaptureQuery> lstCQ = new List<strCaptureQuery>();

                //获取组的数量
                if (imms.Body.dic.ContainsKey("groupCount"))
                {
                    groupCount = imms.Body.dic["groupCount"].ToString();
                    try
                    {
                        groupCountInt = int.Parse(groupCount);
                        if (groupCountInt < 2 || groupCountInt > 8)
                        {
                            errInfo = get_debug_info() + string.Format("groupCount={0},必须为[2,8]", groupCount);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    catch (Exception ex)
                    {
                        errInfo = ex.Message + get_debug_info() + string.Format("groupCount={0},非法", groupCount);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }                   
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含groupCount字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }

                //获取每一组的信息
                for (int i = 1; i <= groupCountInt; i++)
                {
                    timeStart = string.Format("timeStart{0}", i);
                    timeEnded = string.Format("timeEnded{0}", i);
                    deviceFullPathName = string.Format("deviceFullPathName{0}", i);

                    strCaptureQuery cq = new strCaptureQuery();
                    cq.listAffDeviceId = new List<int>();
                    cq.operators = "";
                    cq.bwFlag = bwType.BWTYPE_ALL;

                    #region groupCountx字段信息的获取

                    if (imms.Body.dic.ContainsKey(timeStart))
                    {
                        if (!string.IsNullOrEmpty(imms.Body.dic[timeStart].ToString()))
                        {
                            timeStart = imms.Body.dic[timeStart].ToString();
                            try
                            {
                                dt1 = DateTime.Parse(timeStart);
                                cq.timeStart = timeStart;
                            }
                            catch
                            {
                                errInfo = get_debug_info() + string.Format("timeStart{0}的格式不对", i);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(imms);
                                return;
                            }
                        }
                        else
                        {
                            errInfo = get_debug_info() + string.Format("timeStart{0}不能为空", i);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        errInfo = get_debug_info() + string.Format("没包含timeStart{0}字段", i);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }

                    if (imms.Body.dic.ContainsKey(timeEnded))
                    {
                        if (!string.IsNullOrEmpty(imms.Body.dic[timeEnded].ToString()))
                        {
                            timeEnded = imms.Body.dic[timeEnded].ToString();
                            try
                            {
                                dt2 = DateTime.Parse(timeEnded);
                                cq.timeEnded = timeEnded;

                                if (string.Compare(cq.timeStart, cq.timeEnded) > 0)
                                {
                                    errInfo = get_debug_info() + string.Format("timeStart{0}大于timeEnded{0}.",i);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(imms);
                                    return;
                                }
                            }
                            catch
                            {
                                errInfo = get_debug_info() + string.Format("timeEnded{0}的格式不对",i);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(imms);
                                return;
                            }
                        }
                        else
                        {
                            errInfo = get_debug_info() + string.Format("timeEnded{0}不能为空",i);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        errInfo = get_debug_info() + string.Format("没包含timeEnded{0}字段",i);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }


                    if (imms.Body.dic.ContainsKey(deviceFullPathName))
                    {
                        deviceFullPathName = imms.Body.dic[deviceFullPathName].ToString();
                        if (!gDicDevFullName.ContainsKey(deviceFullPathName))
                        {
                            errInfo = get_debug_info() + string.Format("找不到设备:{0}", deviceFullPathName);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }

                        cq.listAffDeviceId.Add(gDicDevFullName[deviceFullPathName].id);
                    }
                    else
                    {
                        errInfo = get_debug_info() + string.Format("没包含deviceFullPathName{0}字段",i);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }

                    #endregion

                    lstCQ.Add(cq);
                }         

                #endregion

                #region 返回消息            

                collision_record_query_flag = false;

                Stopwatch sw = new Stopwatch();
                sw.Start();

                List<List<string>> lstlstIMSI = new List<List<string>>();

                //获取每一组的IMSI列表
                for (int i = 0;i < lstCQ.Count;i++)
                {
                    List<string> lst = new List<string>();

                    //rtv = gDbHelperSts.capture_record_entity_query(lstCQ[i], ref lst);
                    rtv = gDbHelperUpper.capture_record_entity_query(lstCQ[i], ref lst);
                    
                    if (rtv != (int)RC.SUCCESS)
                    {
                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        collision_record_query_flag = true;
                        return;
                    }
                    else
                    {
                        lst = lst.Distinct().ToList();
                        lstlstIMSI.Add(lst);
                    }
                }               

                sw.Stop();
                TimeSpan ts2 = sw.Elapsed;
                queryTime1 = (int)Math.Ceiling(ts2.TotalMilliseconds);

                //    "ReturnCode": 返回码：0,成功；其它值为失败
                //    "ReturnStr": 失败原因值。ReturnCode不为0时有意义
                //    "queryTime1":"123ms"         //查询时间，单位毫秒 
                //    "queryTime2":"1230ms"        //计算时间，单位毫秒 
                //    "imsiCount":"3",             //碰撞IMSI个数
                //    "imsi1":"46000xxxxxxxxx",    //第1个IMSI
                //    "imsi2":"46000xxxxxxxxx",    //第2个IMSI
                //    "imsi3":"46000xxxxxxxxx",    //第3个IMSI        

                Fill_IMMS_Info(ref imms, AppMsgType.app_get_collision_imsi_list_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                List<string> lstCollision = new List<string>();

                sw.Restart();

                collision_record_compute(lstlstIMSI,ref lstCollision);                
                           
                sw.Stop();
                ts2 = sw.Elapsed;
                queryTime2 = (int)Math.Ceiling(ts2.TotalMilliseconds);

                imms.Body.dic.Add("imsiCount", lstCollision.Count.ToString());
                imms.Body.dic.Add("queryTime1", queryTime1.ToString() + "ms");
                imms.Body.dic.Add("queryTime2", queryTime2.ToString() + "ms");
                              
                if (lstCollision.Count > 0)
                {
                    for (int i = 0; i < lstCollision.Count; i++)
                    {
                        imms.Body.dic.Add(string.Format("imsi{0}", i + 1), lstCollision[i]);
                    }
                }

                collision_record_query_flag = true;
                Send_Msg_2_AppCtrl_Upper(imms);
                return;

                #endregion
            }
            catch (Exception ee)
            {
                resident_record_query_flag = true;
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return;
            }
        }

        /// <summary>
        /// 通过各个条件判断是否为伴随
        /// </summary>
        /// <param name="lstImsi1">条件1的IMSI列表</param>
        /// <param name="lstImsi2">条件2的IMSI列表</param>
        /// <param name="imsi">伴随名单</param>
        /// <returns>
        /// 0 ： 是伴随名单
        /// -1： 非伴随名单
        /// </returns>
        public int accompany_record_compute(List<string> lstImsi1, List<string> lstImsi2, string imsi)
        {
            int accompanyCnt = 0;
            double tmp = 0.0;           

            if (lstImsi1.Contains(imsi))
            {
                accompanyCnt++;
            }

            if (lstImsi2.Contains(imsi))
            {
                accompanyCnt++;
            }

            tmp = (double)accompanyCnt / 2;
            if (tmp > DataController.ImsiThresholdValue)
            {
                return 0;
            }
            else
            {
                return -1;
            }
        }

        /// <summary>
        /// 通过各个条件判断是否为伴随
        /// </summary>
        /// <param name="lstImsi1">条件1的IMSI列表</param>
        /// <param name="lstImsi2">条件2的IMSI列表</param>
        /// <param name="lstImsi3">条件3的IMSI列表</param>
        /// <param name="imsi">伴随名单</param>
        /// <returns>
        /// 0 ： 是伴随名单
        /// -1： 非伴随名单
        /// </returns>
        public int accompany_record_compute(List<string> lstImsi1, List<string> lstImsi2, List<string> lstImsi3, string imsi)
        {
            int accompanyCnt = 0;
            double tmp = 0.0;

            if (lstImsi1.Contains(imsi))
            {
                accompanyCnt++;
            }

            if (lstImsi2.Contains(imsi))
            {
                accompanyCnt++;
            }

            if (lstImsi3.Contains(imsi))
            {
                accompanyCnt++;
            }

            tmp = (double)accompanyCnt / 3;
            if (tmp > DataController.ImsiThresholdValue)
            {
                return 0;
            }
            else
            {
                return -1;
            }
        }

        /// <summary>
        /// 通过各个条件判断是否为伴随
        /// </summary>
        /// <param name="lstImsi1">条件1的IMSI列表</param>
        /// <param name="lstImsi2">条件2的IMSI列表</param>
        /// <param name="lstImsi3">条件3的IMSI列表</param>
        /// <param name="lstImsi4">条件4的IMSI列表</param>
        /// <param name="imsi">伴随名单</param>
        /// <returns>
        /// 0 ： 是伴随名单
        /// -1： 非伴随名单
        /// </returns>
        public int accompany_record_compute(List<string> lstImsi1, List<string> lstImsi2, List<string> lstImsi3, List<string> lstImsi4, string imsi)
        {
            int accompanyCnt = 0;
            double tmp = 0.0;

            if (lstImsi1.Contains(imsi))
            {
                accompanyCnt++;
            }

            if (lstImsi2.Contains(imsi))
            {
                accompanyCnt++;
            }

            if (lstImsi3.Contains(imsi))
            {
                accompanyCnt++;
            }

            if (lstImsi4.Contains(imsi))
            {
                accompanyCnt++;
            }

            tmp = (double)accompanyCnt / 4;
            if (tmp > DataController.ImsiThresholdValue)
            {
                return 0;
            }
            else
            {
                return -1;
            }
        }

        /// <summary>
        /// 通过大段和小段列表计算常驻人口名单
        /// </summary>
        /// <param name="lstBigImsi">大段的IMSI列表</param>
        /// <param name="lstLstSmall">小段的IMSI列表</param>
        /// <param name="lstAccompany">返回的伴随名单</param>
        /// <returns>
        /// 0 ： 成功
        /// -1： 失败
        /// </returns>
        public int accompany_record_compute(List<string> lstBigImsi, List<List<string>> lstLstSmall, ref List<string> lstAccompany)
        {
            int accompanyOkCnt = 0;
            int accompanyNoCnt = 0;
            double tmp;

            if (lstBigImsi.Count == 0 || lstLstSmall.Count == 0)
            {
                lstAccompany = new List<string>();
                return 0;
            }

            lstAccompany = new List<string>();
            foreach (string imsi in lstBigImsi)
            {
                accompanyOkCnt = 0;
                accompanyNoCnt = 0;
                foreach (List<string> lst in lstLstSmall)
                {
                    if (lst.Contains(imsi))
                    {
                        accompanyOkCnt++;
                        if (((double)accompanyOkCnt / lstLstSmall.Count) >= DataController.ImsiThresholdValue)
                        {
                            break;
                        }
                    }
                    else
                    {
                        accompanyNoCnt++;
                        if (((double)(lstLstSmall.Count - accompanyNoCnt) / lstLstSmall.Count) < DataController.ImsiThresholdValue)
                        {
                            break;
                        }
                    }
                }

                tmp = (double)accompanyOkCnt / lstLstSmall.Count;
                if (tmp >= DataController.ImsiThresholdValue)
                {
                    lstAccompany.Add(imsi);
                }
            }

            return 0;
        }

        /// <summary>
        /// 计算两个时间的差值（分钟数）
        /// </summary>
        /// <param name="dt1"></param>
        /// <param name="dt2"></param>
        /// <returns></returns>
        private int MinuteDiff(DateTime dt1, DateTime dt2)
        {   
            try
            {
                TimeSpan ts1 = new TimeSpan(dt1.Ticks);
                TimeSpan ts2 = new TimeSpan(dt2.Ticks);
                TimeSpan ts = ts1.Subtract(ts2).Duration();

                return (int)ts.TotalMinutes;
            }
            catch(Exception ex)
            {
                string errInfo = "MinuteDiff" + ex.Message;
                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                return -1;
            }       
        }        

        /// <summary>
        /// 伴随处理
        /// </summary>
        /// <param name="imms"></param>
        //private void accompany_record_process_delegate_fun(InterModuleMsgStruct imms)
        private void accompany_record_process_delegate_fun(object immsObj)
        {
            string errInfo = "";
            InterModuleMsgStruct imms = (InterModuleMsgStruct)immsObj;

            if (accompany_record_query_flag == false)
            {
                errInfo = string.Format("上次的伴随处理尚未完成，请稍后再试试！");
                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);

                Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                Send_Msg_2_AppCtrl_Upper(imms);
                return;
            }

            try
            {
                #region 获取信息     

                //   "imsi":"46000xxxxxxxxx",                                //指定的IMSI
                //   "timeStart":"2018-05-23 12:34:56",                      //开始时间
                //   "timeEnded":"2018-05-29 12:34:56",                      //结束时间,范围最大7天
                //   "timeWindow":"10",                                      //时间窗口，10分钟

                int rtv = -1;
                int queryTime1 = -1;
                int queryTime2 = -1;

                string imsi = "";
                string timeStart = "";
                string timeEnded = "";

                string timeWindow = "";
                int timeWindowInt = -1;

                DateTime dt1;
                DateTime dt2;

                strCaptureQuery cq = new strCaptureQuery();
                cq.listAffDeviceId = new List<int>();

                cq.operators = "";
                cq.bwFlag = bwType.BWTYPE_ALL;

                if (imms.Body.dic.ContainsKey("timeWindow"))
                {
                    timeWindow = imms.Body.dic["timeWindow"].ToString();
                    try
                    {
                        timeWindowInt = int.Parse(timeWindow);
                    }
                    catch (Exception ex)
                    {
                        errInfo = ex.Message + get_debug_info() + string.Format("timeWindow={0},非法", timeWindow);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含deviceCountt字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }


                if (imms.Body.dic.ContainsKey("imsi"))
                {
                    imsi = imms.Body.dic["imsi"].ToString();
                    if (imsi.Length != 15)
                    {
                        errInfo = get_debug_info() + string.Format("imsi.Lentdh={0},非法", imsi.Length);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }

                    cq.imsi = imsi;
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含imsi字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }

                if (imms.Body.dic.ContainsKey("timeStart"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["timeStart"].ToString()))
                    {
                        timeStart = imms.Body.dic["timeStart"].ToString();
                        try
                        {
                            dt1 = DateTime.Parse(timeStart);
                            cq.timeStart = timeStart;
                        }
                        catch
                        {
                            errInfo = get_debug_info() + string.Format("timeStart的格式不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        errInfo = get_debug_info() + string.Format("timeStart不能为空");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含timeStart字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }

                if (imms.Body.dic.ContainsKey("timeEnded"))
                {
                    if (!string.IsNullOrEmpty(imms.Body.dic["timeEnded"].ToString()))
                    {
                        timeEnded = imms.Body.dic["timeEnded"].ToString();
                        try
                        {
                            dt2 = DateTime.Parse(timeEnded);
                            cq.timeEnded = timeEnded;

                            if (string.Compare(cq.timeStart, cq.timeEnded) > 0)
                            {
                                errInfo = get_debug_info() + string.Format("timeStart大于timeEnded.");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(imms);
                                return;
                            }

                            TimeSpan ts = dt2.Subtract(dt1);
                            if (ts.TotalMinutes < timeWindowInt || ts.TotalMinutes > 7 * 24 * 60)
                            {
                                errInfo = get_debug_info() + string.Format("ts.TotalMinutes = {0},请设置时间跨度为[{1},7 * 24*60]分钟.", ts.TotalMinutes, timeWindowInt);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(imms);
                                return;
                            }
                        }
                        catch
                        {
                            errInfo = get_debug_info() + string.Format("timeEnded的格式不对");
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(imms);
                            return;
                        }
                    }
                    else
                    {
                        errInfo = get_debug_info() + string.Format("timeEnded不能为空");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                }
                else
                {
                    errInfo = get_debug_info() + string.Format("没包含timeEnded字段");
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, -1, errInfo, true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    return;
                }

                #endregion

                #region 返回消息            

                accompany_record_query_flag = false;

                Stopwatch sw = new Stopwatch();
                sw.Start();

                List<DateTime> lstDT = new List<DateTime>();
                List<DateTime> lstDateTime = new List<DateTime>();

                //rtv = gDbHelperSts.capture_record_entity_query(cq, ref lstDT);
                rtv = gDbHelperUpper.capture_record_entity_query(cq, ref lstDT);
                
                if (rtv != (int)RC.SUCCESS)
                {
                    Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                    Send_Msg_2_AppCtrl_Upper(imms);
                    accompany_record_query_flag = true;
                    return;
                }

                #region 去掉重复的点

                //DateTime dtTmp = DateTime.Parse("2019-01-23 00:00:00");

                //lstDT.Clear();
                //lstDT.Add(dtTmp);
                //lstDT.Add(dtTmp.AddMinutes(5));
                //lstDT.Add(dtTmp.AddMinutes(10));
                //lstDT.Add(dtTmp.AddMinutes(15));
                //lstDT.Add(dtTmp.AddMinutes(20));
                //lstDT.Add(dtTmp.AddMinutes(25));
                //lstDT.Add(dtTmp.AddMinutes(30));
                //lstDT.Add(dtTmp.AddMinutes(35));
                //lstDT.Add(dtTmp.AddMinutes(40));
                //lstDT.Add(dtTmp.AddMinutes(45));
                //lstDT.Add(dtTmp.AddMinutes(50));
                //lstDT.Add(dtTmp.AddMinutes(55));
                //lstDT.Add(dtTmp.AddMinutes(60));

                if (lstDT.Count >= 1)
                {
                    int inx = 0;
                    lstDateTime.Add(lstDT[0]);
                    for (int i = 1; i < lstDT.Count - 1; i++)
                    {
                        if (MinuteDiff(lstDT[i], lstDT[inx]) >= (2 * timeWindowInt))
                        {
                            /*
                             * ----------------------------
                             * 下个点 >= 2 * timeWindowInt
                             * ----------------------------
                             */
                            lstDateTime.Add(lstDT[i]);
                            inx = i;
                        }
                        else
                        {
                            /*
                             * -----------------------------
                             * 下个点 < 2 * timeWindowInt
                             * -----------------------------
                             */
                            if (MinuteDiff(lstDT[i + 1], lstDT[inx]) >= (2 * timeWindowInt))
                            {
                                lstDateTime.Add(lstDT[i]);
                                inx = i;
                            }
                        }
                    }

                    lstDateTime.Add(lstDT[lstDT.Count - 1]);
                }
                else
                {
                    lstDateTime = lstDT;
                    if (lstDateTime.Count == 0)
                    {
                        Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                        imms.Body.dic.Add("queryTime1", queryTime1.ToString() + "ms");
                        imms.Body.dic.Add("queryTime2", "0ms");
                        imms.Body.dic.Add("imsiCount", "0");
                        accompany_record_query_flag = true;
                        Send_Msg_2_AppCtrl_Upper(imms);
                        return;
                    }
                }

                #endregion

                //cq.imsi = "";
                //cq.timeStart = lstDateTime[0].AddMinutes(-timeWindowInt).ToString();
                //cq.timeEnded = lstDateTime[lstDateTime.Count -1].AddMinutes(timeWindowInt).ToString();
                //List<string> lstIMSIBig = new List<string>();

                //rtv = gDbHelperSts.capture_record_entity_query(cq, ref lstIMSIBig);
                //if (rtv != (int)RC.SUCCESS)
                //{
                //    errInfo = get_debug_info() + gDbHelperSts.get_rtv_str(rtv);
                //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                //}
                //else
                //{
                //    lstIMSIBig = lstIMSIBig.Distinct().ToList();
                //}

                List<List<string>> lstlstIMSI = new List<List<string>>();
                foreach (DateTime dt in lstDateTime)
                {
                    cq.imsi = "";
                    cq.timeStart = dt.AddMinutes(-timeWindowInt).ToString();
                    cq.timeEnded = dt.AddMinutes(timeWindowInt).ToString();

                    List<string> lstIMSI = new List<string>();

                    //rtv = gDbHelperSts.capture_record_entity_query(cq, ref lstIMSI);
                    rtv = gDbHelperUpper.capture_record_entity_query(cq, ref lstIMSI);
                    
                    if (rtv != (int)RC.SUCCESS)
                    {
                        errInfo = get_debug_info() + gDbHelperUpper.get_rtv_str(rtv);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    }
                    else
                    {
                        lstIMSI = lstIMSI.Distinct().ToList();
                        lstlstIMSI.Add(lstIMSI);
                    }
                }

                List<string> lstIMSIBig = new List<string>();
                if (lstlstIMSI.Count > 0)
                {
                    foreach (List<string> lst in lstlstIMSI)
                    {
                        for (int i = 0; i < lst.Count; i++)
                        {
                            if (!lstIMSIBig.Contains(lst[i]))
                            {
                                lstIMSIBig.Add(lst[i]);
                            }
                        }
                    }
                }

                sw.Stop();
                TimeSpan ts2 = sw.Elapsed;
                queryTime1 = (int)Math.Ceiling(ts2.TotalMilliseconds);

                //    "ReturnCode": 返回码：0,成功；其它值为失败
                //    "ReturnStr": 失败原因值。ReturnCode不为0时有意义
                //    "queryTime1":"123ms"          //查询时间，单位毫秒 
                //    "queryTime2":"1230ms"         //计算时间，单位毫秒 
                //    "imsiCount":"3",              //伴随IMSI个数
                //    "imsi1":"46000xxxxxxxxx",     //第1个IMSI
                //    "imsi2":"46000xxxxxxxxx",     //第2个IMSI
                //    "imsi3":"46000xxxxxxxxx",     //第3个IMSI

                Fill_IMMS_Info(ref imms, AppMsgType.app_get_accompany_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                sw.Restart();

                List<string> lstAccompany = new List<string>();
                accompany_record_compute(lstIMSIBig, lstlstIMSI, ref lstAccompany);

                sw.Stop();
                ts2 = sw.Elapsed;
                queryTime2 = (int)Math.Ceiling(ts2.TotalMilliseconds);

                imms.Body.dic.Add("queryTime1", queryTime1.ToString() + "ms");
                imms.Body.dic.Add("queryTime2", queryTime2.ToString() + "ms");

                if (lstAccompany.Count == 0)
                {
                    imms.Body.dic.Add("imsiCount", lstAccompany.Count.ToString());
                }
                else
                {
                    imms.Body.dic.Add("imsiCount", (lstAccompany.Count-1).ToString());
                }

                string index = "";
                int indexInt = 1;
                for (int i = 0;i < lstAccompany.Count;i++)
                {
                    if (lstAccompany[i] == imsi)
                    {
                        continue;
                    }

                    index = string.Format("imsi{0}", indexInt++);
                    imms.Body.dic.Add(index,lstAccompany[i]);
                }
                                               
                accompany_record_query_flag = true;
                Send_Msg_2_AppCtrl_Upper(imms);
                return;

                #endregion
            }
            catch (Exception ee)
            {
                accompany_record_query_flag = true;
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return;
            }
        }

        /// <summary>
        /// 获取黑白普通名单列表信息
        /// </summary>
        /// <param name="app"></param>
        /// <param name="clearWhiteListFlag"></param>
        /// <param name="list"></param>
        /// <returns></returns>
        private int get_bwolist_info(InterModuleMsgStruct app,ref strBwListSetInfo strBWO)
        {
            if (app.Body.n_dic.Count <= 0)
            {
                return -1;
            }
           
            strBWO.listBwoInfo = new List<strBwList>();

            for (int i = 0; i < app.Body.n_dic.Count; i++)
            {
                strBwList bw = new strBwList();

                if (app.Body.n_dic[i].dic.ContainsKey("imsi"))
                {
                    if (app.Body.n_dic[i].dic["imsi"].ToString() != "")
                    {
                        bw.imsi = app.Body.n_dic[i].dic["imsi"].ToString();
                    }
                }

                if (app.Body.n_dic[i].dic.ContainsKey("imei"))
                {
                    if (app.Body.n_dic[i].dic["imei"].ToString() != "")
                    {
                        bw.imei = app.Body.n_dic[i].dic["imei"].ToString();
                    }
                }

                if (string.IsNullOrEmpty(bw.imsi) && string.IsNullOrEmpty(bw.imei))
                {
                    string errInfo = "imsi和imei都为空";
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    continue;
                }

                if (app.Body.n_dic[i].dic.ContainsKey("rbStart"))
                {
                    if (app.Body.n_dic[i].dic["rbStart"].ToString() != "")
                    {
                        bw.rbStart = app.Body.n_dic[i].dic["rbStart"].ToString();
                    }
                }

                if (app.Body.n_dic[i].dic.ContainsKey("rbEnd"))
                {
                    if (app.Body.n_dic[i].dic["rbEnd"].ToString() != "")
                    {
                        bw.rbEnd = app.Body.n_dic[i].dic["rbEnd"].ToString();
                    }
                }

                if (app.Body.n_dic[i].dic.ContainsKey("bwFlag"))
                {
                    if (app.Body.n_dic[i].dic["bwFlag"].ToString() != "")
                    {
                        string tmp = app.Body.n_dic[i].dic["bwFlag"].ToString();

                        if (tmp == "black")
                        {
                            bw.bwFlag = bwType.BWTYPE_BLACK;
                            strBWO.bt = bwType.BWTYPE_BLACK;

                            // 2108-09-28
                            if (bw.imsi == "123456789abcdef")
                            {
                                strBWO.clearWhiteListFlag = true;
                            }
                        }
                        else if (tmp == "white")
                        {
                            bw.bwFlag = bwType.BWTYPE_WHITE;
                            strBWO.bt = bwType.BWTYPE_WHITE;

                            // 2108-09-26
                            if (bw.imsi == "123456789abcdef")
                            {
                                strBWO.clearWhiteListFlag = true;
                            }
                        }
                        else if (tmp == "other")
                        {
                            bw.bwFlag = bwType.BWTYPE_OTHER;
                            strBWO.bt = bwType.BWTYPE_OTHER;

                            // 2108-09-28
                            if (bw.imsi == "123456789abcdef")
                            {
                                strBWO.clearWhiteListFlag = true;
                            }
                        }
                        else
                        {
                            string errInfo = "不支持的黑白名单类型";
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }
                    }
                }

                if (app.Body.n_dic[i].dic.ContainsKey("time"))
                {
                    if (app.Body.n_dic[i].dic["time"].ToString() != "")
                    {
                        bw.time = app.Body.n_dic[i].dic["time"].ToString();
                    }
                }

                if (app.Body.n_dic[i].dic.ContainsKey("des"))
                {
                    if (app.Body.n_dic[i].dic["des"].ToString() != "")
                    {
                        bw.des = app.Body.n_dic[i].dic["des"].ToString();
                    }
                }

                // 2018-09-28
                bw.linkFlag = "0";
                bw.affDeviceId = strBWO.devId;

                //if (!string.IsNullOrEmpty(affDeviceId))
                //{
                //    bw.linkFlag = "0";
                //    bw.affDeviceId = affDeviceId;
                //}
                //else
                //{
                //    if (!string.IsNullOrEmpty(affDomainId))
                //    {
                //        bw.linkFlag = "1";
                //        bw.affDomainId = affDomainId;
                //    }
                //}

                strBWO.listBwoInfo.Add(bw);
            }

            return 0;
        }

        private int change_domain_id_2_nameFullPath(string idSet,ref string nameFullPathSet)
        {
            if (string.IsNullOrEmpty(idSet))
            {
                return -1;
            }

            List<string> listStr = new List<string>();
            if (false == gDbHelperUpper.check_and_get_id_set(idSet, ref listStr))
            {
                add_log_info(LogInfoType.EROR, "check_and_get_id_set出错", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "check_and_get_id_set出错", "Main", LogCategory.I);
                return -1;
            }

            Dictionary<string, string> dic = new Dictionary<string, string>();
            if ((int)RC.SUCCESS != gDbHelperUpper.domain_dictionary_id_nameFullPath_get(ref dic))
            {
                add_log_info(LogInfoType.EROR, "domain_dictionary_id_nameFullPath_get出错", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "domain_dictionary_id_nameFullPath_get出错", "Main", LogCategory.I);
                return -1;
            }

            nameFullPathSet = "";
            foreach (string str in listStr)
            {
                if (dic.ContainsKey(str))
                {
                    nameFullPathSet += dic[str] + ",";
                }
            }

            if (nameFullPathSet != "")
            {
                nameFullPathSet = nameFullPathSet.Remove(nameFullPathSet.Length - 1, 1);
            }

            return 0;
        }

        private int change_domain_nameFullPath_2_id(string nameFullPathSet, ref string idSet)
        {
            if (string.IsNullOrEmpty(nameFullPathSet))
            {
                return -1;
            }

            List<string> listStr = new List<string>();
            string[] s = nameFullPathSet.Split(new char[] { ',' });

            if (s.Length <= 0)
            {
                return -1;
            }
            else
            {
                foreach (string str in s)
                {
                    listStr.Add(str);
                }
            }      

            Dictionary<string, string> dic = new Dictionary<string, string>();
            if ((int)RC.SUCCESS != gDbHelperUpper.domain_dictionary_id_nameFullPath_get(ref dic))
            {
                add_log_info(LogInfoType.EROR, "domain_dictionary_id_nameFullPath_get出错", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "domain_dictionary_id_nameFullPath_get出错", "Main", LogCategory.I);
                return -1;
            }

            idSet = "";
            foreach (string str in listStr)
            {
                foreach (KeyValuePair<string, string> kv in dic)
                {
                    if (kv.Value == str)
                    {
                        idSet += kv.Key + ",";
                        break;
                    }
                }
            }

            if (idSet != "")
            {
                idSet = idSet.Remove(idSet.Length - 1, 1);
            }

            return 0;
        }

        private void print_bwo_info()
        {
            string info = "";

            lock (mutex_bwoList)
            {
                foreach (strBwListSetInfo str in gBWOProcess)
                {
                    info = string.Format("qCnt={0},lCnt={1},id={2},name={3},req={4},rsp={5}\n",
                    gBWOProcess.Count, str.listBwoInfo.Count, str.devId, str.devFullName, str.operTypeReq, str.operTypeRsp);


                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                }
            }

            return;
        }

        /// <summary>
        /// 删除指定设备
        /// </summary>
        /// <param name="parentFullPathName">设备所属站点的名称</param>
        /// <param name="name">设备的名称</param>
        /// <param name="errInfo">出错时返回的信息</param>
        /// <returns></returns>
        private bool device_delete(string parentFullPathName,string name, ref string errInfo)
        {
            int rtv = -1;
            int affDomainId = -1;
            string devFullPathName = "";
            strDevice devInfo = new strDevice();
      
            devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);
            if (!gDicDevFullName.ContainsKey(devFullPathName))
            {
                //返回出错处理    
                errInfo = string.Format("device_delete出错,{0}:对应的设备ID在gDicDevFullName中找不到", devFullPathName);
                return false;
            }
            else
            {
                devInfo = gDicDevFullName[devFullPathName];
            }

            rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(parentFullPathName, ref affDomainId);
            if (rtv != 0)
            {              
                errInfo = string.Format("device_delete出错，domain_get_id_by_nameFullPath：{0}", gDbHelperUpper.get_rtv_str(rtv));
                return false;
            }

            rtv = gDbHelperUpper.device_record_delete(affDomainId, name);
            if (rtv != 0)
            {
                errInfo = string.Format("device_delete出错，device_record_delete：{0}", gDbHelperUpper.get_rtv_str(rtv));
                return false;
            }
        
            //InterModuleMsgStruct imms = new InterModuleMsgStruct();

            //// 告诉ApCtrl删除该设备的状态信息
            //imms.ApInfo.SN = devInfo.sn;
            //imms.ApInfo.Fullname = devFullPathName;
            //imms.ApInfo.IP = devInfo.ipAddr;
            //imms.ApInfo.Port = int.Parse(devInfo.port);
            //imms.ApInfo.Type = devInfo.innerType;

            //imms.Body.type = Main2ApControllerMsgType.ApDelete;
            //imms.MsgType = MsgType.CONFIG.ToString();

            ////发送给ApController
            //Send_Msg_2_ApCtrl_Lower(imms);
     
            return true;
        }

        /// <summary>
        /// 处理收到从AppController收到的消息
        /// </summary>
        /// <param name="strBody">消息体</param>
        /// <returns></returns>
        private int process_app_controller_msg(string strBody)
        {
            int rv = 0;

            if (string.IsNullOrEmpty(strBody))
            {
                add_log_info(LogInfoType.EROR, "strBody is Error.\n", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "strBody is Error.\n", "Main", LogCategory.I);
                return -1;
            }

            try
            {
                //反系列化
                gAppUpper = JsonConvert.DeserializeObject<InterModuleMsgStruct>(strBody);
                switch (gAppUpper.Body.type)
                {
                    case AppMsgType.app_all_domain_request:
                        {
                            #region 老的交互，先注释掉

                            #region 获取所有的叶子节点

                            //DataTable dt = new DataTable();
                            //int rtv = gDbHelper.domain_record_leaf_get(ref dt);

                            //if (rtv != 0)
                            //{
                            //    gAppUpper.Body.type = "app_oper_domain_response";
                            //    gAppUpper.Body.dic = new Dictionary<string, object>();
                            //    gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            //    gAppUpper.Body.dic.Add("ReturnStr", gDbHelper.get_rtv_str(rtv));

                            //    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            //    break;
                            //}

                            #endregion

                            #region 获取所有的站点下的设备

                            //int leafSuccessCnt = dt.Rows.Count;
                            //int domainId = 0;
                            //int isStation = 0;
                            //string nameFullPath = "";

                            //gAppUpper.Body.type = "app_oper_domain_response";
                            //gAppUpper.Body.dic = new Dictionary<string, object>();
                            //gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            //gAppUpper.Body.dic.Add("ReturnStr", gDbHelper.get_rtv_str(rtv));
                            //gAppUpper.Body.dic.Add("LeafCount", leafSuccessCnt.ToString());
                            //gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            //int inx = 1;
                            //foreach (DataRow dr in dt.Rows)
                            //{
                            //    domainId = int.Parse(dr["id"].ToString());
                            //    isStation = int.Parse(dr["isStation"].ToString());
                            //    nameFullPath = dr["nameFullPath"].ToString();

                            //    if (isStation == 1)
                            //    {
                            //        List<string> listId = new List<string>();
                            //        List<string> listName = new List<string>();

                            //        rtv = gDbHelper.device_id_name_get_by_affdomainid(domainId, ref listId, ref listName);
                            //        if (rtv == 0)
                            //        {
                            //            string tmp = "";
                            //            foreach (string str in listName)
                            //            {
                            //                tmp += str + ",";

                            //                //设置站点下所有设备的信息
                            //                set_device_info_by_name_affdomainid(str, domainId, nameFullPath, ref gAppUpper);
                            //            }

                            //            if (tmp != "")
                            //            {
                            //                tmp = tmp.Remove(tmp.Length - 1, 1);                                     

                            //                gAppUpper.Body.dic.Add("DomainName" + inx.ToString(), nameFullPath);
                            //                gAppUpper.Body.dic.Add("DeviceList" + inx.ToString(), tmp);
                            //                inx++;
                            //            }
                            //            else
                            //            {
                            //                gAppUpper.Body.dic.Add("DomainName" + inx.ToString(), nameFullPath);
                            //                gAppUpper.Body.dic.Add("DeviceList" + inx.ToString(), "null");
                            //                inx++;
                            //            }                                      
                            //        }
                            //    }
                            //    else
                            //    {
                            //        gAppUpper.Body.dic.Add("DomainName" + inx.ToString(), nameFullPath);
                            //        gAppUpper.Body.dic.Add("DeviceList" + inx.ToString(), "null");
                            //        inx++;
                            //    }
                            //}

                            #endregion

                            #endregion

                            #region 获取所有的节点

                            //app获取所有的域信息请求
                            //即把整个设备树发给APP

                            DataTable dt = new DataTable();
                            int rtv = gDbHelperUpper.domain_record_entity_get(ref dt, 0);

                            gAppUpper.Body.type = AppMsgType.app_all_domain_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                                gAppUpper.Body.dic.Add("NodeCount", dt.Rows.Count.ToString());

                                foreach (DataRow dr in dt.Rows)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();

                                    if (string.IsNullOrEmpty(dr["nameFullPath"].ToString()))
                                    {
                                        ndic.name = "null";
                                    }
                                    else
                                    {
                                        ndic.name = dr["nameFullPath"].ToString();
                                    }

                                    if (string.IsNullOrEmpty(dr["id"].ToString()))
                                    {
                                        ndic.dic.Add("id", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("id", dr["id"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["name"].ToString()))
                                    {
                                        ndic.dic.Add("name", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("name", dr["name"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["parentId"].ToString()))
                                    {
                                        ndic.dic.Add("parentId", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("parentId", dr["parentId"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["isStation"].ToString()))
                                    {
                                        ndic.dic.Add("isStation", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("isStation", dr["isStation"].ToString());
                                    }

                                    // 2019-02-22
                                    if (string.IsNullOrEmpty(dr["des"].ToString()))
                                    {
                                        ndic.dic.Add("des", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("des", dr["des"].ToString());
                                    }

                                    gAppUpper.Body.n_dic.Add(ndic);
                                }

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                dt.Dispose();
                                dt = null;
                                break;
                            }

                            #endregion                            
                        }
                    case AppMsgType.app_add_domain_request:
                        {
                            #region 获取信息

                            string name = "";
                            string parentNameFullPath = "";
                            int isStation = -1;
                            string des = "";

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("parentNameFullPath"))
                            {
                                parentNameFullPath = gAppUpper.Body.dic["parentNameFullPath"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("isStation"))
                            {
                                isStation = int.Parse(gAppUpper.Body.dic["isStation"].ToString());
                            }

                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                des = gAppUpper.Body.dic["des"].ToString();

                                if (string.IsNullOrEmpty(des))
                                {
                                    des = "null";
                                }
                            }
                            else
                            {
                                des = "null";
                            }

                            if (name == "" || parentNameFullPath == "" || isStation == -1)
                            {
                                add_log_info(LogInfoType.EROR, "app_add_domain_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_add_domain_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_add_domain_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_add_domain_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (isStation != 0 && isStation != 1)
                            {
                                add_log_info(LogInfoType.EROR, "app_add_domain_request,isStation", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_add_domain_request,isStation", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_add_domain_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_add_domain_request,isStation.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            string str = string.Format("name = {0},parentNameFullPath = {1},isStation = {2},des = {3}", name, parentNameFullPath, isStation, des);
                            add_log_info(LogInfoType.INFO, str, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.INFO, str, "Main", LogCategory.I);

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.domain_record_insert(name, parentNameFullPath, isStation, des);

                            gAppUpper.Body.type = AppMsgType.app_add_domain_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion
                        }
                    case AppMsgType.app_del_domain_request:
                        {
                            #region 获取信息

                            string nameFullPath = "";

                            if (gAppUpper.Body.dic.ContainsKey("nameFullPath"))
                            {
                                nameFullPath = gAppUpper.Body.dic["nameFullPath"].ToString();
                            }

                            if (nameFullPath == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_del_domain_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_del_domain_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_del_domain_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_del_domain_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            string str = string.Format("nameFullPath = {0}", nameFullPath);
                            add_log_info(LogInfoType.INFO, str, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.INFO, str, "Main", LogCategory.I);

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.domain_record_delete(nameFullPath);

                            gAppUpper.Body.type = AppMsgType.app_del_domain_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);

                            #endregion    

                            #region 重新获取gDicDevFullName

                            if (rtv == 0)
                            {
                                if (0 == gDbHelperUpper.domain_dictionary_info_join_get(ref gDicDevFullName, ref gDicDevId_Station_DevName))
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);

                                    print_dic_dev_fullname_info("app_del_domain_request", gDicDevFullName);
                                }
                                else
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                }
                            }

                            #endregion

                            #region 重新获取gDicDevId_Imsi_Des

                            // 2018-09-10

                            if (rtv == 0)
                            {
                                if (0 == gDbHelperUpper.domain_dictionary_info_join_imsi_des_get(ref gDicDevId_Imsi_Des))
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                }
                                else
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                }
                            }

                            #endregion

                            break;
                        }
                    case AppMsgType.app_rename_domain_request:
                        {
                            #region 获取信息

                            //    "oldNameFullPath":"设备.深圳.南山",
                            //    "newNameFullPath":"设备.深圳.宝安",
                            //    "newDes":"描述"   //当该字段为""时，就不修改oldNameFullPath的描述
                            //                     //当该字段不为""时，就修改oldNameFullPath的描述

                            int rtv = -1;
                            string oldNameFullPath = "";
                            string newNameFullPath = "";
                            string newDes = "";

                            if (gAppUpper.Body.dic.ContainsKey("oldNameFullPath"))
                            {
                                oldNameFullPath = gAppUpper.Body.dic["oldNameFullPath"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("newNameFullPath"))
                            {
                                newNameFullPath = gAppUpper.Body.dic["newNameFullPath"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("newDes"))
                            {
                                newDes = gAppUpper.Body.dic["newDes"].ToString();
                            }

                            if (oldNameFullPath == "" || newNameFullPath == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_rename_domain_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_rename_domain_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_rename_domain_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_del_domain_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            string oldNameFullPathRoot = "";
                            string newNameFullPathRoot = "";

                            if (!oldNameFullPath.Contains(".") || !newNameFullPath.Contains("."))
                            {
                                add_log_info(LogInfoType.EROR, "没包含点分割号,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "没包含点分割号,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_rename_domain_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "没包含点分割号,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                int i = oldNameFullPath.LastIndexOf(".");
                                int j = newNameFullPath.LastIndexOf(".");

                                oldNameFullPathRoot = oldNameFullPath.Substring(0, i);
                                newNameFullPathRoot = newNameFullPath.Substring(0, i);

                                if (oldNameFullPathRoot != newNameFullPathRoot)
                                {
                                    add_log_info(LogInfoType.EROR, "根部路径名称不一致,参数有误", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, "根部路径名称不一致,参数有误", "Main", LogCategory.I);

                                    //返回出错处理
                                    gAppUpper.Body.type = AppMsgType.app_rename_domain_response;
                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("ReturnCode", -1);
                                    gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "根部路径名称不一致,参数有误.");

                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            #region 修改描述处理

                            if (newDes != "")
                            {
                                rtv = gDbHelperUpper.domain_record_update_des(oldNameFullPath, newDes);
                                if (rtv != 0)
                                {
                                    //返回出错处理
                                    gAppUpper.Body.type = AppMsgType.app_rename_domain_response;
                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("ReturnCode", -1);
                                    gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);

                                    break;
                                }
                            }

                            #endregion

                            string str = string.Format("oldNameFullPath = {0},newNameFullPath = {1}", oldNameFullPath, newNameFullPath);
                            add_log_info(LogInfoType.INFO, str, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.INFO, str, "Main", LogCategory.I);

                            #endregion

                            #region 返回消息

                            rtv = 0;
                            if (oldNameFullPath != newNameFullPath)
                            {
                                rtv = gDbHelperUpper.domain_record_rename(oldNameFullPath, newNameFullPath);
                            }

                            gAppUpper.Body.type = AppMsgType.app_rename_domain_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);

                            #endregion

                            #region 重新获取gDicDevFullName

                            if (rtv == 0)
                            {
                                if (0 == gDbHelperUpper.domain_dictionary_info_join_get(ref gDicDevFullName, ref gDicDevId_Station_DevName))
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);

                                    print_dic_dev_fullname_info("app_rename_domain_request", gDicDevFullName);
                                }
                                else
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                }
                            }

                            break;

                            #endregion                            
                        }
                    case AppMsgType.app_login_request:
                        {
                            #region 获取信息

                            string usr = "";
                            string psw = "";          

                            if (gAppUpper.Body.dic.ContainsKey("UserName"))
                            {
                                usr = gAppUpper.Body.dic["UserName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("PassWord"))
                            {
                                psw = gAppUpper.Body.dic["PassWord"].ToString();
                            }

                            if (usr == "" || psw == "")
                            {
                                add_log_info(LogInfoType.EROR, "usr or psw NULL.", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "usr or psw NULL.", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_login_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "usr or psw NULL.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            string str = string.Format("UserName = {0},PassWord = {1}", usr, psw);
                            add_log_info(LogInfoType.INFO, str, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.INFO, str, "Main", LogCategory.I);

                            #endregion

                            #region 验证用户合法性

                            int rtv = gDbHelperUpper.user_record_check(usr, psw);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.type = AppMsgType.app_login_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                gAppUpper.Body.type = AppMsgType.app_login_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            #endregion

                            #region 获取用户所属的组/角色

                            string roleName = "";
                            rtv = gDbHelperUpper.userrole_get_by_user_name(usr, ref roleName);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("通过用户名称获取所属的用户角色失败:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                            }

                            #endregion

                            #region 获取用户的域权限                           

                            List<string> listDomain = new List<string>();
                            rtv = gDbHelperUpper.userdomain_set_get_by_usrname(usr, ref listDomain);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("通过用户名获取用户所有的域权限失败:{0}", gDbHelperUpper.get_rtv_str(rtv));

                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                            }

                            #endregion

                            #region 获取用户的功能权限                       

                            List<string> listIdSet = new List<string>();

                            // 通过角色名称获取对应的权限ID集合
                            rtv = gDbHelperUpper.roleprivilege_priidset_get_by_rolename(roleName, ref listIdSet);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("通过角色名称获取对应的权限ID集合失败:{0}", gDbHelperUpper.get_rtv_str(rtv));

                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                            }

                            List<string> listFunName = new List<string>();
                            foreach (string id in listIdSet)
                            {
                                string funName = "";

                                //通过id获取对应的功能ID
                                rtv = gDbHelperUpper.privilege_funname_get_by_id(id, ref funName);
                                if (rtv != 0)
                                {
                                    string errInfo = string.Format("privilege_funname_get_by_id,通过id获取对应的功能ID:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                    add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                }
                                else
                                {
                                    listFunName.Add(funName);
                                }
                            }

                            #endregion

                            #region 返回信息

                            if (roleName == "")
                            {
                                gAppUpper.Body.dic.Add("GroupName", "");
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("GroupName", roleName);
                            }

                            if (listDomain.Count == 0)
                            {
                                gAppUpper.Body.dic.Add("DomainList", "");
                            }
                            else
                            {
                                string tmp = "";
                                for (int i = 0; i < listDomain.Count; i++)
                                {
                                    if (i == (listDomain.Count - 1))
                                    {
                                        tmp += listDomain[i];
                                    }
                                    else
                                    {
                                        tmp += listDomain[i] + ",";
                                    }
                                }

                                gAppUpper.Body.dic.Add("DomainList", tmp);
                            }


                            if (listFunName.Count == 0)
                            {
                                gAppUpper.Body.dic.Add("FunList", "");
                            }
                            else
                            {
                                string tmp = "";
                                for (int i = 0; i < listFunName.Count; i++)
                                {
                                    if (i == (listFunName.Count - 1))
                                    {
                                        tmp += listFunName[i];
                                    }
                                    else
                                    {
                                        tmp += listFunName[i] + ",";
                                    }
                                }

                                gAppUpper.Body.dic.Add("FunList", tmp);
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);                           

                            #endregion

                            break;
                        }
                    case AppMsgType.app_all_roletype_request:
                        {
                            #region 返回信息

                            DataTable dt = new DataTable();

                            int rtv = gDbHelperUpper.roletype_record_entity_get(ref dt);

                            gAppUpper.Body.type = AppMsgType.app_all_roletype_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));

                            if (rtv == 0)
                            {
                                gAppUpper.Body.dic.Add("TypeCount", dt.Rows.Count.ToString());

                                int i = 1;
                                foreach (DataRow dr in dt.Rows)
                                {
                                    if (string.IsNullOrEmpty(dr["roleType"].ToString()))
                                    {
                                        gAppUpper.Body.dic.Add("RoleType" + i.ToString(), "null");
                                    }
                                    else
                                    {
                                        gAppUpper.Body.dic.Add("RoleType" + i.ToString(), dr["roleType"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["des"].ToString()))
                                    {
                                        gAppUpper.Body.dic.Add("Des" + i.ToString(), "null");
                                    }
                                    else
                                    {
                                        gAppUpper.Body.dic.Add("Des" + i.ToString(), dr["des"].ToString());
                                    }

                                    i++;
                                }
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            dt.Dispose();
                            dt = null;

                            break;

                            #endregion
                        }
                    case AppMsgType.app_add_roletype_request:
                        {
                            #region 获取信息

                            string RoleType = "";
                            string Des = "";

                            if (gAppUpper.Body.dic.ContainsKey("RoleType"))
                            {
                                RoleType = gAppUpper.Body.dic["RoleType"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("Des"))
                            {
                                Des = gAppUpper.Body.dic["Des"].ToString();
                            }

                            if (RoleType == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_add_roletype_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_add_roletype_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_add_roletype_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_add_roletype_response,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.roletype_record_insert(RoleType, Des);

                            gAppUpper.Body.type = AppMsgType.app_add_roletype_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_del_roletype_request:
                        {
                            #region 获取信息

                            string RoleType = "";

                            if (gAppUpper.Body.dic.ContainsKey("RoleType"))
                            {
                                RoleType = gAppUpper.Body.dic["RoleType"].ToString();
                            }

                            if (RoleType == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_del_roletype_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_del_roletype_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_del_roletype_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_del_roletype_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.roletype_record_delete(RoleType);

                            gAppUpper.Body.type = AppMsgType.app_del_roletype_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                             
                        }
                    case AppMsgType.app_all_role_request:
                        {
                            #region 返回信息

                            DataTable dt = new DataTable();

                            //name,roleType,timeStart,timeEnd,des
                            int rtv = gDbHelperUpper.role_record_entity_get(ref dt);

                            gAppUpper.Body.type = AppMsgType.app_all_role_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            if (rtv == 0)
                            {
                                gAppUpper.Body.dic.Add("GroupCount", dt.Rows.Count.ToString());
                                gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();


                                foreach (DataRow dr in dt.Rows)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();

                                    if (string.IsNullOrEmpty(dr["name"].ToString()))
                                    {
                                        ndic.name = "null";
                                        ndic.dic.Add("name", "null");
                                    }
                                    else
                                    {
                                        ndic.name = dr["name"].ToString();
                                        ndic.dic.Add("name", dr["name"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["roleType"].ToString()))
                                    {
                                        ndic.dic.Add("roleType", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("roleType", dr["roleType"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["timeStart"].ToString()))
                                    {
                                        ndic.dic.Add("timeStart", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("timeStart", dr["timeStart"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["timeEnd"].ToString()))
                                    {
                                        ndic.dic.Add("timeEnd", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("timeEnd", dr["timeEnd"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["des"].ToString()))
                                    {
                                        ndic.dic.Add("des", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("des", dr["des"].ToString());
                                    }

                                    gAppUpper.Body.n_dic.Add(ndic);
                                }
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            dt.Dispose();
                            dt = null;

                            break;

                            #endregion
                        }
                    case AppMsgType.app_add_role_request:
                        {
                            #region 获取信息

                            //name,roleType,timeStart,timeEnd,des
                            string name = "";
                            string roleType = "";
                            string timeStart = "";
                            string timeEnd = "";
                            string des = "";

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("roleType"))
                            {
                                roleType = gAppUpper.Body.dic["roleType"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("timeStart"))
                            {
                                timeStart = gAppUpper.Body.dic["timeStart"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("timeEnd"))
                            {
                                timeEnd = gAppUpper.Body.dic["timeEnd"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                des = gAppUpper.Body.dic["des"].ToString();
                                if (string.IsNullOrEmpty(des))
                                {
                                    des = "null";
                                }
                            }
                            else
                            {
                                des = "null";
                            }

                            if (name == "" || roleType == "" || timeStart == "" || timeEnd == "" || des == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_add_role_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_add_role_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_add_role_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_add_role_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.role_record_insert(name, roleType, timeStart, timeEnd, des);

                            gAppUpper.Body.type = AppMsgType.app_add_role_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();

                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_del_role_request:
                        {
                            #region 获取信息

                            string name = "";

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (name == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_del_role_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_del_role_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_del_role_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_del_roletype_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.role_record_delete(name);

                            gAppUpper.Body.type = AppMsgType.app_del_role_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                         
                        }
                    case AppMsgType.app_all_device_request:
                        {
                            #region 获取信息

                            int affDomainId = -1;
                            string parentFullPathName = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (parentFullPathName == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_all_device_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_all_device_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_all_device_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_all_device_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            // 通过全路径获取ID
                            int rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(parentFullPathName, ref affDomainId);
                            if (rtv == 0)
                            {
                                //检查域ID是否为站点
                                rtv = gDbHelperUpper.domain_record_is_station(affDomainId);
                                if (rtv == (int)RC.IS_STATION)
                                {
                                    List<string> listId = new List<string>();
                                    List<string> listName = new List<string>();

                                    rtv = gDbHelperUpper.device_id_name_get_by_affdomainid(affDomainId, ref listId, ref listName);
                                    if (rtv == 0)
                                    {
                                        gAppUpper.Body.type = AppMsgType.app_all_device_response;
                                        gAppUpper.Body.dic = new Dictionary<string, object>();
                                        gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                        gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                                        gAppUpper.Body.dic.Add("DeviceCount", listName.Count.ToString());
                                        gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                                        foreach (string str in listName)
                                        {
                                            //设置站点下所有设备的信息
                                            set_device_info_by_name_affdomainid(str, affDomainId, parentFullPathName, ref gAppUpper);
                                        }
                                    }
                                }
                                else
                                {
                                    gAppUpper.Body.type = AppMsgType.app_all_device_response;
                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                    gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                                }
                            }
                            else
                            {
                                gAppUpper.Body.type = AppMsgType.app_all_device_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }

                            #region 获取未指派设备

                            //2018-06-26
                            DataTable dt = new DataTable();
                            rtv = gDbHelperUpper.device_unknown_record_entity_get(ref dt);
                            if (rtv == 0)
                            {
                                if (dt.Rows.Count > 0)
                                {
                                    set_device_unknown_info_by_datatable(dt, ref gAppUpper);
                                }
                            }

                            #endregion

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            dt.Dispose();
                            dt = null;

                            break;

                            #endregion                                         
                        }
                    case AppMsgType.app_add_device_request:
                        {
                            #region 获取信息

                            //   "parentFullPathName":"设备.深圳.福田.中心广场.西北监控",
                            //   "name":"电信FDD",
                            //   "mode":"LTE-TDD",    //GSM,TD-SCDMA,WCDMA,LTE-TDD,LTE-FDD     
                            //}
                            //   "n_dic":[     //2018-07-04
                            //                 //2018-11-01 添加同名设备覆盖的功能
                            //      {
                            //         "name":"device_unknown",   //device_unknown标识未指派的设备
                            //         "dic":{
                            //         "ipAddr":"172.17.0.123",
                            //         "port":"12345",
                            //      }

                            int affDomainId = -1;
                            string name = "";
                            string mode = "";
                            string parentFullPathName = "";

                            string port = "";
                            string ipAddr = "";                            

                            // 未指派标识
                            bool noAssignedFlag = false;

                            string devFullPathName = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("mode"))
                            {
                                mode = gAppUpper.Body.dic["mode"].ToString();

                                devMode dm = gDbHelperUpper.get_device_mode(mode);
                                if (dm == devMode.MODE_UNKNOWN)
                                {
                                    //返回出错处理
                                    string errInfo = string.Format("mode = {0},非法!", mode);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_device_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            if (parentFullPathName == "" || name == "" || mode == "")
                            {
                                //返回出错处理
                                string errInfo = get_debug_info() + string.Format("app_add_device_request,参数为空.");
                                errInfo += string.Format("parentFullPathName={0},name={1},mode={2}", parentFullPathName, name, mode);

                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_device_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            // 2018-09-04
                            devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);

                            #region 未指派设备信息

                            // 2018-07-04
                            if (gAppUpper.Body.n_dic != null && gAppUpper.Body.n_dic.Count > 0)
                            {
                                string device_unknown_name = "";

                                if (!string.IsNullOrEmpty(gAppUpper.Body.n_dic[0].name))
                                {
                                    device_unknown_name = gAppUpper.Body.n_dic[0].name;
                                }

                                if (gAppUpper.Body.n_dic[0].dic.ContainsKey("ipAddr"))
                                {
                                    ipAddr = gAppUpper.Body.n_dic[0].dic["ipAddr"].ToString();
                                }

                                if (gAppUpper.Body.n_dic[0].dic.ContainsKey("port"))
                                {
                                    port = gAppUpper.Body.n_dic[0].dic["port"].ToString();
                                }

                                if (device_unknown_name != "device_unknown" || ipAddr == "" || port == "")
                                {
                                    //返回出错处理
                                    string errInfo = get_debug_info() + string.Format("获取device_unknown或ipAddr或port失败.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_device_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }

                                noAssignedFlag = true;
                            }
                            else
                            {
                                noAssignedFlag = false;
                            }

                            #endregion

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(parentFullPathName, ref affDomainId);

                            if (noAssignedFlag == false)
                            {
                                //无需处理将未指派设备添加确定的设备中                               
                                if (rtv == 0)
                                {
                                    rtv = gDbHelperUpper.device_record_insert(affDomainId, name, mode);
                                }

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_device_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);

                                #region 判断新添加的设备是否存在未知设备中

                                // 2018-09-04 
                                if (rtv == 0)
                                {
                                    if ((int)RC.EXIST == gDbHelperUpper.device_unknown_record_exist_name(devFullPathName))
                                    {
                                        rtv = gDbHelperUpper.device_unknown_record_delete_name(devFullPathName);
                                        if (rtv == 0)
                                        {
                                            string errInfo = string.Format("成功添加新设备后，删除了同名的未知设备:{0}.", devFullPathName);
                                            add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.I);

                                            #region 重新获取未指派设备
                                            
                                            DataTable dt = new DataTable();
                                            rtv = gDbHelperLower.device_unknown_record_entity_get(ref dt);

                                            gAppUpper.Body.type = Main2ApControllerMsgType.app_all_device_response;
                                            gAppUpper.Body.dic = new Dictionary<string, object>();
                                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                            gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));

                                            if (rtv == 0)
                                            {
                                                gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();
                                                set_device_unknown_info_by_datatable(dt, ref gAppUpper);
                                            }

                                            string info = string.Format("发送app_all_device_response给AppCtrl,未指派个数{0}", dt.Rows.Count);
                                            Logger.Trace(LogInfoType.DEBG, info, "Main", LogCategory.S);

                                            //发送给界面去更新未指派设备信息
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);

                                            #endregion
                                        }
                                    }
                                }

                                #endregion

                                #region 重新获取gDicDevFullName

                                if (rtv == 0)
                                {
                                    if (0 == gDbHelperUpper.domain_dictionary_info_join_get(ref gDicDevFullName, ref gDicDevId_Station_DevName))
                                    {
                                        add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);

                                        print_dic_dev_fullname_info("app_add_device_request", gDicDevFullName);
                                    }
                                    else
                                    {
                                        add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                    }
                                }

                                #endregion

                                #region 重新获取gDicDevId_Imsi_Des

                                // 2018-09-10

                                if (rtv == 0)
                                {
                                    if (0 == gDbHelperUpper.domain_dictionary_info_join_imsi_des_get(ref gDicDevId_Imsi_Des))
                                    {
                                        add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                    }
                                    else
                                    {
                                        add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                    }
                                }

                                #endregion

                                break;
                            }
                            else
                            {
                                //处理将未指派设备添加确定的设备中                               
                                if ((int)RC.NO_EXIST == gDbHelperUpper.device_unknown_record_exist(ipAddr))
                                {
                                    string errInfo = string.Format("{0}:{1}对应的未指派设备不存在.", ipAddr, port);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_device_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }

                                string rtvInfo = "";                               
                                bool sameNameCover = false;  //同名覆盖

                                if (true == gDbHelperUpper.device_record_checkif_can_insert(affDomainId, name, mode, ref rtvInfo))
                                {
                                    if (rtvInfo.Contains("覆盖同名设备"))
                                    {
                                        sameNameCover = true;
                                    }

                                    //可以插入到设备表中

                                    #region 发下命令设置fullname           

                                    string fullname = string.Format("{0}.{1}", parentFullPathName, name);

                                    DataTable dt = new DataTable();
                                    rtv = gDbHelperUpper.device_unknown_record_entity_get_by_ipaddr_port(ipAddr, ref dt);

                                    if (((int)RC.SUCCESS != rtv) || (dt.Rows.Count == 0))
                                    {
                                        string errInfo = get_debug_info() + "device_unknown_record_entity_get_by_ipaddr_port失败.";
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_device_response, -1, errInfo, true, "1", "2");
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }

                                    gAppUpper.ApInfo.SN = dt.Rows[0]["sn"].ToString();
                                    gAppUpper.ApInfo.Fullname = fullname;
                                    gAppUpper.ApInfo.IP = ipAddr;
                                    gAppUpper.ApInfo.Port = int.Parse(port);
                                    gAppUpper.ApInfo.Type = dt.Rows[0]["innerType"].ToString();

                                    gAppUpper.Body.type = ApMsgType.set_parameter_request;
                                    gAppUpper.MsgType = MsgType.CONFIG.ToString();

                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("paramName", "CFG_FULL_NAME");
                                    gAppUpper.Body.dic.Add("paramValue", fullname);

                                    //发送给ApController
                                    Send_Msg_2_ApCtrl_Lower(gAppUpper);
                                    dt.Dispose();
                                    dt = null;

                                    #endregion

                                    #region 启动超时计时器 

                                    gTimerSetFullName = new TaskTimer();
                                    gTimerSetFullName.Interval = DataController.TimerTimeOutInterval * 1000;

                                    gTimerSetFullName.Id = 0;
                                    gTimerSetFullName.Name = string.Format("{0}:{1}:{2}", "gTimerSetFullName", ipAddr, port);
                                    gTimerSetFullName.MsgType = AppMsgType.app_add_device_response;
                                    gTimerSetFullName.TimeOutFlag = false;
                                    gTimerSetFullName.Imms = gAppUpper;
                                    gTimerSetFullName.SameNameCover = sameNameCover;

                                    //保存信息
                                    gTimerSetFullName.parentFullPathName = parentFullPathName;
                                    gTimerSetFullName.devName = name;
                                    gTimerSetFullName.mode = mode;
                                    gTimerSetFullName.ipAddr = ipAddr;
                                    gTimerSetFullName.port = port;

                                    gTimerSetFullName.Elapsed += new System.Timers.ElapsedEventHandler(TimerFunc);
                                    gTimerSetFullName.Start();

                                    break;
                                    #endregion
                                }
                                else
                                {
                                    //不能插入到设备表中
                                    string errInfo = rtvInfo;
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_device_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            #endregion                            
                        }
                    case AppMsgType.app_del_device_request:
                        {
                            #region 获取信息

                            int affDomainId = -1;
                            strDevice devInfo = new strDevice();

                            string name = "";
                            string devFullPathName = "";
                            string parentFullPathName = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (parentFullPathName == "" || name == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_del_device_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_del_device_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_del_device_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_del_device_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);
                            if (!gDicDevFullName.ContainsKey(devFullPathName))
                            {
                                //返回出错处理    
                                string errInfo = string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", devFullPathName);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[devFullPathName];
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(parentFullPathName, ref affDomainId);
                            if (rtv == 0)
                            {
                                rtv = gDbHelperUpper.device_record_delete(affDomainId, name);
                            }

                            gAppUpper.Body.type = AppMsgType.app_del_device_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);

                            #endregion

                            #region 给AP下发命令      

                            // 2018-08-20

                            if (rtv == 0)
                            {
                                gAppUpper.ApInfo.SN = devInfo.sn;
                                gAppUpper.ApInfo.Fullname = devFullPathName;
                                gAppUpper.ApInfo.IP = devInfo.ipAddr;
                                gAppUpper.ApInfo.Port = int.Parse(devInfo.port);
                                gAppUpper.ApInfo.Type = devInfo.innerType;

                                gAppUpper.Body.type = Main2ApControllerMsgType.ApDelete;
                                gAppUpper.MsgType = MsgType.CONFIG.ToString();

                                //发送给ApController
                                Send_Msg_2_ApCtrl_Lower(gAppUpper);
                            }

                            #endregion

                            #region 重新获取gDicDevFullName

                            if (rtv == 0)
                            {
                                if (0 == gDbHelperUpper.domain_dictionary_info_join_get(ref gDicDevFullName, ref gDicDevId_Station_DevName))
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);

                                    print_dic_dev_fullname_info("app_del_device_request", gDicDevFullName);
                                }
                                else
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                                }
                            }
                         
                            #endregion

                            #region 重新获取gDicDevId_Imsi_Des

                            // 2018-09-10

                            if (rtv == 0)
                            {
                                if (0 == gDbHelperUpper.domain_dictionary_info_join_imsi_des_get(ref gDicDevId_Imsi_Des))
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                }
                                else
                                {
                                    add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                }
                            }

                            break;

                            #endregion
                        }
                    case AppMsgType.app_update_device_request:
                        {
                            #region 获取信息

                            int affDomainId = -1;
                            string parentFullPathName = "";
                            string name = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (parentFullPathName == "" || name == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_update_device_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_update_device_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_update_device_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_update_device_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (gAppUpper.Body.n_dic == null || gAppUpper.Body.n_dic.Count == 0)
                            {
                                add_log_info(LogInfoType.EROR, "n_dic中没有信息,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "n_dic中没有信息,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_update_device_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "n_dic中没有信息,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            //         "name":"电信FDD-band3",
                            //         "sn":"EN1800S116340039",
                            //         "ipAddr":"172.17.0.125",
                            //         "port":"12345",
                            //         "netmask":"255.255.255.0",
                            //         "mode":"FDD",
                            strDevice dev = new strDevice();

                            if (gAppUpper.Body.n_dic[0].dic.ContainsKey("name"))
                            {
                                if (gAppUpper.Body.n_dic[0].dic["name"].ToString() != "")
                                {
                                    dev.name = gAppUpper.Body.n_dic[0].dic["name"].ToString();
                                }
                            }

                            if (gAppUpper.Body.n_dic[0].dic.ContainsKey("sn"))
                            {
                                if (gAppUpper.Body.n_dic[0].dic["sn"].ToString() != "")
                                {
                                    dev.sn = gAppUpper.Body.n_dic[0].dic["sn"].ToString();
                                }
                            }

                            if (gAppUpper.Body.n_dic[0].dic.ContainsKey("ipAddr"))
                            {
                                if (gAppUpper.Body.n_dic[0].dic["ipAddr"].ToString() != "")
                                {
                                    dev.ipAddr = gAppUpper.Body.n_dic[0].dic["ipAddr"].ToString();
                                }
                            }

                            if (gAppUpper.Body.n_dic[0].dic.ContainsKey("port"))
                            {
                                if (gAppUpper.Body.n_dic[0].dic["port"].ToString() != "")
                                {
                                    dev.port = gAppUpper.Body.n_dic[0].dic["port"].ToString();
                                }
                            }

                            if (gAppUpper.Body.n_dic[0].dic.ContainsKey("netmask"))
                            {
                                if (gAppUpper.Body.n_dic[0].dic["netmask"].ToString() != "")
                                {
                                    dev.netmask = gAppUpper.Body.n_dic[0].dic["netmask"].ToString();
                                }
                            }

                            if (gAppUpper.Body.n_dic[0].dic.ContainsKey("mode"))
                            {
                                if (gAppUpper.Body.n_dic[0].dic["mode"].ToString() != "")
                                {
                                    dev.mode = gAppUpper.Body.n_dic[0].dic["mode"].ToString();
                                }
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(parentFullPathName, ref affDomainId);
                            if (rtv == 0)
                            {
                                rtv = gDbHelperUpper.device_record_update(affDomainId, name, dev);
                            }

                            gAppUpper.Body.type = AppMsgType.app_update_device_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion         
                        }
                    case AppMsgType.app_get_device_detail_request:
                        {
                            #region 获取信息

                            int rtv;
                            strDevice devInfo = new strDevice();
                            strApStatus apSts = new strApStatus();

                            string name = "";
                            string devFullPathName = "";
                            string parentFullPathName = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (parentFullPathName == "" || name == "")
                            {
                                //返回出错处理
                                string errInfo = get_debug_info() + string.Format("app_get_device_detail_request,参数有误");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            strDomian domian = new strDomian();
                            devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);

                            if (!gDicDevFullName.ContainsKey(devFullPathName))
                            {
                                //返回出错处理    
                                string errInfo = string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", devFullPathName);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[devFullPathName];

                                //通过名称全路径获取域对应记录的信息
                                rtv = gDbHelperUpper.domain_record_get_by_nameFullPath(parentFullPathName, ref domian);
                                if (rtv != 0)
                                {
                                    string errInfo = string.Format("{0}:domain_record_get_by_nameFullPath出错", parentFullPathName);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                            gAppUpper.Body.dic.Add("domainId", domian.id.ToString());
                            gAppUpper.Body.dic.Add("domainParentId", domian.parentId.ToString());
                            gAppUpper.Body.dic.Add("parentFullPathName", parentFullPathName);
                            gAppUpper.Body.dic.Add("name", name);

                            switch (devInfo.devMode)
                            {
                                case devMode.MODE_GSM:
                                    {
                                        #region GSM详细信息

                                        strGsmRfPara grp = new strGsmRfPara();
                                        rtv = gDbHelperUpper.gsm_rf_para_record_get_by_devid(0, devInfo.id, ref grp);
                                        if (rtv != 0)
                                        {
                                            string errInfo = string.Format("{0}:ap_status_record_get_by_devid出错", parentFullPathName);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();
                                        Name_DIC_Struct ndic = new Name_DIC_Struct();
                                        ndic.name = "carry0";
                                        ndic.dic.Add("RADIO", grp.rfEnable);
                                        gAppUpper.Body.n_dic.Add(ndic);


                                        grp = new strGsmRfPara();
                                        rtv = gDbHelperUpper.gsm_rf_para_record_get_by_devid(1, devInfo.id, ref grp);
                                        if (rtv != 0)
                                        {
                                            string errInfo = string.Format("{0}:ap_status_record_get_by_devid出错", parentFullPathName);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        ndic = new Name_DIC_Struct();
                                        ndic.name = "carry1";
                                        ndic.dic.Add("RADIO", grp.rfEnable);
                                        gAppUpper.Body.n_dic.Add(ndic);

                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_GSM_V2:
                                    {
                                        #region GSM详细信息

                                        int mergeField = -1;
                                        strGcMisc gm = new strGcMisc();
                                        rtv = gDbHelperUpper.gc_misc_record_get_by_devid(0, devInfo.id, ref gm);
                                        if (rtv != 0)
                                        {
                                            string errInfo = string.Format("{0}:gc_misc_record_get_by_devid出错", parentFullPathName);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }


                                        gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();
                                        Name_DIC_Struct ndic = new Name_DIC_Struct();

                                        ndic.name = "carry0";
                                        ndic.dic.Add("SCTP", gm.SCTP);
                                        ndic.dic.Add("S1", gm.S1);
                                        ndic.dic.Add("GPS", gm.GPS);
                                        ndic.dic.Add("CELL", gm.CELL);
                                        ndic.dic.Add("SYNC", gm.SYNC);

                                        // 2018-11-05
                                        if (!string.IsNullOrEmpty(gm.LICENSE))
                                        {
                                            try
                                            {
                                                mergeField = int.Parse(gm.LICENSE);
                                            }
                                            catch (Exception ee)
                                            {
                                                string errInfo = string.Format("gm.LICENSE:{0}出错，默认为0", ee.Message);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                mergeField = 0;
                                            }
                                        }
                                        else
                                        {
                                            string errInfo = string.Format("gm.LICENSE为空，默认为0", gm.LICENSE);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            mergeField = 0;
                                        }

                                        ndic.dic.Add("LICENSE", (mergeField & 0x01).ToString());
                                        ndic.dic.Add("ALIGN",   ((mergeField>>1) & 0x01).ToString());
                                    
                                        ndic.dic.Add("RADIO", gm.RADIO);
                                        ndic.dic.Add("time", gm.time);
                                        gAppUpper.Body.n_dic.Add(ndic);

                                        gm = new strGcMisc();
                                        rtv = gDbHelperUpper.gc_misc_record_get_by_devid(1, devInfo.id, ref gm);
                                        if (rtv != 0)
                                        {
                                            string errInfo = string.Format("{0}:gc_misc_record_get_by_devid出错", parentFullPathName);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        //gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                                        ndic = new Name_DIC_Struct();

                                        ndic.name = "carry1";
                                        ndic.dic.Add("SCTP", gm.SCTP);
                                        ndic.dic.Add("S1", gm.S1);
                                        ndic.dic.Add("GPS", gm.GPS);
                                        ndic.dic.Add("CELL", gm.CELL);
                                        ndic.dic.Add("SYNC", gm.SYNC);

                                        // 2018-11-05
                                        if (!string.IsNullOrEmpty(gm.LICENSE))
                                        {
                                            try
                                            {
                                                mergeField = int.Parse(gm.LICENSE);
                                            }
                                            catch (Exception ee)
                                            {
                                                string errInfo = string.Format("gm.LICENSE:{0}出错，默认为0", ee.Message);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                mergeField = 0;
                                            }
                                        }
                                        else
                                        {
                                            string errInfo = string.Format("gm.LICENSE为空，默认为0", gm.LICENSE);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            mergeField = 0;
                                        }

                                        ndic.dic.Add("LICENSE", (mergeField & 0x01).ToString());
                                        ndic.dic.Add("ALIGN", ((mergeField >> 1) & 0x01).ToString());

                                        ndic.dic.Add("RADIO", gm.RADIO);
                                        ndic.dic.Add("time", gm.time);
                                        gAppUpper.Body.n_dic.Add(ndic);


                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_CDMA:
                                    {
                                        #region CDMA详细信息

                                        int mergeField = -1;
                                        strGcMisc gm = new strGcMisc();
                                        rtv = gDbHelperUpper.gc_misc_record_get_by_devid(-1, devInfo.id, ref gm);
                                        if (rtv != 0)
                                        {
                                            string errInfo = string.Format("{0}:gc_misc_record_get_by_devid出错", parentFullPathName);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();
                                        Name_DIC_Struct ndic = new Name_DIC_Struct();

                                        ndic.name = "carry0";
                                        ndic.dic.Add("SCTP", gm.SCTP);
                                        ndic.dic.Add("S1", gm.S1);
                                        ndic.dic.Add("GPS", gm.GPS);
                                        ndic.dic.Add("CELL", gm.CELL);
                                        ndic.dic.Add("SYNC", gm.SYNC);

                                        // 2018-11-05
                                        if (!string.IsNullOrEmpty(gm.LICENSE))
                                        {
                                            try
                                            {
                                                mergeField = int.Parse(gm.LICENSE);
                                            }
                                            catch (Exception ee)
                                            {
                                                string errInfo = string.Format("gm.LICENSE:{0}出错，默认为0", ee.Message);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                mergeField = 0;
                                            }
                                        }
                                        else
                                        {
                                            string errInfo = string.Format("gm.LICENSE为空，默认为0", gm.LICENSE);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            mergeField = 0;
                                        }

                                        ndic.dic.Add("LICENSE", (mergeField & 0x01).ToString());
                                        ndic.dic.Add("ALIGN", ((mergeField >> 1) & 0x01).ToString());

                                        ndic.dic.Add("RADIO", gm.RADIO);
                                        ndic.dic.Add("time", gm.time);
                                        gAppUpper.Body.n_dic.Add(ndic);

                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion                               
                                    }
                                case devMode.MODE_TD_SCDMA:
                                    {
                                        break;
                                    }
                                case devMode.MODE_WCDMA:
                                case devMode.MODE_LTE_FDD:
                                case devMode.MODE_LTE_TDD:
                                    {
                                        #region LTE详细信息

                                        rtv = gDbHelperUpper.ap_status_record_get_by_devid(devInfo.id, ref apSts);
                                        if (rtv != 0)
                                        {
                                            string errInfo = string.Format("{0}:ap_status_record_get_by_devid出错:{1}", parentFullPathName, gDbHelperUpper.get_rtv_str(rtv));
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        // 2018-08-10
                                        int mergeField = -1;
                                        strApGenPara apGP = new strApGenPara();
                                        rtv = gDbHelperUpper.ap_general_para_record_get_by_devid(devInfo.id, ref apGP);
                                        if (rtv != 0)
                                        {
                                            string errInfo = string.Format("{0}:ap_general_para_record_get_by_devid出错{1}", parentFullPathName, gDbHelperUpper.get_rtv_str(rtv));
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();
                                        Name_DIC_Struct ndic = new Name_DIC_Struct();

                                        ndic.dic.Add("SCTP", apSts.SCTP);
                                        ndic.dic.Add("S1", apSts.S1);
                                        ndic.dic.Add("GPS", apSts.GPS);
                                        ndic.dic.Add("CELL", apSts.CELL);
                                        ndic.dic.Add("SYNC", apSts.SYNC);

                                        // 2018-11-05
                                        if (!string.IsNullOrEmpty(apSts.LICENSE))
                                        {
                                            try
                                            {
                                                mergeField = int.Parse(apSts.LICENSE);
                                            }
                                            catch (Exception ee)
                                            {
                                                string errInfo = string.Format("apSts.LICENSE:{0}出错，默认为0", ee.Message);
                                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                                mergeField = 0;
                                            }
                                        }
                                        else
                                        {
                                            string errInfo = string.Format("apSts.LICENSE为空，默认为0", apSts.LICENSE);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            mergeField = 0;
                                        }

                                        ndic.dic.Add("LICENSE", (mergeField & 0x01).ToString());
                                        ndic.dic.Add("ALIGN", ((mergeField >> 1) & 0x01).ToString());

                                        ndic.dic.Add("RADIO", apSts.RADIO);
                                        ndic.dic.Add("time", apSts.time);
                                        ndic.dic.Add("wSelfStudy", devInfo.wSelfStudy);
                                        ndic.dic.Add("ApReadySt", apSts.ApReadySt);

                                        // 2018-08-10
                                        ndic.dic.Add("source", apGP.source);
                                        gAppUpper.Body.n_dic.Add(ndic);

                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_UNKNOWN:
                                    {
                                        #region 未知mode

                                        string errInfo = string.Format("mode有误");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_device_detail_response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion
                                    }
                            }

                            break;

                            #endregion                                         
                        }
                    case AppMsgType.app_all_province_request:
                        {
                            #region 获取所有省信息

                            List<Province> provinceList = new List<Province>();

                            int rtv = gDbHelperUpper.db_getProvince_info(ref provinceList);

                            gAppUpper.Body.type = AppMsgType.app_all_province_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);

                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            if (rtv != 0)
                            {
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ProvinceCount", provinceList.Count.ToString());
                                for (int i = 0; i < provinceList.Count; i++)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();

                                    ndic.name = i.ToString();
                                    ndic.dic.Add("provice_id", provinceList[i].provice_id);
                                    ndic.dic.Add("provice_name", provinceList[i].provice_name);

                                    gAppUpper.Body.n_dic.Add(ndic);
                                }

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion                            
                        }
                    case AppMsgType.app_get_city_request:
                        {
                            #region 获取信息

                            string provice_id = "";

                            if (gAppUpper.Body.dic.ContainsKey("provice_id"))
                            {
                                provice_id = gAppUpper.Body.dic["provice_id"].ToString();
                            }

                            if (provice_id == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_get_city_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_get_city_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_get_city_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_get_city_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 获取对应城市信息

                            List<City> cityList = new List<City>();
                            int rtv = gDbHelperUpper.db_getCity_info(ref cityList, provice_id);

                            gAppUpper.Body.type = AppMsgType.app_get_city_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            if (rtv != 0)
                            {
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("CityCount", cityList.Count.ToString());
                                for (int i = 0; i < cityList.Count; i++)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();

                                    ndic.name = i.ToString();
                                    ndic.dic.Add("city_id", cityList[i].city_id);
                                    ndic.dic.Add("city_name", cityList[i].city_name);

                                    gAppUpper.Body.n_dic.Add(ndic);
                                }

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion                            
                        }
                    case AppMsgType.app_get_distract_request:
                        {
                            #region 获取信息

                            string city_id = "";

                            if (gAppUpper.Body.dic.ContainsKey("city_id"))
                            {
                                city_id = gAppUpper.Body.dic["city_id"].ToString();
                            }

                            if (city_id == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_get_distract_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_get_distract_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_get_distract_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_get_distract_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 获取对应区信息

                            List<Distract> distractList = new List<Distract>();
                            int rtv = gDbHelperUpper.db_getDistract_info(ref distractList, city_id);

                            gAppUpper.Body.type = AppMsgType.app_get_distract_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            if (rtv != 0)
                            {
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("DistractCount", distractList.Count.ToString());
                                for (int i = 0; i < distractList.Count; i++)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();

                                    ndic.name = i.ToString();
                                    ndic.dic.Add("county_name", distractList[i].county_name);
                                    gAppUpper.Body.n_dic.Add(ndic);
                                }

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion                            
                        }
                    case AppMsgType.app_all_user_request:
                        {
                            #region 返回信息

                            DataTable dt = new DataTable();
                            int rtv = gDbHelperUpper.user_record_entity_get(ref dt);

                            gAppUpper.Body.type = AppMsgType.app_all_user_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            if (rtv == 0)
                            {
                                gAppUpper.Body.dic.Add("UserCount", dt.Rows.Count.ToString());

                                int i = 1;
                                foreach (DataRow dr in dt.Rows)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();
                                    ndic.name = i.ToString();

                                    if (string.IsNullOrEmpty(dr["name"].ToString()))
                                    {
                                        ndic.dic.Add("name", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("name", dr["name"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["des"].ToString()))
                                    {
                                        ndic.dic.Add("des", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("des", dr["des"].ToString());
                                    }

                                    gAppUpper.Body.n_dic.Add(ndic);
                                    i++;
                                }
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion
                        }
                    case AppMsgType.app_add_user_request:
                        {
                            #region 获取信息

                            string name = "";
                            string psw = "";
                            string des = "";

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("psw"))
                            {
                                psw = gAppUpper.Body.dic["psw"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                des = gAppUpper.Body.dic["des"].ToString();

                                if (string.IsNullOrEmpty(des))
                                {
                                    des = "null";
                                }
                            }
                            else
                            {
                                des = "null";
                            }

                            if (name == "" || psw == "" || des == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_add_user_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_add_user_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_add_user_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_add_user_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.user_record_insert(name, psw, des);

                            gAppUpper.Body.type = AppMsgType.app_add_user_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_del_user_request:
                        {
                            #region 获取信息

                            string name = "";

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (name == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_del_user_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_del_user_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_del_user_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_del_user_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.user_record_delete(name);

                            gAppUpper.Body.type = AppMsgType.app_del_user_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                             
                        }
                    case AppMsgType.app_modify_user_psw_request:
                        {
                            #region 获取信息

                            string name = "";
                            string oldPasswd = "";
                            string newPasswd = "";

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("oldPasswd"))
                            {
                                oldPasswd = gAppUpper.Body.dic["oldPasswd"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("newPasswd"))
                            {
                                newPasswd = gAppUpper.Body.dic["newPasswd"].ToString();
                            }

                            if (name == "" || oldPasswd == "" || newPasswd == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_modify_user_psw_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_modify_user_psw_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_modify_user_psw_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_modify_user_psw_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.user_record_update(name, oldPasswd, newPasswd);

                            gAppUpper.Body.type = AppMsgType.app_modify_user_psw_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                             
                        }
                    case AppMsgType.app_all_privilege_request:
                        {
                            #region 返回信息

                            DataTable dt = new DataTable();
                            int rtv = gDbHelperUpper.privilege_record_entity_get(ref dt);

                            gAppUpper.Body.type = AppMsgType.app_all_privilege_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            if (rtv == 0)
                            {
                                gAppUpper.Body.dic.Add("PrivilegeCount", dt.Rows.Count.ToString());

                                int i = 1;
                                foreach (DataRow dr in dt.Rows)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();
                                    ndic.name = i.ToString();

                                    if (string.IsNullOrEmpty(dr["priId"].ToString()))
                                    {
                                        ndic.dic.Add("priId", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("priId", dr["priId"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["funName"].ToString()))
                                    {
                                        ndic.dic.Add("funName", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("funName", dr["funName"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["aliasName"].ToString()))
                                    {
                                        ndic.dic.Add("aliasName", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("aliasName", dr["aliasName"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["des"].ToString()))
                                    {
                                        ndic.dic.Add("des", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("des", dr["des"].ToString());
                                    }

                                    gAppUpper.Body.n_dic.Add(ndic);
                                    i++;
                                }
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion
                        }
                    case AppMsgType.app_add_privilege_request:
                        {
                            #region 获取信息     

                            string funName = "";
                            string aliasName = "";
                            string des = "";

                            if (gAppUpper.Body.dic.ContainsKey("funName"))
                            {
                                funName = gAppUpper.Body.dic["funName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("aliasName"))
                            {
                                aliasName = gAppUpper.Body.dic["aliasName"].ToString();
                                if (string.IsNullOrEmpty(aliasName))
                                {
                                    aliasName = "null";
                                }
                            }
                            else
                            {
                                aliasName = "null";
                            }

                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                des = gAppUpper.Body.dic["des"].ToString();
                                if (string.IsNullOrEmpty(des))
                                {
                                    des = "null";
                                }
                            }
                            else
                            {
                                des = "null";
                            }

                            if (funName == "" || aliasName == "" || des == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_add_privilege_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_add_privilege_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_add_privilege_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_add_privilege_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.privilege_record_insert(funName, aliasName, des);

                            gAppUpper.Body.type = AppMsgType.app_add_privilege_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion
                        }
                    case AppMsgType.app_del_privilege_request:
                        {
                            #region 获取信息

                            string funName = "";

                            if (gAppUpper.Body.dic.ContainsKey("funName"))
                            {
                                funName = gAppUpper.Body.dic["funName"].ToString();
                            }

                            if (funName == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_del_privilege_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_del_privilege_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_del_privilege_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_del_privilege_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.privilege_record_delete(funName);

                            gAppUpper.Body.type = AppMsgType.app_del_user_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                             
                        }
                    case AppMsgType.app_all_usr_group_request:
                        {
                            #region 返回信息

                            DataTable dt = new DataTable();

                            //usrRoleId,usrName,roleName,des
                            int rtv = gDbHelperUpper.userrole_record_entity_get(ref dt);

                            gAppUpper.Body.type = AppMsgType.app_all_usr_group_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            if (rtv == 0)
                            {
                                gAppUpper.Body.dic.Add("UsrGroupCount", dt.Rows.Count.ToString());
                                gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                                foreach (DataRow dr in dt.Rows)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();

                                    if (string.IsNullOrEmpty(dr["usrRoleId"].ToString()))
                                    {
                                        ndic.name = "null";
                                    }
                                    else
                                    {
                                        ndic.name = dr["usrRoleId"].ToString();
                                    }

                                    if (string.IsNullOrEmpty(dr["usrName"].ToString()))
                                    {
                                        ndic.dic.Add("usrName", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("usrName", dr["usrName"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["roleName"].ToString()))
                                    {
                                        ndic.dic.Add("roleName", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("roleName", dr["roleName"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["des"].ToString()))
                                    {
                                        ndic.dic.Add("des", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("des", dr["des"].ToString());
                                    }

                                    gAppUpper.Body.n_dic.Add(ndic);
                                }
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion
                        }
                    case AppMsgType.app_add_usr_group_request:
                        {
                            #region 获取信息

                            string usrName = "";
                            string roleName = "";
                            string des = "";

                            if (gAppUpper.Body.dic.ContainsKey("usrName"))
                            {
                                usrName = gAppUpper.Body.dic["usrName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("roleName"))
                            {
                                roleName = gAppUpper.Body.dic["roleName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                des = gAppUpper.Body.dic["des"].ToString();

                                if (string.IsNullOrEmpty(des))
                                {
                                    des = "null";
                                }
                            }
                            else
                            {
                                des = "null";
                            }

                            if (usrName == "" || roleName == "" || des == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_add_usr_group_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_add_usr_group_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_add_usr_group_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_add_usr_group_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.userrole_record_insert(usrName, roleName, des);

                            gAppUpper.Body.type = AppMsgType.app_add_usr_group_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_del_usr_group_request:
                        {
                            #region 获取信息

                            string usrName = "";
                            string roleName = "";

                            if (gAppUpper.Body.dic.ContainsKey("usrName"))
                            {
                                usrName = gAppUpper.Body.dic["usrName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("roleName"))
                            {
                                roleName = gAppUpper.Body.dic["roleName"].ToString();
                            }

                            if (usrName == "" || roleName == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_del_usr_group_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_del_usr_group_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_del_usr_group_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_del_usr_group_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.userrole_record_delete(usrName, roleName);

                            gAppUpper.Body.type = AppMsgType.app_del_usr_group_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_all_group_privilege_request:
                        {
                            #region 返回信息

                            DataTable dt = new DataTable();
                            int rtv = gDbHelperUpper.roleprivilege_record_entity_get(ref dt);

                            gAppUpper.Body.type = AppMsgType.app_all_group_privilege_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            if (rtv == 0)
                            {
                                gAppUpper.Body.dic.Add("GroupPriCount", dt.Rows.Count.ToString());

                                //rolePriId,roleName,priIdSet,des
                                foreach (DataRow dr in dt.Rows)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();

                                    if (string.IsNullOrEmpty(dr["roleName"].ToString()))
                                    {
                                        ndic.name = "null";
                                    }
                                    else
                                    {
                                        ndic.name = dr["roleName"].ToString();
                                    }

                                    if (string.IsNullOrEmpty(dr["priIdSet"].ToString()))
                                    {
                                        ndic.dic.Add("priIdSet", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("priIdSet", dr["priIdSet"].ToString());
                                    }

                                    if (string.IsNullOrEmpty(dr["des"].ToString()))
                                    {
                                        ndic.dic.Add("des", "null");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("des", dr["des"].ToString());
                                    }

                                    gAppUpper.Body.n_dic.Add(ndic);
                                }
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion
                        }
                    case AppMsgType.app_add_group_privilege_request:
                        {
                            #region 获取信息

                            //   "roleName":"RoleSA",
                            //   "priIdSet":"1,2,3,4,5,6,7",
                            //   "des":"备注"

                            string roleName = "";
                            string priIdSet = "";
                            string des = "";

                            if (gAppUpper.Body.dic.ContainsKey("roleName"))
                            {
                                roleName = gAppUpper.Body.dic["roleName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("priIdSet"))
                            {
                                priIdSet = gAppUpper.Body.dic["priIdSet"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                des = gAppUpper.Body.dic["des"].ToString();

                                if (string.IsNullOrEmpty(des))
                                {
                                    des = "null";
                                }
                            }
                            else
                            {
                                des = "null";
                            }

                            if (roleName == "" || priIdSet == "" || des == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_add_group_privilege_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_add_group_privilege_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_add_group_privilege_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_add_group_privilege_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.roleprivilege_record_insert(roleName, priIdSet, des);

                            gAppUpper.Body.type = AppMsgType.app_add_group_privilege_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_del_group_privilege_request:
                        {
                            #region 获取信息

                            string roleName = "";

                            if (gAppUpper.Body.dic.ContainsKey("roleName"))
                            {
                                roleName = gAppUpper.Body.dic["roleName"].ToString();
                            }

                            if (roleName == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_del_group_privilege_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_del_group_privilege_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_del_group_privilege_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_del_group_privilege_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.roleprivilege_record_delete(roleName);

                            gAppUpper.Body.type = AppMsgType.app_del_group_privilege_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_update_group_privilege_request:
                        {
                            #region 获取信息

                            //   "roleName":"RoleSA",
                            //   "priIdSet":"1,2,3,4,5,6,7",
                            //   "des":"备注"

                            string roleName = "";
                            string priIdSet = "";
                            string des = "";

                            if (gAppUpper.Body.dic.ContainsKey("roleName"))
                            {
                                roleName = gAppUpper.Body.dic["roleName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("priIdSet"))
                            {
                                priIdSet = gAppUpper.Body.dic["priIdSet"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                des = gAppUpper.Body.dic["des"].ToString();

                                if (string.IsNullOrEmpty(des))
                                {
                                    des = "null";
                                }
                            }
                            else
                            {
                                des = "null";
                            }

                            if (roleName == "" || priIdSet == "" || des == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_update_group_privilege_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_update_group_privilege_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_update_group_privilege_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_update_group_privilege_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.roleprivilege_record_update(roleName, priIdSet, des);

                            gAppUpper.Body.type = AppMsgType.app_update_group_privilege_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            if (rtv != 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_all_usr_domain_request:
                        {
                            #region 获取信息

                            DataTable dt = new DataTable();
                            int rtv = gDbHelperUpper.userdomain_record_entity_get(ref dt);

                            if ((int)RC.SUCCESS != rtv)
                            {
                                string errInfo = get_debug_info() + gDbHelperUpper.get_rtv_str(rtv);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_usr_domain_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_usr_domain_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                            gAppUpper.Body.dic.Add("UsrDomaiCount", dt.Rows.Count.ToString());

                            //usrDomainId,usrName,domainIdSet,des
                            foreach (DataRow dr in dt.Rows)
                            {
                                Name_DIC_Struct ndic = new Name_DIC_Struct();

                                if (string.IsNullOrEmpty(dr["usrName"].ToString()))
                                {
                                    ndic.name = "null";
                                }
                                else
                                {
                                    ndic.name = dr["usrName"].ToString();
                                }

                                if (string.IsNullOrEmpty(dr["domainIdSet"].ToString()))
                                {
                                    ndic.dic.Add("domainIdSet", "null");
                                }
                                else
                                {
                                    string nameFullPathSet = "";
                                    if (0 != change_domain_id_2_nameFullPath(dr["domainIdSet"].ToString(), ref nameFullPathSet))
                                    {
                                        add_log_info(LogInfoType.EROR, "change_domain_id_2_nameFullPath出错", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, "change_domain_id_2_nameFullPath出错", "Main", LogCategory.I);
                                        continue;
                                    }
                                    else
                                    {
                                        ndic.dic.Add("domainIdSet", nameFullPathSet);
                                    }
                                }

                                if (string.IsNullOrEmpty(dr["des"].ToString()))
                                {
                                    ndic.dic.Add("des", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("des", dr["des"].ToString());
                                }

                                gAppUpper.Body.n_dic.Add(ndic);
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion
                        }
                    case AppMsgType.app_add_usr_domain_request:
                        {
                            #region 获取信息

                            //   "usrName":"root",
                            //   "domainIdSet":"9,18",
                            //   "des":"添加用户root的域集合"

                            string usrName = "";
                            string domainIdSet = "";
                            string des = " ";

                            if (gAppUpper.Body.dic.ContainsKey("usrName"))
                            {
                                usrName = gAppUpper.Body.dic["usrName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("domainIdSet"))
                            {
                                domainIdSet = gAppUpper.Body.dic["domainIdSet"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["des"].ToString()))
                                {
                                    des = gAppUpper.Body.dic["des"].ToString();
                                }
                            }


                            if (usrName == "" || domainIdSet == "")
                            {
                                //返回出错处理                        
                                string errInfo = string.Format("app_add_usr_domain_request,参数有误");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_usr_domain_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            string idSet = "";

                            if (0 != change_domain_nameFullPath_2_id(domainIdSet, ref idSet))
                            {
                                //返回出错处理                        
                                string errInfo = string.Format("change_domain_nameFullPath_2_id,出错");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_usr_domain_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            int rtv = gDbHelperUpper.userdomain_record_insert(usrName, idSet, des);

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_usr_domain_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_del_usr_domain_request:
                        {
                            #region 获取信息

                            string usrName = "";

                            if (gAppUpper.Body.dic.ContainsKey("usrName"))
                            {
                                usrName = gAppUpper.Body.dic["usrName"].ToString();
                            }

                            if (usrName == "")
                            {
                                //返回出错处理
                                string errInfo = get_debug_info() + string.Format("app_del_usr_domain_request,参数有误");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_usr_domain_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            int rtv = gDbHelperUpper.userdomain_record_delete(usrName);

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_usr_domain_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_update_usr_domain_request:
                        {
                            #region 获取信息

                            //   "usrName":"root",
                            //   "domainIdSet":"9,18",
                            //   "des":"添加用户root的域集合"

                            string usrName = "";
                            string domainIdSet = "";
                            string des = " ";

                            if (gAppUpper.Body.dic.ContainsKey("usrName"))
                            {
                                usrName = gAppUpper.Body.dic["usrName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("domainIdSet"))
                            {
                                domainIdSet = gAppUpper.Body.dic["domainIdSet"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["des"].ToString()))
                                {
                                    des = gAppUpper.Body.dic["des"].ToString();
                                }
                            }

                            if (usrName == "" || domainIdSet == "")
                            {
                                //返回出错处理
                                string errInfo = get_debug_info() + string.Format("app_update_usr_domain_request,参数有误");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_update_usr_domain_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            string idSet = "";
                            if (0 != change_domain_nameFullPath_2_id(domainIdSet, ref idSet))
                            {
                                //返回出错处理                        
                                string errInfo = string.Format("change_domain_nameFullPath_2_id,出错");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_update_usr_domain_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            int rtv = gDbHelperUpper.userdomain_record_update(usrName, idSet, des);

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_update_usr_domain_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_add_bwlist_request:
                        {
                            #region 获取信息

                            // 
                            // GSW和WCDMA的设备，IMSI和IMEI可同时设置
                            //
                            // "bwListApplyTo":"device",                                    //黑白名单适用于那种类型，device或者domain                          
                            // "deviceFullPathName":"设备.深圳.福田.中心广场.西北监控.电信TDD",   //bwListApplyTo为device时起作用
                            // "domainFullPathName":"设备.深圳.福田",                         //bwListApplyTo为domain时起作用

                            int rtv = -1;
                            strDevice devInfo = new strDevice();
                            strBwListSetInfo bwo = new strBwListSetInfo();

                            string bwListApplyTo = "";
                            string deviceFullPathName = "";
                            string domainFullPathName = "";
                            
                            if (gAppUpper.Body.dic.ContainsKey("bwListApplyTo"))
                            {
                                bwListApplyTo = gAppUpper.Body.dic["bwListApplyTo"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("deviceFullPathName"))
                            {
                                deviceFullPathName = gAppUpper.Body.dic["deviceFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("domainFullPathName"))
                            {
                                domainFullPathName = gAppUpper.Body.dic["domainFullPathName"].ToString();
                            }

                            if (bwListApplyTo == "device")
                            {
                                if (!gDicDevFullName.ContainsKey(deviceFullPathName))
                                {
                                    string errInfo = string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", get_debug_info() + deviceFullPathName);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    devInfo = gDicDevFullName[deviceFullPathName];
                                    bwo.devId = devInfo.id.ToString();
                                    bwo.devFullName = deviceFullPathName;
                                }
                            }
                            else if (bwListApplyTo == "domain")
                            {
                                if ((int)RC.NO_EXIST == gDbHelperUpper.domain_record_exist(domainFullPathName))
                                {
                                    string errInfo = get_debug_info() + domainFullPathName + ":记录不存在";
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    int domainId = -1;
                                    if ((int)RC.SUCCESS == gDbHelperUpper.domain_get_id_by_nameFullPath(domainFullPathName, ref domainId))
                                    {
                                        bwo.domainId = domainId.ToString();
                                    }
                                    else
                                    {
                                        string errInfo = get_debug_info() + domainFullPathName + ":获取ID出错.";
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + "bwListApplyTo必须为device或domain.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (gAppUpper.Body.n_dic == null || gAppUpper.Body.n_dic.Count == 0)
                            {
                                string errInfo = get_debug_info() + "n_dic中没有信息,参数有误";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (-1 == get_bwolist_info(gAppUpper, ref bwo))
                            {
                                string errInfo = get_debug_info() + "从n_dic中获取黑白名单列表失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                bwo.hasRsp = false;

                                #region 拆箱处理，2018-10-15

                                bwo.imms = new IMMS();
                                bwo.imms.Version = gAppUpper.Version;

                                bwo.imms.ApInfo.SN = gAppUpper.ApInfo.SN;
                                bwo.imms.ApInfo.Fullname = gAppUpper.ApInfo.Fullname;
                                bwo.imms.ApInfo.IP = gAppUpper.ApInfo.IP;
                                bwo.imms.ApInfo.Port = gAppUpper.ApInfo.Port;
                                bwo.imms.ApInfo.Type = gAppUpper.ApInfo.Type;

                                bwo.imms.Body.type = gAppUpper.Body.type;
                                bwo.imms.Body.dic = gAppUpper.Body.dic;
                                bwo.imms.Body.n_dic = gAppUpper.Body.n_dic;

                                bwo.imms.MsgType = gAppUpper.MsgType;

                                bwo.imms.AppInfo.User = gAppUpper.AppInfo.User;
                                bwo.imms.AppInfo.Group = gAppUpper.AppInfo.Group;
                                bwo.imms.AppInfo.Domain = gAppUpper.AppInfo.Domain;
                                bwo.imms.AppInfo.Ip = gAppUpper.AppInfo.Ip;
                                bwo.imms.AppInfo.Port = gAppUpper.AppInfo.Port;
                                bwo.imms.AppInfo.Type = gAppUpper.AppInfo.Type;

                                #endregion

                                bwo.operTypeReq = AppMsgType.app_add_bwlist_request;
                                bwo.operTypeRsp = AppMsgType.app_add_bwlist_response;
                            }

                            #endregion

                            #region 返回消息

                            if (bwListApplyTo == "device")
                            {
                                #region 设备的处理                               

                                //入队处理
                                lock (mutex_bwoList)
                                {
                                    gBWOProcess.Enqueue(bwo);                                                                          
                                }

                                #endregion
                            }
                            else
                            {
                                #region 域的处理

                                List<int> listDevId = new List<int>();
                                //List<string> listDevFullName = new List<string>();

                                //黑白名单关联到域                             
                                rtv = gDbHelperUpper.domain_record_device_id_list_get(domainFullPathName, ref listDevId);
                                if (rtv == (int)RC.SUCCESS)
                                {
                                    int inx = 0;
                                    foreach (int id in listDevId)
                                    {
                                        foreach (KeyValuePair<string, strDevice> kvp in gDicDevFullName)
                                        {
                                            if (kvp.Value.id == id)
                                            {
                                                //listDevFullName.Add(kvp.Key);
                                                bwo.devId = id.ToString();
                                                bwo.devFullName = kvp.Key;

                                                inx++;
                                                string info = string.Format("Enqueue{0}:{1}:{2}", inx,bwo.devId ,bwo.devFullName);
                                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                                //入队处理
                                                lock (mutex_bwoList)
                                                {                            
                                                    gBWOProcess.Enqueue(bwo);
                                                }

                                                break;
                                            }
                                        }
                                    }                                                                            
                                }
                                else
                                {
                                    string errInfo = string.Format("domain_record_device_id_list_get出错:{0}.", gDbHelperUpper.get_rtv_str(rtv));
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_add_bwlist_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }

                                #endregion
                            }

                            break;

                            #endregion
                        }
                    case AppMsgType.app_del_bwlist_request:
                        {
                            #region 获取信息

                            //   "bwListApplyTo":"device",                                    //黑白名单适用于那种类型，device或者domain  
                            //   "deviceFullPathName":"设备.深圳.福田.中心广场.西北监控.电信TDD",  //bwListApplyTo为device时起作用
                            //   "domainFullPathName":"设备.深圳.福田",                         //bwListApplyTo为domain时起作用

                            int rtv = -1;
                            strDevice devInfo = new strDevice();
                            strBwListSetInfo bwo = new strBwListSetInfo();
                            
                            string bwListApplyTo = "";
                            string deviceFullPathName = "";
                            string domainFullPathName = "";

                            if (gAppUpper.Body.dic.ContainsKey("bwListApplyTo"))
                            {
                                bwListApplyTo = gAppUpper.Body.dic["bwListApplyTo"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("deviceFullPathName"))
                            {
                                deviceFullPathName = gAppUpper.Body.dic["deviceFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("domainFullPathName"))
                            {
                                domainFullPathName = gAppUpper.Body.dic["domainFullPathName"].ToString();
                            }

                            if (bwListApplyTo == "device")
                            {
                                deviceFullPathName = gAppUpper.Body.dic["deviceFullPathName"].ToString();
                                if (!gDicDevFullName.ContainsKey(deviceFullPathName))
                                {
                                    string errInfo = string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", get_debug_info() + deviceFullPathName);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_bwlist_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    devInfo = gDicDevFullName[deviceFullPathName];
                                    bwo.devId = devInfo.id.ToString();
                                    bwo.devFullName = deviceFullPathName;
                                }

                            }
                            else if (bwListApplyTo == "domain")
                            {
                                domainFullPathName = gAppUpper.Body.dic["domainFullPathName"].ToString();
                                if ((int)RC.NO_EXIST == gDbHelperUpper.domain_record_exist(domainFullPathName))
                                {
                                    string errInfo = get_debug_info() + domainFullPathName + ":记录不存在";
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_bwlist_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    int domainId = -1;
                                    if ((int)RC.SUCCESS == gDbHelperUpper.domain_get_id_by_nameFullPath(domainFullPathName, ref domainId))
                                    {
                                        bwo.domainId = domainId.ToString();
                                    }
                                    else
                                    {
                                        string errInfo = get_debug_info() + domainFullPathName + ":获取ID出错.";
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_bwlist_response, -1, errInfo, true, "1", "2");
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + "bwListApplyTo必须为device或domain.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_bwlist_response, -1, errInfo, true, "1", "2");
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (gAppUpper.Body.n_dic == null || gAppUpper.Body.n_dic.Count == 0)
                            {
                                string errInfo = get_debug_info() + "n_dic中没有信息,参数有误.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_bwlist_response, -1, errInfo, true, "1", "2");
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                           
                            if (-1 == get_bwolist_info(gAppUpper, ref bwo))
                            {
                                string errInfo = get_debug_info() + "从n_dic中获取黑白名单列表失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_bwlist_response, -1, errInfo, true, "1", "2");
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                bwo.hasRsp = false;

                                #region 拆箱处理，2018-10-15

                                bwo.imms = new IMMS();
                                bwo.imms.Version = gAppUpper.Version;

                                bwo.imms.ApInfo.SN = gAppUpper.ApInfo.SN;
                                bwo.imms.ApInfo.Fullname = gAppUpper.ApInfo.Fullname;
                                bwo.imms.ApInfo.IP = gAppUpper.ApInfo.IP;
                                bwo.imms.ApInfo.Port = gAppUpper.ApInfo.Port;
                                bwo.imms.ApInfo.Type = gAppUpper.ApInfo.Type;

                                bwo.imms.Body.type = gAppUpper.Body.type;
                                bwo.imms.Body.dic = gAppUpper.Body.dic;
                                bwo.imms.Body.n_dic = gAppUpper.Body.n_dic;

                                bwo.imms.MsgType = gAppUpper.MsgType;

                                bwo.imms.AppInfo.User = gAppUpper.AppInfo.User;
                                bwo.imms.AppInfo.Group = gAppUpper.AppInfo.Group;
                                bwo.imms.AppInfo.Domain = gAppUpper.AppInfo.Domain;
                                bwo.imms.AppInfo.Ip = gAppUpper.AppInfo.Ip;
                                bwo.imms.AppInfo.Port = gAppUpper.AppInfo.Port;
                                bwo.imms.AppInfo.Type = gAppUpper.AppInfo.Type;

                                #endregion

                                bwo.operTypeReq = AppMsgType.app_del_bwlist_request;
                                bwo.operTypeRsp = AppMsgType.app_del_bwlist_response;
                            }


                            #endregion

                            #region 返回消息

                            if (bwListApplyTo == "device")
                            {
                                #region 设备的处理

                                //入队处理
                                lock (mutex_bwoList)
                                {
                                    gBWOProcess.Enqueue(bwo);
                                }

                                #endregion                                                                                   
                            }
                            else
                            {
                                #region 域的处理
                               
                                List<int> listDevId = new List<int>();
                                //List<string> listDevFullName = new List<string>();

                                //黑白名单关联到域                             
                                rtv = gDbHelperUpper.domain_record_device_id_list_get(domainFullPathName, ref listDevId);
                                if (rtv == (int)RC.SUCCESS)
                                {
                                    foreach (int id in listDevId)
                                    {
                                        foreach (KeyValuePair<string, strDevice> kvp in gDicDevFullName)
                                        {
                                            if (kvp.Value.id == id)
                                            {
                                                //listDevFullName.Add(kvp.Key);
                                                bwo.devId = id.ToString();
                                                bwo.devFullName = kvp.Key;

                                                //入队处理
                                                lock (mutex_bwoList)
                                                {
                                                    gBWOProcess.Enqueue(bwo);
                                                }

                                                break;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    string errInfo = string.Format("domain_record_device_id_list_get出错:{0}.", gDbHelperUpper.get_rtv_str(rtv));
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_bwlist_response, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }

                                #endregion
                            }

                            break;

                            #endregion
                        }
                    case AppMsgType.app_all_bwlist_request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);

                            // 
                            // GSM和WCDMA的设备，IMSI和IMEI可同时设置
                            //
                            // "bwListApplyTo":"device",                                    //黑白名单适用于那种类型，device或者domain                          
                            // "deviceFullPathName":"设备.深圳.福田.中心广场.西北监控.电信TDD",  //bwListApplyTo为device时起作用
                            // "domainFullPathName":"设备.深圳.福田",                         //bwListApplyTo为domain时起作用

                            int rtv = -1;
                            strDevice devInfo = new strDevice();

                            string bwListApplyTo = "";
                            string deviceFullPathName = "";
                            string domainFullPathName = "";

                            if (gAppUpper.Body.dic.ContainsKey("bwListApplyTo"))
                            {
                                bwListApplyTo = gAppUpper.Body.dic["bwListApplyTo"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("deviceFullPathName"))
                            {
                                deviceFullPathName = gAppUpper.Body.dic["deviceFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("domainFullPathName"))
                            {
                                domainFullPathName = gAppUpper.Body.dic["domainFullPathName"].ToString();
                            }

                            if (bwListApplyTo == "device")
                            {
                                if (!gDicDevFullName.ContainsKey(deviceFullPathName))
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", deviceFullPathName);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    devInfo = gDicDevFullName[deviceFullPathName];
                                }
                            }
                            else if (bwListApplyTo == "domain")
                            {
                                if ((int)RC.NO_EXIST == gDbHelperUpper.domain_record_exist(domainFullPathName))
                                {
                                    string errInfo = get_debug_info() + domainFullPathName + ":记录不存在";
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + "bwListApplyTo必须为device或domain.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            strBwQuery bq = new strBwQuery();

                            if (gAppUpper.Body.dic.ContainsKey("imsi"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["imsi"].ToString()))
                                {
                                    bq.imsi = gAppUpper.Body.dic["imsi"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("imei"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["imei"].ToString()))
                                {
                                    bq.imei = gAppUpper.Body.dic["imei"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("bwFlag"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["bwFlag"].ToString()))
                                {
                                    string bwFlag = gAppUpper.Body.dic["bwFlag"].ToString();

                                    if (bwFlag != "black" && bwFlag != "white" && bwFlag != "other")
                                    {
                                        string errInfo = get_debug_info() + string.Format("bwFlag的类型不对");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }

                                    if (bwFlag == "black")
                                    {
                                        bq.bwFlag = bwType.BWTYPE_BLACK;
                                    }
                                    else if (bwFlag == "white")
                                    {
                                        bq.bwFlag = bwType.BWTYPE_WHITE;
                                    }
                                    else
                                    {
                                        bq.bwFlag = bwType.BWTYPE_OTHER;
                                    }
                                }
                                else
                                {
                                    bq.bwFlag = bwType.BWTYPE_ALL;
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("timeStart"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["timeStart"].ToString()))
                                {
                                    bq.timeStart = gAppUpper.Body.dic["timeStart"].ToString();
                                    try
                                    {
                                        DateTime.Parse(bq.timeStart);
                                    }
                                    catch
                                    {
                                        string errInfo = get_debug_info() + string.Format("timeStart的格式不对");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else
                                {
                                    bq.timeStart = "1900-01-01 12:34:56";
                                }
                            }
                            else
                            {
                                bq.timeStart = "1900-01-01 12:34:56";
                            }

                            if (gAppUpper.Body.dic.ContainsKey("timeEnded"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["timeEnded"].ToString()))
                                {
                                    bq.timeEnded = gAppUpper.Body.dic["timeEnded"].ToString();
                                    try
                                    {
                                        DateTime.Parse(bq.timeEnded);
                                        if (string.Compare(bq.timeStart, bq.timeEnded) > 0)
                                        {
                                            string errInfo = get_debug_info() + string.Format("timeStart大于timeEnded.");
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }
                                    }
                                    catch
                                    {
                                        string errInfo = get_debug_info() + string.Format("timeEnded的格式不对");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else
                                {
                                    bq.timeEnded = "2918-06-05 12:34:56";
                                }
                            }
                            else
                            {
                                bq.timeEnded = "2918-06-05 12:34:56";
                            }


                            if (gAppUpper.Body.dic.ContainsKey("des"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["des"].ToString()))
                                {
                                    bq.des = gAppUpper.Body.dic["des"].ToString();
                                }
                            }

                            #endregion

                            #region 返回消息

                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (bwListApplyTo == "device")
                            {
                                #region 设备的处理 

                                if (gDicBwListQueryInfo.ContainsKey(appId))
                                {                                                        
                                    gDicBwListQueryInfo.Remove(appId);                                    
                                }

                                strBwListQueryInfo qi = new strBwListQueryInfo();
                                qi.bwListApplyTo = bwListApplyTo;
                                qi.deviceFullPathName = deviceFullPathName;

                                qi.dt = new DataTable();            
                                rtv = gDbHelperUpper.bwlist_record_entity_get(ref qi.dt, devInfo.id, bq, gDicDevId_Station_DevName);                    
                                if (rtv == 0)
                                {
                                    qi.totalRecords = qi.dt.Rows.Count;
                                    qi.totalPages = (int)Math.Ceiling((double)qi.dt.Rows.Count / DataController.RecordsOfPageSize);
                                    qi.pageSize = DataController.RecordsOfPageSize;
                                }

                                //添加App对应的黑白名单查询条件和结果
                                gDicBwListQueryInfo.Add(appId, qi);


                                if (rtv != (int)RC.SUCCESS)
                                {
                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    string pageInfo = "";
                                    if (gDicBwListQueryInfo[appId].dt.Rows.Count == 0)
                                    {
                                        pageInfo = "0:0";
                                    }
                                    else
                                    {
                                        pageInfo = string.Format("1:{0}", Math.Ceiling((double)gDicBwListQueryInfo[appId].dt.Rows.Count / DataController.RecordsOfPageSize));
                                    }

                                    int firstPageSize = 0;
                                    if (gDicBwListQueryInfo[appId].dt.Rows.Count > DataController.RecordsOfPageSize)
                                    {
                                        firstPageSize = DataController.RecordsOfPageSize;
                                    }
                                    else
                                    {
                                        firstPageSize = gDicBwListQueryInfo[appId].dt.Rows.Count;
                                    }

                                    #region 取出各条记录

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                    gAppUpper.Body.dic.Add("TotalRecords", gDicBwListQueryInfo[appId].totalRecords.ToString());
                                    gAppUpper.Body.dic.Add("CurPageIndex", pageInfo);
                                    gAppUpper.Body.dic.Add("PageSize", gDicBwListQueryInfo[appId].pageSize.ToString());

                                    for (int inx = 0; inx < firstPageSize; inx++)
                                    {
                                        DataRow dr = gDicBwListQueryInfo[appId].dt.Rows[inx];

                                        Name_DIC_Struct ndic = new Name_DIC_Struct();
                                        ndic.name = (inx + 1).ToString();

                                        if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                                        {
                                            ndic.dic.Add("imsi", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("imsi", dr["imsi"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["imei"].ToString()))
                                        {
                                            ndic.dic.Add("imei", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("imei", dr["imei"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                                        {
                                            ndic.dic.Add("bwFlag", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("bwFlag", dr["bwFlag"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["rbStart"].ToString()))
                                        {
                                            ndic.dic.Add("rbStart", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("rbStart", dr["rbStart"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["rbEnd"].ToString()))
                                        {
                                            ndic.dic.Add("rbEnd", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("rbEnd", dr["rbEnd"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["time"].ToString()))
                                        {
                                            ndic.dic.Add("time", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("time", dr["time"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["des"].ToString()))
                                        {
                                            ndic.dic.Add("des", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("des", dr["des"].ToString());
                                        }

                                        // 2018-10-11
                                        if (string.IsNullOrEmpty(dr["name"].ToString()))
                                        {
                                            ndic.dic.Add("name", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("name", dr["name"].ToString());
                                        }

                                        gAppUpper.Body.n_dic.Add(ndic);
                                    }

                                    #endregion
                                }

                                #endregion
                            }
                            else
                            {
                                #region 域的处理

                                //黑白名单关联到域
                                int affDomainId = -1;
                                List<int> listDevId = new List<int>();

                                //获取一个节点下所有站点下所有设备Id的列表
                                rtv = gDbHelperUpper.domain_record_device_id_list_get(domainFullPathName, ref listDevId);
                                if (rtv != (int)RC.SUCCESS)
                                {
                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(domainFullPathName, ref affDomainId);
                                    if (rtv != (int)RC.SUCCESS)
                                    {
                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }

                                if (!gDicBwListQueryInfo.ContainsKey(appId))
                                {
                                    strBwListQueryInfo qi = new strBwListQueryInfo();

                                    qi.bwListApplyTo = bwListApplyTo;
                                    qi.domainFullPathName = domainFullPathName;
                                    qi.dt = new DataTable();

                                    rtv = gDbHelperUpper.bwlist_record_entity_get(ref qi.dt, listDevId, affDomainId, bq,gDicDevId_Station_DevName);
                                    if (rtv == 0)
                                    {
                                        qi.totalRecords = qi.dt.Rows.Count;
                                        qi.totalPages = (int)Math.Ceiling((double)qi.dt.Rows.Count / DataController.RecordsOfPageSize);
                                        qi.pageSize = DataController.RecordsOfPageSize;
                                    }

                                    //添加App对应的黑白名单查询条件和结果
                                    gDicBwListQueryInfo.Add(appId, qi);
                                }
                                else
                                {
                                    gDicBwListQueryInfo.Remove(appId);

                                    strBwListQueryInfo qi = new strBwListQueryInfo();

                                    qi.bwListApplyTo = bwListApplyTo;
                                    qi.domainFullPathName = domainFullPathName;
                                    qi.dt = new DataTable();

                                    //每次都从库中取吧，因为再次查询时，库可能已经发生变化了。
                                    rtv = gDbHelperUpper.bwlist_record_entity_get(ref qi.dt, listDevId, affDomainId, bq, gDicDevId_Station_DevName);
                                    if (rtv == 0)
                                    {
                                        qi.totalRecords = qi.dt.Rows.Count;
                                        qi.totalPages = (int)Math.Ceiling((double)qi.dt.Rows.Count / DataController.RecordsOfPageSize);
                                        qi.pageSize = DataController.RecordsOfPageSize;
                                    }

                                    //添加App对应的黑白名单查询条件和结果
                                    gDicBwListQueryInfo.Add(appId, qi);
                                }

                                if (rtv != (int)RC.SUCCESS)
                                {
                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    string pageInfo = "";
                                    if (gDicBwListQueryInfo[appId].dt.Rows.Count == 0)
                                    {
                                        pageInfo = "0:0";
                                    }
                                    else
                                    {
                                        pageInfo = string.Format("1:{0}", Math.Ceiling((double)gDicBwListQueryInfo[appId].dt.Rows.Count / DataController.RecordsOfPageSize));
                                    }

                                    int firstPageSize = 0;
                                    if (gDicBwListQueryInfo[appId].dt.Rows.Count > DataController.RecordsOfPageSize)
                                    {
                                        firstPageSize = DataController.RecordsOfPageSize;
                                    }
                                    else
                                    {
                                        firstPageSize = gDicBwListQueryInfo[appId].dt.Rows.Count;
                                    }

                                    #region 取出各条记录

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                    gAppUpper.Body.dic.Add("TotalRecords", gDicBwListQueryInfo[appId].totalRecords.ToString());
                                    gAppUpper.Body.dic.Add("CurPageIndex", pageInfo);
                                    gAppUpper.Body.dic.Add("PageSize", gDicBwListQueryInfo[appId].pageSize.ToString());

                                    for (int inx = 0; inx < firstPageSize; inx++)
                                    {
                                        DataRow dr = gDicBwListQueryInfo[appId].dt.Rows[inx];

                                        Name_DIC_Struct ndic = new Name_DIC_Struct();
                                        ndic.name = (inx + 1).ToString();

                                        if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                                        {
                                            ndic.dic.Add("imsi", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("imsi", dr["imsi"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["imei"].ToString()))
                                        {
                                            ndic.dic.Add("imei", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("imei", dr["imei"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                                        {
                                            ndic.dic.Add("bwFlag", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("bwFlag", dr["bwFlag"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["rbStart"].ToString()))
                                        {
                                            ndic.dic.Add("rbStart", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("rbStart", dr["rbStart"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["rbEnd"].ToString()))
                                        {
                                            ndic.dic.Add("rbEnd", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("rbEnd", dr["rbEnd"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["time"].ToString()))
                                        {
                                            ndic.dic.Add("time", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("time", dr["time"].ToString());
                                        }

                                        if (string.IsNullOrEmpty(dr["des"].ToString()))
                                        {
                                            ndic.dic.Add("des", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("des", dr["des"].ToString());
                                        }

                                        // 2018-10-11
                                        if (string.IsNullOrEmpty(dr["name"].ToString()))
                                        {
                                            ndic.dic.Add("name", "");
                                        }
                                        else
                                        {
                                            ndic.dic.Add("name", dr["name"].ToString());
                                        }

                                        gAppUpper.Body.n_dic.Add(ndic);
                                    }

                                    #endregion
                                }

                                #endregion
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                     
                        }
                    case AppMsgType.app_all_next_page_bwlist_request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);

                            // 
                            // GSW和WCDMA的设备，IMSI和IMEI可同时设置
                            //
                            // "CurPageIndex":"1:50",   
                            //                                                 

                            string CurPageIndex = "";
                            int curPageInx = -1;
                            int totalPages = -1;

                            if (gAppUpper.Body.dic.ContainsKey("CurPageIndex"))
                            {
                                CurPageIndex = gAppUpper.Body.dic["CurPageIndex"].ToString();
                                if (check_and_get_page_info(CurPageIndex, ref curPageInx, ref totalPages) == false)
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:", "CurPageIndex字段解析出错.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:", "没包含字段CurPageIndex");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            if (!gDicBwListQueryInfo.ContainsKey(appId))
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的查询信息不存在.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            strBwListQueryInfo qi = gDicBwListQueryInfo[appId];
                            if (qi.totalPages != totalPages)
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的总页数不匹配.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            int startInx = -1;
                            int endedInx = -1;

                            if (curPageInx == totalPages)
                            {
                                //最后一页
                                startInx = (curPageInx - 1) * qi.pageSize;
                                endedInx = qi.totalRecords;
                            }
                            else
                            {
                                //不是最后一页
                                startInx = (curPageInx - 1) * qi.pageSize;
                                endedInx = startInx + qi.pageSize;
                            }

                            #region 取出各条记录

                            string pageInfo = string.Format("{0}:{1}", curPageInx, qi.totalPages);
                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_all_bwlist_response, 0, gDbHelperUpper.get_rtv_str(0), true, null, null);
                            gAppUpper.Body.dic.Add("TotalRecords", qi.totalRecords.ToString());
                            gAppUpper.Body.dic.Add("CurPageIndex", pageInfo);
                            gAppUpper.Body.dic.Add("PageSize", qi.pageSize.ToString());

                            for (int inx = startInx; inx < endedInx; inx++)
                            {
                                DataRow dr = gDicBwListQueryInfo[appId].dt.Rows[inx];

                                Name_DIC_Struct ndic = new Name_DIC_Struct();
                                ndic.name = (inx + 1).ToString();

                                //ndic.dic.Add("domainId", dr["id"].ToString());
                                //ndic.dic.Add("domainParentId", dr["parentId"].ToString());
                                //ndic.dic.Add("parentFullPathName", dr["nameFullPath"].ToString());
                                //ndic.dic.Add("name", dr["name"].ToString());

                                if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                                {
                                    ndic.dic.Add("imsi", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("imsi", dr["imsi"].ToString());
                                }

                                if (string.IsNullOrEmpty(dr["imei"].ToString()))
                                {
                                    ndic.dic.Add("imei", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("imei", dr["imei"].ToString());
                                }

                                if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                                {
                                    ndic.dic.Add("bwFlag", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("bwFlag", dr["bwFlag"].ToString());
                                }

                                if (string.IsNullOrEmpty(dr["rbStart"].ToString()))
                                {
                                    ndic.dic.Add("rbStart", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("rbStart", dr["rbStart"].ToString());
                                }

                                if (string.IsNullOrEmpty(dr["rbEnd"].ToString()))
                                {
                                    ndic.dic.Add("rbEnd", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("rbEnd", dr["rbEnd"].ToString());
                                }

                                if (string.IsNullOrEmpty(dr["time"].ToString()))
                                {
                                    ndic.dic.Add("time", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("time", dr["time"].ToString());
                                }

                                if (string.IsNullOrEmpty(dr["des"].ToString()))
                                {
                                    ndic.dic.Add("des", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("des", dr["des"].ToString());
                                }

                                // 2018-10-11
                                if (string.IsNullOrEmpty(dr["name"].ToString()))
                                {
                                    ndic.dic.Add("name", "");
                                }
                                else
                                {
                                    ndic.dic.Add("name", dr["name"].ToString());
                                }

                                gAppUpper.Body.n_dic.Add(ndic);
                            }

                            #endregion


                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                     
                        }
                    case AppMsgType.app_set_GenPara_ActiveTime_Request:
                        {
                            #region 获取信息

                            //   "parentFullPathName":"设备.深圳.福田.中心广场.西北监控",
                            //   "name":"电信FDD"
                            //   "carry":"0/1/2"     //有载波时包含该字段，2018-07-31
                            //                       //0表示载波1，1表示载波2，2表示两个载波都设置
                            //
                            //   "activeTime1Start":"09:30:00"  生效时间1的起始时间
                            //   "activeTime1Ended":"12:30:00"  生效时间1的结束时间
                            //   "activeTime2Start":"13:30:00"  生效时间2的起始时间
                            //   "activeTime2Ended":"14:30:00"  生效时间2的结束时间
                            //   "activeTime3Start":"16:30:00"  生效时间3的起始时间，有的话就添加该项
                            //   "activeTime3Ended":"18:30:00"  生效时间3的结束时间，有的话就添加该项
                            //   "activeTime4Start":"20:30:00"  生效时间4的起始时间，有的话就添加该项
                            //   "activeTime4Ended":"22:30:00"  生效时间4的结束时间，有的话就添加该项

                            int rtv = -1;
                            strDevice devInfo = new strDevice();

                            string carry = "";
                            string name = "";
                            string devFullPathName = "";
                            string parentFullPathName = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (parentFullPathName == "" || name == "")
                            {
                                //返回出错处理
                                string errInfo = string.Format("app_set_GenPara_ActiveTime_Request,参数有误.");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (gAppUpper.Body.dic.ContainsKey("carry"))
                            {
                                carry = gAppUpper.Body.dic["carry"].ToString();
                                if (carry != "0" && carry != "1" && carry != "2")
                                {
                                    //返回出错处理
                                    string errInfo = string.Format("app_set_GenPara_ActiveTime_Request,carry = {0},参数有误.", carry);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);

                            if (!gDicDevFullName.ContainsKey(devFullPathName))
                            {
                                //返回出错处理
                                string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", devFullPathName);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[devFullPathName];
                            }

                            #region 时间段信息处理

                            // 2018-09-13 
                            strActiveTime at = new strActiveTime();

                            if (gAppUpper.Body.dic.ContainsKey("activeTime1Start"))
                            {
                                if (null != gAppUpper.Body.dic["activeTime1Start"])
                                {
                                    at.activeTime1Start = gAppUpper.Body.dic["activeTime1Start"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("activeTime1Ended"))
                            {
                                if (null != gAppUpper.Body.dic["activeTime1Ended"])
                                {
                                    at.activeTime1Ended = gAppUpper.Body.dic["activeTime1Ended"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("activeTime2Start"))
                            {
                                if (null != gAppUpper.Body.dic["activeTime2Start"])
                                {
                                    at.activeTime2Start = gAppUpper.Body.dic["activeTime2Start"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("activeTime2Ended"))
                            {
                                if (null != gAppUpper.Body.dic["activeTime2Ended"])
                                {
                                    at.activeTime2Ended = gAppUpper.Body.dic["activeTime2Ended"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("activeTime3Start"))
                            {
                                if (null != gAppUpper.Body.dic["activeTime3Start"])
                                {
                                    at.activeTime3Start = gAppUpper.Body.dic["activeTime3Start"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("activeTime3Ended"))
                            {
                                if (null != gAppUpper.Body.dic["activeTime3Ended"])
                                {
                                    at.activeTime3Ended = gAppUpper.Body.dic["activeTime3Ended"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("activeTime4Start"))
                            {
                                if (null != gAppUpper.Body.dic["activeTime4Start"])
                                {
                                    at.activeTime4Start = gAppUpper.Body.dic["activeTime4Start"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("activeTime4Ended"))
                            {
                                if (null != gAppUpper.Body.dic["activeTime4Ended"])
                                {
                                    at.activeTime4Ended = gAppUpper.Body.dic["activeTime4Ended"].ToString();
                                }
                            }

                            #region 时间段合法性检查

                            // 时间段1处理
                            if (!string.IsNullOrEmpty(at.activeTime1Start) && !string.IsNullOrEmpty(at.activeTime1Ended))
                            {
                                if (at.activeTime1Start != "" && at.activeTime1Ended != "")
                                {
                                    try
                                    {
                                        string dt1 = DateTime.Parse(at.activeTime1Start).ToString("HH:mm:ss");
                                        string dt2 = DateTime.Parse(at.activeTime1Ended).ToString("HH:mm:ss");

                                        if (string.Compare(dt2, dt1) <= 0)
                                        {
                                            string errInfo = string.Format("时间段1:{0} <= {1}", dt2, dt1);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        at.atFlag1 = true;
                                    }
                                    catch (Exception ee)
                                    {
                                        string errInfo = string.Format("时间段1格式有误：{0}", ee.Message + ee.StackTrace);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else if (at.activeTime1Start == "" && at.activeTime1Ended == "")
                                {
                                    //清空
                                }
                                else
                                {
                                    string errInfo = string.Format("时间段1格式有误");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }                            

                            // 时间段2处理
                            if (!string.IsNullOrEmpty(at.activeTime2Start) && !string.IsNullOrEmpty(at.activeTime2Ended))
                            {
                                if (at.activeTime2Start != "" && at.activeTime2Ended != "")
                                {
                                    try
                                    {
                                        string dt1 = DateTime.Parse(at.activeTime2Start).ToString("HH:mm:ss");
                                        string dt2 = DateTime.Parse(at.activeTime2Ended).ToString("HH:mm:ss");

                                        if (string.Compare(dt2, dt1) <= 0)
                                        {
                                            string errInfo = string.Format("时间段2:{0} <= {1}", dt2, dt1);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        at.atFlag2 = true;
                                    }
                                    catch (Exception ee)
                                    {
                                        string errInfo = string.Format("时间段2格式有误：{0}", ee.Message + ee.StackTrace);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else if (at.activeTime2Start == "" && at.activeTime2Ended == "")
                                {
                                    //清空
                                }
                                else
                                {
                                    string errInfo = string.Format("时间段2格式有误");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }                                                        

                            // 时间段3处理
                            if (!string.IsNullOrEmpty(at.activeTime3Start) && !string.IsNullOrEmpty(at.activeTime3Ended))
                            {
                                if (at.activeTime3Start != "" && at.activeTime3Ended != "")
                                {
                                    try
                                    {
                                        string dt1 = DateTime.Parse(at.activeTime3Start).ToString("HH:mm:ss");
                                        string dt2 = DateTime.Parse(at.activeTime3Ended).ToString("HH:mm:ss");

                                        if (string.Compare(dt2, dt1) <= 0)
                                        {
                                            string errInfo = string.Format("时间段3:{0} <= {1}", dt2, dt1);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        at.atFlag3 = true;
                                    }
                                    catch (Exception ee)
                                    {
                                        string errInfo = string.Format("时间段3格式有误：{0}", ee.Message + ee.StackTrace);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else if (at.activeTime3Start == "" && at.activeTime3Ended == "")
                                {
                                    //清空
                                }
                                else
                                {
                                    string errInfo = string.Format("时间段3格式有误");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            // 时间段4处理
                            if (!string.IsNullOrEmpty(at.activeTime4Start) && !string.IsNullOrEmpty(at.activeTime4Ended))
                            {
                                if (at.activeTime4Start != "" && at.activeTime4Ended != "")
                                {
                                    try
                                    {
                                        string dt1 = DateTime.Parse(at.activeTime4Start).ToString("HH:mm:ss");
                                        string dt2 = DateTime.Parse(at.activeTime4Ended).ToString("HH:mm:ss");

                                        if (string.Compare(dt2, dt1) <= 0)
                                        {
                                            string errInfo = string.Format("时间段4:{0} <= {1}", dt2, dt1);
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        at.atFlag3 = true;
                                    }
                                    catch (Exception ee)
                                    {
                                        string errInfo = string.Format("时间段4格式有误：{0}", ee.Message + ee.StackTrace);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else if (at.activeTime4Start == "" && at.activeTime4Ended == "")
                                {
                                    //清空
                                }
                                else
                                {
                                    string errInfo = string.Format("时间段4格式有误");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            // 1 - > 2
                            if (at.atFlag1 == true && at.atFlag2 == true)
                            {
                                if (string.Compare(at.activeTime1Ended, at.activeTime2Start) >= 0)
                                {
                                    string errInfo = string.Format("activeTime1Ended:{0} >= activeTime2Start:{1}", 
                                    at.activeTime1Ended, at.activeTime2Start);

                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            // 1 - > 3
                            if (at.atFlag1 == true && at.atFlag3 == true)
                            {
                                if (string.Compare(at.activeTime1Ended, at.activeTime3Start) >= 0)
                                {
                                    string errInfo = string.Format("activeTime1Ended:{0} >= activeTime3Start:{1}", 
                                    at.activeTime1Ended, at.activeTime3Start);

                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            // 1 - > 4
                            if (at.atFlag1 == true && at.atFlag4 == true)
                            {
                                if (string.Compare(at.activeTime1Ended, at.activeTime4Start) >= 0)
                                {
                                    string errInfo = string.Format("activeTime1Ended:{0} >= activeTime4tart:{1}", 
                                        at.activeTime1Ended, at.activeTime4Start);

                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            // 2 - > 3
                            if (at.atFlag2 == true && at.atFlag3 == true)
                            {
                                if (string.Compare(at.activeTime2Ended, at.activeTime3Start) >= 0)
                                {
                                    string errInfo = string.Format("activeTime2Ended:{0} >= activeTime3Start:{1}", 
                                    at.activeTime2Ended, at.activeTime3Start);

                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            // 2 - > 4
                            if (at.atFlag2 == true && at.atFlag4 == true)
                            {
                                if (string.Compare(at.activeTime2Ended, at.activeTime4Start) >= 0)
                                {
                                    string errInfo = string.Format("activeTime2Ended:{0} >= activeTime4Start:{1}",
                                    at.activeTime2Ended, at.activeTime4Start);

                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            // 3 - > 4
                            if (at.atFlag3 == true && at.atFlag4 == true)
                            {
                                if (string.Compare(at.activeTime3Ended, at.activeTime4Start) >= 0)
                                {
                                    string errInfo = string.Format("activeTime3Ended:{0} >= activeTime4Start:{1}",
                                    at.activeTime3Ended, at.activeTime4Start);

                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            #endregion

                            #endregion

                            #endregion

                            #region 返回消息

                            switch (devInfo.devMode)
                            {
                                case devMode.MODE_GSM:
                                    {
                                        #region GSM处理

                                        strGsmRfPara grp = new strGsmRfPara();

                                        grp.activeTime1Start = at.activeTime1Start;
                                        grp.activeTime1Ended = at.activeTime1Ended;

                                        grp.activeTime2Start = at.activeTime2Start;
                                        grp.activeTime2Ended = at.activeTime2Ended;

                                        grp.activeTime3Start = at.activeTime3Start;
                                        grp.activeTime3Ended = at.activeTime3Ended;

                                        grp.activeTime4Start = at.activeTime4Start;
                                        grp.activeTime4Ended = at.activeTime4Ended;

                                        rtv = 0;
                                        if (carry == "0")
                                        {
                                            rtv += gDbHelperUpper.gsm_rf_para_record_update(0, devInfo.id, grp);
                                        }
                                        else if (carry == "1")
                                        {
                                            rtv += gDbHelperUpper.gsm_rf_para_record_update(1, devInfo.id, grp);
                                        }
                                        else
                                        {
                                            rtv += gDbHelperUpper.gsm_rf_para_record_update(0, devInfo.id, grp);
                                            rtv += gDbHelperUpper.gsm_rf_para_record_update(1, devInfo.id, grp);
                                        }

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_GSM_V2:
                                    {
                                        #region GSM-V2处理

                                        strGcMisc gm = new strGcMisc();

                                        gm.activeTime1Start = at.activeTime1Start;
                                        gm.activeTime1Ended = at.activeTime1Ended;

                                        gm.activeTime2Start = at.activeTime2Start;
                                        gm.activeTime2Ended = at.activeTime2Ended;

                                        gm.activeTime3Start = at.activeTime3Start;
                                        gm.activeTime3Ended = at.activeTime3Ended;

                                        gm.activeTime4Start = at.activeTime4Start;
                                        gm.activeTime4Ended = at.activeTime4Ended;

                                        rtv = 0;
                                        if (carry == "0")
                                        {
                                            rtv += gDbHelperUpper.gc_misc_record_update(0, devInfo.id, gm);
                                        }
                                        else if (carry == "1")
                                        {
                                            rtv += gDbHelperUpper.gc_misc_record_update(1, devInfo.id, gm);
                                        }
                                        else
                                        {
                                            rtv += gDbHelperUpper.gc_misc_record_update(0, devInfo.id, gm);
                                            rtv += gDbHelperUpper.gc_misc_record_update(1, devInfo.id, gm);
                                        }

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_CDMA:
                                    {
                                        #region CDMA处理

                                        strGcMisc gm = new strGcMisc();

                                        gm.activeTime1Start = at.activeTime1Start;
                                        gm.activeTime1Ended = at.activeTime1Ended;

                                        gm.activeTime2Start = at.activeTime2Start;
                                        gm.activeTime2Ended = at.activeTime2Ended;

                                        gm.activeTime3Start = at.activeTime3Start;
                                        gm.activeTime3Ended = at.activeTime3Ended;

                                        gm.activeTime4Start = at.activeTime4Start;
                                        gm.activeTime4Ended = at.activeTime4Ended;

                                        rtv = 0;
                                        rtv += gDbHelperUpper.gc_misc_record_update(-1, devInfo.id, gm);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_TD_SCDMA:
                                    {
                                        break;
                                    }
                                case devMode.MODE_WCDMA:
                                case devMode.MODE_LTE_FDD:
                                case devMode.MODE_LTE_TDD:
                                    {
                                        #region LTE

                                        strApGenPara apGP = new strApGenPara();

                                        apGP.activeTime1Start = at.activeTime1Start;
                                        apGP.activeTime1Ended = at.activeTime1Ended;

                                        apGP.activeTime2Start = at.activeTime2Start;
                                        apGP.activeTime2Ended = at.activeTime2Ended;

                                        apGP.activeTime3Start = at.activeTime3Start;
                                        apGP.activeTime3Ended = at.activeTime3Ended;

                                        apGP.activeTime4Start = at.activeTime4Start;
                                        apGP.activeTime4Ended = at.activeTime4Ended;

                                        rtv = gDbHelperUpper.ap_general_para_record_update(devInfo.id, apGP);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_UNKNOWN:
                                    {
                                        #region 未知mode

                                        string errInfo = string.Format("mode有误");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_GenPara_ActiveTime_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;

                                        #endregion
                                    }
                            }

                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_get_GenPara_Request:
                        {
                            #region 获取信息

                            //   "parentFullPathName":"设备.深圳.福田.中心广场.西北监控",
                            //   "name"   :"电信FDD"
                            //   "carry"  :"0/1"     //GSM或GSM-V2时传入，2018-08-17

                            int rtv;
                            strDevice devInfo = new strDevice();
                            strApGenPara apGP = new strApGenPara();

                            string name = "";
                            string parentFullPathName = "";
                            string devFullPathName = "";
                            string carry = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (parentFullPathName == "" || name == "")
                            {
                                //返回出错处理
                                string errInfo = string.Format("app_get_GenPara_Request,参数有误.");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (gAppUpper.Body.dic.ContainsKey("carry"))
                            {
                                carry = gAppUpper.Body.dic["carry"].ToString();
                                if (carry != "0" && carry != "1")
                                {
                                    //返回出错处理
                                    string errInfo = string.Format("app_get_GenPara_Request,carry = {0},参数有误.", carry);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            #endregion

                            #region 返回消息

                            strDomian domian = new strDomian();
                            devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);

                            if (!gDicDevFullName.ContainsKey(devFullPathName))
                            {
                                //返回出错处理
                                string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", devFullPathName);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[devFullPathName];

                                // 2018-07-04,2018-08-20
                                if (devInfo.devMode != devMode.MODE_WCDMA &&
                                    devInfo.devMode != devMode.MODE_LTE_FDD &&
                                    devInfo.devMode != devMode.MODE_LTE_TDD)
                                {
                                    //返回出错处理
                                    string errInfo = string.Format("devMode = {0},该设备没有没有通用参数.", devInfo.devMode.ToString());
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }

                                rtv = gDbHelperUpper.domain_record_get_by_nameFullPath(parentFullPathName, ref domian);
                                if (rtv != 0)
                                {
                                    //返回出错处理
                                    string errInfo = get_debug_info() + string.Format("domain_record_get_by_nameFullPath出错:{0}.", gDbHelperUpper.get_rtv_str(rtv));
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            switch (devInfo.devMode)
                            {
                                case devMode.MODE_WCDMA:
                                case devMode.MODE_LTE_FDD:
                                case devMode.MODE_LTE_TDD:
                                    {
                                        #region LTE

                                        rtv = gDbHelperUpper.ap_general_para_record_get_by_devid(devInfo.id, ref apGP);
                                        if (rtv != 0)
                                        {
                                            //返回出错处理
                                            string errInfo = get_debug_info() + string.Format("ap_general_para_record_get_by_devid出错:{0}.", gDbHelperUpper.get_rtv_str(rtv));
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                                        gAppUpper.Body.dic.Add("domainId", domian.id.ToString());
                                        gAppUpper.Body.dic.Add("domainParentId", domian.parentId.ToString());
                                        gAppUpper.Body.dic.Add("parentFullPathName", parentFullPathName);
                                        gAppUpper.Body.dic.Add("name", name);

                                        //   "mode":"GSM",          设备工作制式：GSM、TDD-LTE、FDD-LTE等
                                        //   "primaryplmn:"xxx",    PLMN
                                        //   "earfcndl:"xxx",       工作频点（下行）
                                        //   "earfcnul:"xxx",       工作频点（上行）
                                        //   "cellid:"xxx",         cellid,2018-06-26
                                        //   "pci:"xxx",            工作PCI
                                        //   "bandwidth:"xxx",      工作Band
                                        //   "tac:"xxx",            工作Tac
                                        //   "txpower:"xxx",        发射功率
                                        //   "periodtac:"xxx",      变换Tac周期
                                        //   "manualfreq:"xxx",     手动选择工作频点（0：自动选择；1：手动选择）
                                        //   "bootMode:"0",         设备启动方式（0：半自动。此时需要发送Active命令才开始建小区 1：全自动）
                                        //   "Earfcnlist:"xxx,xxx", REM扫描频点列表
                                        //   "Bandoffse:"xxxx",     Band频偏值。用于GPS同步时的补偿值
                                        //   "NTP:"172.17.0.210",   NTP服务器地址
                                        //   "ntppri:"5",           NTP获取时间的优先级
                                        //   "source:"0，           同步源（0：GPS ； 1：CNM ； 2：no sync）
                                        //   "ManualEnable:"1",     是否启动手动选择同步频点功能（0：不启动 ； 1 :启动）
                                        //   "ManualEarfcn:"xxx",   手动选择的同步频点
                                        //   "ManualPci:"xxx",      手动选择的同步PCI
                                        //   "ManualBw:"xxx"        手动选择的同步小区带宽
                                        //   "gps_select":"0"       GPS配置，0表示NOGPS，1表示GPS
                                        //   "activeTime1Start":"2018-05-28 09:30:00"  生效时间1的起始时间
                                        //   "activeTime1Ended":"2018-05-28 12:30:00"  生效时间1的结束时间
                                        //   "activeTime2Start":"2018-05-28 13:30:00"  生效时间2的起始时间
                                        //   "activeTime2Ended":"2018-05-28 14:30:00"  生效时间2的结束时间
                                        //   "activeTime3Start":"2018-05-28 16:30:00"  生效时间3的起始时间，有的话就添加该项
                                        //   "activeTime3Ended":"2018-05-28 18:30:00"  生效时间3的结束时间，有的话就添加该项
                                        //   "activeTime4Start":"2018-05-28 20:30:00"  生效时间4的起始时间，有的话就添加该项
                                        //   "activeTime4Ended":"2018-05-28 22:30:00"  生效时间4的结束时间，有的话就添加该项

                                        if (!string.IsNullOrEmpty(apGP.mode))
                                        {
                                            gAppUpper.Body.dic.Add("mode", apGP.mode);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.primaryplmn))
                                        {
                                            gAppUpper.Body.dic.Add("primaryplmn", apGP.primaryplmn);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.earfcndl))
                                        {
                                            gAppUpper.Body.dic.Add("earfcndl", apGP.earfcndl);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.earfcnul))
                                        {
                                            gAppUpper.Body.dic.Add("earfcnul", apGP.earfcnul);
                                        }

                                        // 2018-06-26
                                        if (!string.IsNullOrEmpty(apGP.cellid))
                                        {
                                            gAppUpper.Body.dic.Add("cellid", apGP.cellid);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.pci))
                                        {
                                            gAppUpper.Body.dic.Add("pci", apGP.pci);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.bandwidth))
                                        {
                                            gAppUpper.Body.dic.Add("bandwidth", apGP.bandwidth);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.tac))
                                        {
                                            gAppUpper.Body.dic.Add("tac", apGP.tac);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.txpower))
                                        {
                                            gAppUpper.Body.dic.Add("txpower", apGP.txpower);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.periodtac))
                                        {
                                            gAppUpper.Body.dic.Add("periodtac", apGP.periodtac);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.manualfreq))
                                        {
                                            gAppUpper.Body.dic.Add("manualfreq", apGP.manualfreq);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.bootMode))
                                        {
                                            gAppUpper.Body.dic.Add("bootMode", apGP.bootMode);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.Earfcnlist))
                                        {
                                            gAppUpper.Body.dic.Add("Earfcnlist", apGP.Earfcnlist);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.Bandoffset))
                                        {
                                            gAppUpper.Body.dic.Add("Bandoffset", apGP.Bandoffset);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.NTP))
                                        {
                                            gAppUpper.Body.dic.Add("NTP", apGP.NTP);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.ntppri))
                                        {
                                            gAppUpper.Body.dic.Add("ntppri", apGP.ntppri);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.source))
                                        {
                                            gAppUpper.Body.dic.Add("source", apGP.source);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.ManualEnable))
                                        {
                                            gAppUpper.Body.dic.Add("ManualEnable", apGP.ManualEnable);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.ManualEarfcn))
                                        {
                                            gAppUpper.Body.dic.Add("ManualEarfcn", apGP.ManualEarfcn);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.ManualPci))
                                        {
                                            gAppUpper.Body.dic.Add("ManualPci", apGP.ManualPci);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.ManualBw))
                                        {
                                            gAppUpper.Body.dic.Add("ManualBw", apGP.ManualBw);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.gps_select))
                                        {
                                            gAppUpper.Body.dic.Add("gps_select", apGP.gps_select);
                                        }

                                        // 2018-07-23
                                        if (!string.IsNullOrEmpty(apGP.otherplmn))
                                        {
                                            gAppUpper.Body.dic.Add("otherplmn", apGP.otherplmn);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.periodFreq))
                                        {
                                            gAppUpper.Body.dic.Add("periodFreq", apGP.periodFreq);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.res1))
                                        {
                                            gAppUpper.Body.dic.Add("res1", apGP.res1);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.res2))
                                        {
                                            gAppUpper.Body.dic.Add("res2", apGP.res2);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.res3))
                                        {
                                            gAppUpper.Body.dic.Add("res3", apGP.res3);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.activeTime1Start))
                                        {
                                            gAppUpper.Body.dic.Add("activeTime1Start", apGP.activeTime1Start);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.activeTime1Ended))
                                        {
                                            gAppUpper.Body.dic.Add("activeTime1Ended", apGP.activeTime1Ended);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.activeTime2Start))
                                        {
                                            gAppUpper.Body.dic.Add("activeTime2Start", apGP.activeTime2Start);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.activeTime2Ended))
                                        {
                                            gAppUpper.Body.dic.Add("activeTime2Ended", apGP.activeTime2Ended);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.activeTime3Start))
                                        {
                                            gAppUpper.Body.dic.Add("activeTime3Start", apGP.activeTime3Start);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.activeTime3Ended))
                                        {
                                            gAppUpper.Body.dic.Add("activeTime3Ended", apGP.activeTime3Ended);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.activeTime4Start))
                                        {
                                            gAppUpper.Body.dic.Add("activeTime4Start", apGP.activeTime4Start);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.activeTime4Ended))
                                        {
                                            gAppUpper.Body.dic.Add("activeTime4Ended", apGP.activeTime4Ended);
                                        }

                                        if (!string.IsNullOrEmpty(apGP.time))
                                        {
                                            gAppUpper.Body.dic.Add("time", apGP.time);
                                        }

                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);

                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_GSM:
                                    {
                                        #region GSM

                                        //strGsmRfPara grp = new strGsmRfPara();
                                        //rtv = gDbHelperUpper.gsm_rf_para_record_get_by_devid(int.Parse(carry),devInfo.id, ref grp);
                                        //if (rtv != 0)
                                        //{
                                        //    //返回出错处理
                                        //    string errInfo = get_debug_info() + string.Format("gsm_rf_para_record_get_by_devid出错:{0}.", gDbHelperUpper.get_rtv_str(rtv));
                                        //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        //    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, -1, errInfo, true, null, null);
                                        //    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        //    break;
                                        //}

                                        //Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                                        //gAppUpper.Body.dic.Add("domainId", domian.id.ToString());
                                        //gAppUpper.Body.dic.Add("domainParentId", domian.parentId.ToString());
                                        //gAppUpper.Body.dic.Add("parentFullPathName", parentFullPathName);
                                        //gAppUpper.Body.dic.Add("name", name);

                                        //if (!string.IsNullOrEmpty(grp.activeTime1Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime1Start", grp.activeTime1Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(grp.activeTime1Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime1Ended", grp.activeTime1Ended);
                                        //}

                                        //if (!string.IsNullOrEmpty(grp.activeTime2Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime2Start", grp.activeTime2Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(grp.activeTime2Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime2Ended", grp.activeTime2Ended);
                                        //}

                                        //if (!string.IsNullOrEmpty(grp.activeTime3Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime3Start", grp.activeTime3Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(grp.activeTime3Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime3Ended", grp.activeTime3Ended);
                                        //}

                                        //if (!string.IsNullOrEmpty(grp.activeTime4Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime4Start", grp.activeTime4Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(grp.activeTime4Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime4Ended", grp.activeTime4Ended);
                                        //}                                        

                                        //Send_Msg_2_AppCtrl_Upper(gAppUpper);

                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_GSM_V2:
                                    {
                                        #region GSM-V2                                     

                                        //strGcMisc gm = new strGcMisc();                             
                                        //rtv = gDbHelperUpper.gc_misc_record_get_by_devid(int.Parse(carry), devInfo.id, ref gm);
                                        //if (rtv != 0)
                                        //{
                                        //    //返回出错处理
                                        //    string errInfo = get_debug_info() + string.Format("gc_misc_record_get_by_devid出错:{0}.", gDbHelperUpper.get_rtv_str(rtv));
                                        //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        //    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, -1, errInfo, true, null, null);
                                        //    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        //    break;
                                        //}

                                        //Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                                        //gAppUpper.Body.dic.Add("domainId", domian.id.ToString());
                                        //gAppUpper.Body.dic.Add("domainParentId", domian.parentId.ToString());
                                        //gAppUpper.Body.dic.Add("parentFullPathName", parentFullPathName);
                                        //gAppUpper.Body.dic.Add("name", name);

                                        //if (!string.IsNullOrEmpty(gm.activeTime1Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime1Start", gm.activeTime1Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime1Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime1Ended", gm.activeTime1Ended);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime2Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime2Start", gm.activeTime2Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime2Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime2Ended", gm.activeTime2Ended);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime3Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime3Start", gm.activeTime3Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime3Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime3Ended", gm.activeTime3Ended);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime4Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime4Start", gm.activeTime4Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime4Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime4Ended", gm.activeTime4Ended);
                                        //}

                                        //Send_Msg_2_AppCtrl_Upper(gAppUpper);

                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_CDMA:
                                    {
                                        #region CDMA                                 

                                        //strGcMisc gm = new strGcMisc();
                                        //rtv = gDbHelperUpper.gc_misc_record_get_by_devid(-1, devInfo.id, ref gm);
                                        //if (rtv != 0)
                                        //{
                                        //    //返回出错处理
                                        //    string errInfo = get_debug_info() + string.Format("gc_misc_record_get_by_devid出错:{0}.", gDbHelperUpper.get_rtv_str(rtv));
                                        //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        //    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, -1, errInfo, true, null, null);
                                        //    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        //    break;
                                        //}

                                        //Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GenPara_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                                        //gAppUpper.Body.dic.Add("domainId", domian.id.ToString());
                                        //gAppUpper.Body.dic.Add("domainParentId", domian.parentId.ToString());
                                        //gAppUpper.Body.dic.Add("parentFullPathName", parentFullPathName);
                                        //gAppUpper.Body.dic.Add("name", name);

                                        //if (!string.IsNullOrEmpty(gm.activeTime1Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime1Start", gm.activeTime1Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime1Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime1Ended", gm.activeTime1Ended);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime2Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime2Start", gm.activeTime2Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime2Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime2Ended", gm.activeTime2Ended);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime3Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime3Start", gm.activeTime3Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime3Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime3Ended", gm.activeTime3Ended);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime4Start))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime4Start", gm.activeTime4Start);
                                        //}

                                        //if (!string.IsNullOrEmpty(gm.activeTime4Ended))
                                        //{
                                        //    gAppUpper.Body.dic.Add("activeTime4Ended", gm.activeTime4Ended);
                                        //}

                                        //Send_Msg_2_AppCtrl_Upper(gAppUpper);

                                        break;

                                        #endregion
                                    }
                                case devMode.MODE_TD_SCDMA:
                                    {
                                        break;
                                    }
                                case devMode.MODE_UNKNOWN:
                                    {
                                        break;
                                    }
                            }

                            break;

                            #endregion                                         
                        }
                    case AppMsgType.app_ftp_oper_request:
                        {
                            #region 获取信息

                            //   "md5":"asdfadfs4adf3d3adf3",   //fileName的MD5
                            //   "fileName":"xxxxx.tar.gz",     //要上传的文件名
                            //   "version":"x.y.z",             //要上传的版本号                                  

                            string md5 = "";
                            string fileName = "";
                            string version = "";

                            if (gAppUpper.Body.dic.ContainsKey("md5"))
                            {
                                md5 = gAppUpper.Body.dic["md5"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("fileName"))
                            {
                                fileName = gAppUpper.Body.dic["fileName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("version"))
                            {
                                version = gAppUpper.Body.dic["version"].ToString();
                            }

                            if (md5 == "" || fileName == "" || version == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_ftp_oper_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_ftp_oper_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_ftp_oper_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_ftp_oper_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            gUpdateInfo.md5 = md5;
                            gUpdateInfo.fileName = fileName;
                            gUpdateInfo.version = version;

                            #endregion

                            #region 返回消息

                            //    "ReturnCode": 0，            //返回码：0,成功；其它值为失败
                            //    "ReturnStr": "成功"，         //失败原因值。ReturnCode不为0时有意义
                            //    "ftpUsrName":"root",       
                            //    "ftpPwd":"root",
                            //    "ftpRootDir": "updaeFile",
                            //    "ftpServerIp": "172.17.0.210",
                            //    "ftpPort":"21",
                            //    "needToUpdate":"0",         //是否需求上传，0不需要，1需要

                            gAppUpper.Body.type = AppMsgType.app_ftp_oper_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", 0);
                            gAppUpper.Body.dic.Add("ReturnStr", "成功");

                            gAppUpper.Body.dic.Add("ftpUsrName", DataController.StrFtpUserId);
                            gAppUpper.Body.dic.Add("ftpPwd", DataController.StrFtpUserPsw);
                            gAppUpper.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                            gAppUpper.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                            gAppUpper.Body.dic.Add("ftpPort", DataController.StrFtpPort);

                            if ((int)RC.NO_EXIST == gDbHelperUpper.update_info_record_exist(gUpdateInfo.md5))
                            {
                                //FTP服务器上不存在该文件，需要界面上传
                                gAppUpper.Body.dic.Add("needToUpdate", "1");
                                gUpdateInfo.needToUpdate = true;
                            }
                            else
                            {
                                //FTP服务器上已经存在该文件，不需要界面上传
                                gAppUpper.Body.dic.Add("needToUpdate", "0");
                                gUpdateInfo.needToUpdate = false;
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                   
                        }
                    case AppMsgType.app_ftp_update_request:
                        {
                            #region 获取信息

                            //    "canUpdateFlag":"1",        //是否可以升级，0不可以，1可以  
                            //    "fileName":"xxxxx.tar.gz",  //要上传的文件名
                            //    "deviceCnt":"2",
                            //    "device1":"设备.深圳.福田.中心广场.西北监控.电信TDD"
                            //    "device2":"设备.深圳.福田.中心广场.西北监控.移动FDD" 

                            int rtv = -1;
                            int deviceRealCnt = -1;

                            string fileName = "";
                            string deviceCnt = "";
                            string canUpdateFlag = "";

                            if (gAppUpper.Body.dic.ContainsKey("canUpdateFlag"))
                            {
                                canUpdateFlag = gAppUpper.Body.dic["canUpdateFlag"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("fileName"))
                            {
                                fileName = gAppUpper.Body.dic["fileName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("deviceCnt"))
                            {
                                deviceCnt = gAppUpper.Body.dic["deviceCnt"].ToString();
                            }

                            if (canUpdateFlag == "" || fileName == "" || deviceCnt == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_ftp_oper_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_ftp_oper_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_ftp_update_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_ftp_update_response,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            try
                            {
                                deviceRealCnt = int.Parse(deviceCnt);
                                if (deviceRealCnt <= 0)
                                {
                                    add_log_info(LogInfoType.EROR, "deviceCnt,参数有误", "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, "deviceCnt,参数有误", "Main", LogCategory.I);

                                    //返回出错处理
                                    gAppUpper.Body.type = AppMsgType.app_ftp_update_response;
                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("ReturnCode", -1);
                                    gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "deviceCnt,参数有误.");

                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }
                            catch (Exception ee)
                            {
                                add_log_info(LogInfoType.EROR, "deviceCnt,参数有误" + ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "deviceCnt,参数有误" + ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_ftp_update_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "deviceCnt,参数有误." + ee.Message + ee.StackTrace + ee.StackTrace);

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            string inx = "";
                            string devTmp = "";
                            gUpdateInfo.listDevFullName = new List<string>();
                            gUpdateInfo.listDevId = new List<int>();

                            for (int i = 0; i < deviceRealCnt; i++)
                            {
                                inx = "device" + (i + 1).ToString();
                                if (gAppUpper.Body.dic.ContainsKey(inx))
                                {
                                    devTmp = gAppUpper.Body.dic[inx].ToString();
                                    if (gDicDevFullName.ContainsKey(devTmp))
                                    {
                                        gUpdateInfo.listDevFullName.Add(devTmp);
                                        gUpdateInfo.listDevId.Add(gDicDevFullName[devTmp].id);
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }

                            if (gUpdateInfo.listDevId.Count != deviceRealCnt)
                            {
                                add_log_info(LogInfoType.EROR, "设备列表解析有误！", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "设备列表解析有误！", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_ftp_update_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "设备列表解析有误！");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (canUpdateFlag != "0" && canUpdateFlag != "1")
                            {
                                add_log_info(LogInfoType.EROR, "canUpdateFlag,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "canUpdateFlag,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_ftp_update_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "canUpdateFlag,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (canUpdateFlag == "0")
                            {
                                add_log_info(LogInfoType.EROR, "canUpdateFlag,不能升级", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "canUpdateFlag,不能升级", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_ftp_update_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "canUpdateFlag,不能升级");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            if (fileName != gUpdateInfo.fileName)
                            {
                                //fileName和上一条消息不一致

                                add_log_info(LogInfoType.EROR, "fileName != gUpdateInfo.fileName", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "fileName != gUpdateInfo.fileName", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_ftp_update_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "fileName != gUpdateInfo.fileName");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (gUpdateInfo.needToUpdate == true)
                            {
                                //插入记录到升级信息表中
                                rtv = gDbHelperUpper.update_info_record_insert(gUpdateInfo.md5, gUpdateInfo.fileName, gUpdateInfo.version);
                                if (rtv != 0)
                                {
                                    add_log_info(LogInfoType.EROR, gDbHelperUpper.get_rtv_str(rtv), "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, gDbHelperUpper.get_rtv_str(rtv), "Main", LogCategory.I);

                                    //返回出错处理
                                    gAppUpper.Body.type = AppMsgType.app_ftp_update_response;
                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                    gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + gDbHelperUpper.get_rtv_str(rtv));

                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            #region 遍历设备列表发送给AP

                            int devId = -1;
                            strDevice strDev = new strDevice();
                            for (int i = 0; i < gUpdateInfo.listDevId.Count; i++)
                            {
                                devId = gUpdateInfo.listDevId[i];
                                rtv = gDbHelperUpper.device_record_entity_get_by_devid(devId, ref strDev);
                                if (rtv == 0)
                                {
                                    if (strDev.online == "0")
                                    {
                                        continue;
                                    }

                                    //只发给上线的AP
                                    gAppUpper.ApInfo.SN = strDev.sn;
                                    gAppUpper.ApInfo.Fullname = gUpdateInfo.listDevFullName[i];
                                    gAppUpper.ApInfo.IP = strDev.ipAddr;
                                    gAppUpper.ApInfo.Port = int.Parse(strDev.port);
                                    gAppUpper.ApInfo.Type = strDev.innerType;

                                    gAppUpper.Body.type = ApMsgType.Update;
                                    gAppUpper.MsgType = MsgType.CONFIG.ToString();

                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("User_name", DataController.StrFtpUserId);
                                    gAppUpper.Body.dic.Add("update_type", 0);
                                    gAppUpper.Body.dic.Add("Password", DataController.StrFtpUserPsw);
                                    gAppUpper.Body.dic.Add("timestamp", DateTime.Now.ToString());
                                    gAppUpper.Body.dic.Add("version", gUpdateInfo.version);
                                    gAppUpper.Body.dic.Add("filename", gUpdateInfo.fileName);
                                    gAppUpper.Body.dic.Add("ftp_type", 1);
                                    gAppUpper.Body.dic.Add("serverAdd", DataController.StrFtpIpAddr + ":" + DataController.StrFtpPort);

                                    //发送给ApController
                                    Send_Msg_2_ApCtrl_Lower(gAppUpper);
                                }
                            }

                            #endregion

                            break;

                            #endregion                                        
                        }
                    case AppMsgType.app_history_record_request:
                        {
                            #region 异步处理

                            //history_record_process_delegate_fun(gAppUpper);
                            ThreadPool.QueueUserWorkItem(new WaitCallback(history_record_process_delegate_fun), gAppUpper);

                            break;

                            #endregion
                        }
                    case AppMsgType.app_history_record_next_page_request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);

                            // 
                            // GSW和WCDMA的设备，IMSI和IMEI可同时设置
                            //
                            // "CurPageIndex":"1:50",   
                            //                                                 

                            string CurPageIndex = "";
                            int curPageInx = -1;
                            int totalPages = -1;

                            if (gAppUpper.Body.dic.ContainsKey("CurPageIndex"))
                            {
                                CurPageIndex = gAppUpper.Body.dic["CurPageIndex"].ToString();
                                if (check_and_get_page_info(CurPageIndex, ref curPageInx, ref totalPages) == false)
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:", "CurPageIndex字段解析出错.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:", "没包含字段CurPageIndex");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            if (!gDicCaptureQueryInfo.ContainsKey(appId))
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的查询信息不存在.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            strCaptureQueryInfo qi = gDicCaptureQueryInfo[appId];
                            if (qi.totalPages != totalPages)
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的总页数不匹配.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            int startInx = -1;
                            int endedInx = -1;

                            if (curPageInx == totalPages)
                            {
                                //最后一页
                                startInx = (curPageInx - 1) * qi.pageSize;
                                endedInx = qi.totalRecords;
                            }
                            else
                            {
                                //不是最后一页
                                startInx = (curPageInx - 1) * qi.pageSize;
                                endedInx = startInx + qi.pageSize;
                            }

                            #region 取出各条记录

                            string pageInfo = string.Format("{0}:{1}", curPageInx, qi.totalPages);
                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_response, 0, gDbHelperUpper.get_rtv_str(0), true, null, null);

                            gAppUpper.Body.dic.Add("TotalRecords", qi.totalRecords.ToString());
                            gAppUpper.Body.dic.Add("CurPageIndex", pageInfo);
                            gAppUpper.Body.dic.Add("PageSize", qi.pageSize.ToString());

                            for (int inx = startInx; inx < endedInx; inx++)
                            {
                                DataRow dr = gDicCaptureQueryInfo[appId].dt.Rows[inx];

                                Name_DIC_Struct ndic = new Name_DIC_Struct();
                                ndic.name = (inx + 1).ToString();

                                //(1)
                                if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                                {
                                    ndic.dic.Add("imsi", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("imsi", dr["imsi"].ToString());
                                }

                                //(2)
                                if (string.IsNullOrEmpty(dr["imei"].ToString()))
                                {
                                    ndic.dic.Add("imei", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("imei", dr["imei"].ToString());
                                }

                                //(3)
                                if (string.IsNullOrEmpty(dr["name"].ToString()))
                                {
                                    ndic.dic.Add("name", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("name", dr["name"].ToString());
                                }

                                //(4)
                                if (string.IsNullOrEmpty(dr["tmsi"].ToString()))
                                {
                                    ndic.dic.Add("tmsi", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("tmsi", dr["tmsi"].ToString());
                                }

                                //(5)
                                if (string.IsNullOrEmpty(dr["bsPwr"].ToString()))
                                {
                                    ndic.dic.Add("bsPwr", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("bsPwr", dr["bsPwr"].ToString());
                                }

                                //(6)
                                if (string.IsNullOrEmpty(dr["time"].ToString()))
                                {
                                    ndic.dic.Add("time", "null");
                                }
                                else
                                {
                                    ndic.dic.Add("time", dr["time"].ToString());
                                }

                                //(7)
                                if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                                {
                                    ndic.dic.Add("bwFlag", "bwFlag");
                                }
                                else
                                {
                                    ndic.dic.Add("bwFlag", dr["bwFlag"].ToString());
                                }

                                //(9)
                                if (string.IsNullOrEmpty(dr["sn"].ToString()))
                                {
                                    ndic.dic.Add("sn", "");
                                }
                                else
                                {
                                    ndic.dic.Add("sn", dr["sn"].ToString());
                                }

                                //(9) 2018-09-06
                                if (string.IsNullOrEmpty(dr["des"].ToString()))
                                {
                                    ndic.dic.Add("des", "");
                                }
                                else
                                {
                                    ndic.dic.Add("des", dr["des"].ToString());
                                }

                                gAppUpper.Body.n_dic.Add(ndic);
                            }

                            #endregion

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                     
                        }
                    case AppMsgType.app_history_record_export_csv_request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);

                            //                         
                            //
                            // "fileName":"abc.csv"
                            //                                                 

                            string fileName = "";

                            if (gAppUpper.Body.dic.ContainsKey("fileName"))
                            {
                                fileName = gAppUpper.Body.dic["fileName"].ToString();

                                if (false == IsValidFileName(fileName))
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:", "文件名非法.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_export_csv_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    string extension = System.IO.Path.GetExtension(fileName);
                                    if (extension != ".csv")
                                    {
                                        string errInfo = get_debug_info() + string.Format("{0}:", "后缀名非法.");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_export_csv_response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:", "没包含字段fileName");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_export_csv_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }


                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_export_csv_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            if (!gDicCaptureQueryInfo.ContainsKey(appId))
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的查询信息不存在.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_export_csv_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            strCaptureQueryInfo qi = gDicCaptureQueryInfo[appId];

                            int rtv = -1;
                            byte[] outData = null;
                            if (0 == generate_ftp_byte_csv(ref outData, qi.dt))
                            {
                                try
                                {
                                    //gFtpHelperFile.RemotePath = DataController.StrFtpUpdateDir;
                                    //gFtpHelperFile.Connect();

                                    //if (gFtpHelperFile.RemotePath != DataController.StrFtpUpdateDir)
                                    //{
                                    //    gFtpHelperFile.RemotePath = DataController.StrFtpUpdateDir;
                                    //    gFtpHelperFile.Connect();
                                    //}


                                    rtv = gFtpHelperFile.Put(fileName, outData);
                                    if (rtv == -1)
                                    {
                                        string errInfo = get_debug_info() + string.Format("上传文件失败.");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_export_csv_response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                catch (Exception ee)
                                {
                                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace + ee.StackTrace, "Main", LogCategory.I);

                                    gAppUpper.Body.type = AppMsgType.app_history_record_export_csv_response;
                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("ReturnCode", -1);
                                    gAppUpper.Body.dic.Add("ReturnStr", "失败");
                                    gAppUpper.Body.dic.Add("ftpUsrName", DataController.StrFtpUserId);
                                    gAppUpper.Body.dic.Add("ftpPwd", DataController.StrFtpUserPsw);
                                    gAppUpper.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                    gAppUpper.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                    gAppUpper.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                    gAppUpper.Body.dic.Add("fileName", fileName);

                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }

                                //else
                                //{
                                //    gFtpHelper.RemotePath = DataController.StrFtpImsiDir;
                                //    gFtpHelper.Connect();
                                //}
                            }

                            gAppUpper.Body.type = AppMsgType.app_history_record_export_csv_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();

                            if (rtv == 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnCode", 0);
                                gAppUpper.Body.dic.Add("ReturnStr", "成功");
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", "失败");
                            }

                            gAppUpper.Body.dic.Add("ftpUsrName", DataController.StrFtpUserId);
                            gAppUpper.Body.dic.Add("ftpPwd", DataController.StrFtpUserPsw);
                            gAppUpper.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                            gAppUpper.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                            gAppUpper.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                            gAppUpper.Body.dic.Add("fileName", fileName);

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                     
                        }
                    case AppMsgType.app_history_record_exit_request:
                        {
                            #region 返回信息

                            string appId = Get_App_Info(gAppUpper);

                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_exit_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (!gDicCaptureQueryInfo.ContainsKey(appId))
                            {
                                string errInfo = string.Format("{0}:对应的历史搜索查询信息不存在.", appId);
                                add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_exit_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            string info = string.Format("app_history_record_exit_request -> gDicCaptureQueryInfo.Count = {0},appId = {1}存在,现在进行清除.", gDicCaptureQueryInfo.Count, appId);
                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                            gDicCaptureQueryInfo[appId].dt.Dispose();
                            gDicCaptureQueryInfo.Remove(appId);

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_history_record_exit_response, 0,"成功", true, null, null);
                            Send_Msg_2_AppCtrl_Upper(gAppUpper);

                            break;

                            #endregion
                        }
                    case AppMsgType.app_del_device_unknown_request:
                        {
                            #region 获取信息

                            //   "ipAddr":"172.17.0.210",
                            //   "port":"12345"
                            //   "fullname":"设备.深圳.福田.中心广场.西北监控.电信FDD" 

                            string ipAddr = "";
                            string port = "";
                            string fullname = "";

                            if (gAppUpper.Body.dic.ContainsKey("ipAddr"))
                            {
                                ipAddr = gAppUpper.Body.dic["ipAddr"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("port"))
                            {
                                port = gAppUpper.Body.dic["port"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("fullname"))
                            {
                                fullname = gAppUpper.Body.dic["fullname"].ToString();
                            }

                            if (ipAddr == "" || port == "")
                            {
                                string errInfo = get_debug_info() + "获取ipAddr或port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_device_unknown_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (fullname == "")
                            {
                                string errInfo = get_debug_info() + "获取fullname失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_device_unknown_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if ((int)RC.NO_EXIST == gDbHelperUpper.device_unknown_record_exist(ipAddr))
                            {
                                string errInfo = string.Format("{0}:{1}对应的未指派设备不存在.", ipAddr, port);

                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_device_unknown_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 发下命令设置fullname           

                            DataTable dt = new DataTable();
                            if (0 != gDbHelperUpper.device_unknown_record_entity_get_by_ipaddr_port(ipAddr, ref dt))
                            {
                                string errInfo = get_debug_info() + "device_unknown_record_entity_get_by_ipaddr_port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_device_unknown_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (dt.Rows.Count == 0)
                            {
                                string errInfo = get_debug_info() + "dt为空.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_del_device_unknown_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }


                            gAppUpper.ApInfo.SN = dt.Rows[0]["sn"].ToString();
                            gAppUpper.ApInfo.Fullname = fullname;
                            gAppUpper.ApInfo.IP = ipAddr;
                            gAppUpper.ApInfo.Port = int.Parse(port);
                            gAppUpper.ApInfo.Type = dt.Rows[0]["innerType"].ToString();

                            gAppUpper.Body.type = ApMsgType.set_parameter_request;
                            gAppUpper.MsgType = MsgType.CONFIG.ToString();

                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("paramName", "CFG_FULL_NAME");


                            //byte[] gbk = Encoding.GetEncoding("GBK").GetBytes(fullname);

                            // byte[] gbk = Encoding.Default.GetBytes(fullname);


                            //string code = "";
                            //foreach (byte b in gbk)
                            //{
                            //    code += string.Format("{0:X2}", b);
                            //}

                            //code = Encoding.GetEncoding("GBK").GetString(Encoding.GetEncoding("GBK").GetBytes(fullname));

                            // string code = Encoding.GetEncoding("GBK").GetString(gbk);

                            // string code = Encoding.GetEncoding("GBK").GetString(gbk);                           

                            //string temp = string.Empty;
                            //UTF8Encoding utf8 = new UTF8Encoding();

                            //byte[] encodedBytes = utf8.GetBytes(fullname);

                            //foreach (byte b in encodedBytes)
                            //{
                            //    temp += "%" + b.ToString("X");
                            //}

                            //fullname = Encoding.UTF8.GetString(Encoding.UTF8.GetBytes(fullname));

                            gAppUpper.Body.dic.Add("paramValue", fullname);

                            //发送给ApController
                            Send_Msg_2_ApCtrl_Lower(gAppUpper);

                            #endregion

                            #region 启动超时计时器 

                            gTimerSetFullName = new TaskTimer();
                            gTimerSetFullName.Interval = DataController.TimerTimeOutInterval * 1000;

                            gTimerSetFullName.Id = 0;
                            gTimerSetFullName.Name = "gTimerSetFullName";
                            gTimerSetFullName.MsgType = AppMsgType.app_del_device_unknown_response;
                            gTimerSetFullName.TimeOutFlag = false;
                            gTimerSetFullName.Imms = gAppUpper;

                            gTimerSetFullName.Elapsed += new System.Timers.ElapsedEventHandler(TimerFunc);
                            gTimerSetFullName.Start();

                            #endregion

                            break;
                        }
                    case AppMsgType.app_get_GsmInfo_Request:
                        {
                            #region 获取信息

                            //   "parentFullPathName":"设备.深圳.福田.中心广场.西北监控",
                            //   "name":"GSM-Name"     //GSM的名称
                            //   "carry":"0"           //GSM的载波标识，"0"或者"1"

                            int rtv = -1;
                            strDevice devInfo = new strDevice();
                            string mode = "";

                            string parentFullPathName = "";
                            string name = "";
                            string carry = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("carry"))
                            {
                                carry = gAppUpper.Body.dic["carry"].ToString();
                            }

                            if (parentFullPathName == "" || name == "" || carry == "")
                            {
                                string errInfo = get_debug_info() + string.Format("app_get_GsmInfo_Request,参数有误");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GsmInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            strDomian domian = new strDomian();
                            string devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);

                            if (!gDicDevFullName.ContainsKey(devFullPathName))
                            {
                                string errInfo = string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", devFullPathName);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GsmInfo_Response, -1, get_debug_info() + errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[devFullPathName];
                                rtv = gDbHelperUpper.domain_record_get_by_nameFullPath(parentFullPathName, ref domian);
                                if (rtv == 0)
                                {
                                    int id = -1;
                                    rtv = gDbHelperUpper.device_record_id_get_by_affdomainid_and_name(domian.id, name, ref id, ref mode);
                                }
                            }

                            str_Gsm_All_Para allInfo = new str_Gsm_All_Para();

                            //(1)
                            rtv = gDbHelperUpper.gsm_sys_para_record_get_by_devid(int.Parse(carry), devInfo.id, ref allInfo.gsmSysPara);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("gsm_sys_para_record_get_by_devid出错：") + gDbHelperUpper.get_rtv_str(rtv);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GsmInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            //(2)
                            rtv = gDbHelperUpper.gsm_sys_option_record_get_by_devid(int.Parse(carry), devInfo.id, ref allInfo.gsmSysOption);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("gsm_sys_option_record_get_by_devid出错:") + gDbHelperUpper.get_rtv_str(rtv); ;
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GsmInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            //(3)
                            rtv = gDbHelperUpper.gsm_rf_para_record_get_by_devid(int.Parse(carry), devInfo.id, ref allInfo.gsmRfPara);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("gsm_rf_para_record_get_by_devid出错") + gDbHelperUpper.get_rtv_str(rtv);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GsmInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            //(4)
                            rtv = gDbHelperUpper.gsm_msg_option_get_by_devid(int.Parse(carry), devInfo.id, ref allInfo.listGMO);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("gsm_msg_option_get_by_devid出错:") + gDbHelperUpper.get_rtv_str(rtv); ;
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GsmInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GsmInfo_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                            gAppUpper.Body.dic.Add("domainId", domian.id.ToString());
                            gAppUpper.Body.dic.Add("domainParentId", domian.parentId.ToString());
                            gAppUpper.Body.dic.Add("parentFullPathName", parentFullPathName);
                            gAppUpper.Body.dic.Add("name", name);
                            gAppUpper.Body.dic.Add("carry", carry);


                            //					"paraMcc":移动国家码
                            //					"paraMnc":移动网号
                            //					"paraBsic":基站识别码
                            //					"paraLac":位置区号
                            //					"paraCellId":小区ID
                            //					"paraC2":C2偏移量
                            //					"paraPeri":周期性位置更新周期
                            //					"paraAccPwr":接入功率
                            //					"paraMsPwr":手机发射功率
                            //					"paraRejCau":位置更新拒绝原因
                            gAppUpper.Body.dic.Add("paraMcc", allInfo.gsmSysPara.paraMcc);
                            gAppUpper.Body.dic.Add("paraMnc", allInfo.gsmSysPara.paraMnc);
                            gAppUpper.Body.dic.Add("paraBsic", allInfo.gsmSysPara.paraBsic);
                            gAppUpper.Body.dic.Add("paraLac", allInfo.gsmSysPara.paraLac);
                            gAppUpper.Body.dic.Add("paraCellId", allInfo.gsmSysPara.paraCellId);
                            gAppUpper.Body.dic.Add("paraC2", allInfo.gsmSysPara.paraC2);
                            gAppUpper.Body.dic.Add("paraPeri", allInfo.gsmSysPara.paraPeri);
                            gAppUpper.Body.dic.Add("paraAccPwr", allInfo.gsmSysPara.paraAccPwr);
                            gAppUpper.Body.dic.Add("paraMsPwr", allInfo.gsmSysPara.paraMsPwr);
                            gAppUpper.Body.dic.Add("paraRejCau", allInfo.gsmSysPara.paraRejCau);

                            //					"opLuSms":登录时发送短信
                            //					"opLuImei":登录时获取IMEI
                            //					"opCallEn":允许用户主叫
                            //					"opDebug":调试模式，上报信令
                            //					"opLuType":登录类型
                            //					"opSmsType":短信类型
                            //                  "opRegModel":登录模式
                            gAppUpper.Body.dic.Add("opLuSms", allInfo.gsmSysOption.opLuSms);
                            gAppUpper.Body.dic.Add("opLuImei", allInfo.gsmSysOption.opLuImei);
                            gAppUpper.Body.dic.Add("opCallEn", allInfo.gsmSysOption.opCallEn);
                            gAppUpper.Body.dic.Add("opDebug", allInfo.gsmSysOption.opDebug);
                            gAppUpper.Body.dic.Add("opLuType", allInfo.gsmSysOption.opLuType);
                            gAppUpper.Body.dic.Add("opSmsType", allInfo.gsmSysOption.opSmsType);
                            gAppUpper.Body.dic.Add("opRegModel", allInfo.gsmSysOption.opRegModel);


                            //					"rfEnable":射频使能
                            //					"rfFreq":信道号
                            //					"rfPwr":发射功率衰减值
                            gAppUpper.Body.dic.Add("rfEnable", allInfo.gsmRfPara.rfEnable);
                            gAppUpper.Body.dic.Add("rfFreq", allInfo.gsmRfPara.rfFreq);
                            gAppUpper.Body.dic.Add("rfPwr", allInfo.gsmRfPara.rfPwr);

                            // 2018-08-20
                            if (!string.IsNullOrEmpty(allInfo.gsmRfPara.activeTime1Start))
                            {
                                gAppUpper.Body.dic.Add("activeTime1Start", allInfo.gsmRfPara.activeTime1Start);
                            }

                            if (!string.IsNullOrEmpty(allInfo.gsmRfPara.activeTime1Ended))
                            {
                                gAppUpper.Body.dic.Add("activeTime1Ended", allInfo.gsmRfPara.activeTime1Ended);
                            }

                            if (!string.IsNullOrEmpty(allInfo.gsmRfPara.activeTime2Start))
                            {
                                gAppUpper.Body.dic.Add("activeTime2Start", allInfo.gsmRfPara.activeTime2Start);
                            }

                            if (!string.IsNullOrEmpty(allInfo.gsmRfPara.activeTime2Ended))
                            {
                                gAppUpper.Body.dic.Add("activeTime2Ended", allInfo.gsmRfPara.activeTime2Ended);
                            }

                            if (!string.IsNullOrEmpty(allInfo.gsmRfPara.activeTime3Start))
                            {
                                gAppUpper.Body.dic.Add("activeTime3Start", allInfo.gsmRfPara.activeTime3Start);
                            }

                            if (!string.IsNullOrEmpty(allInfo.gsmRfPara.activeTime3Ended))
                            {
                                gAppUpper.Body.dic.Add("activeTime3Ended", allInfo.gsmRfPara.activeTime3Ended);
                            }

                            if (!string.IsNullOrEmpty(allInfo.gsmRfPara.activeTime4Start))
                            {
                                gAppUpper.Body.dic.Add("activeTime4Start", allInfo.gsmRfPara.activeTime4Start);
                            }

                            if (!string.IsNullOrEmpty(allInfo.gsmRfPara.activeTime4Ended))
                            {
                                gAppUpper.Body.dic.Add("activeTime4Ended", allInfo.gsmRfPara.activeTime4Ended);
                            }

                            if (allInfo.listGMO.Count > 0)
                            {
                                //          "smsRPOA":短消息中心号码
                                //          "smsTPOA":短消息原叫号码
                                //          "smsSCTS":短消息发送时间  
                                //          "smsDATA":短消息内容 （编码格式为Unicode编码）
                                //          "autoSend":是否自动发送
                                //          "autoFilterSMS":是否自动过滤短信
                                //          "delayTime":发送延时时间
                                //          "smsCoding":短信的编码格式

                                gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();
                                for (int i = 0; i < allInfo.listGMO.Count; i++)
                                {
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();

                                    ndic.name = (i + 1).ToString();
                                    ndic.dic.Add("smsRPOA", allInfo.listGMO[i].smsRPOA);
                                    ndic.dic.Add("smsTPOA", allInfo.listGMO[i].smsTPOA);
                                    ndic.dic.Add("smsSCTS", allInfo.listGMO[i].smsSCTS);
                                    ndic.dic.Add("smsDATA", allInfo.listGMO[i].smsDATA);
                                    ndic.dic.Add("autoSend", allInfo.listGMO[i].autoSend);
                                    ndic.dic.Add("autoFilterSMS", allInfo.listGMO[i].autoFilterSMS);
                                    ndic.dic.Add("delayTime", allInfo.listGMO[i].delayTime);
                                    ndic.dic.Add("smsCoding", allInfo.listGMO[i].smsCoding);

                                    gAppUpper.Body.n_dic.Add(ndic);
                                }
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                         
                        }
                    case AppMsgType.app_get_MsCall_Request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);

                            //   "parentFullPathName":"设备.深圳.福田.中心广场.西北监控",   //为""时表示所有的设备
                            //   "name":"GSM-Name"                                    //GSM的名称，为""时表示parentFullPathName下所有的设备
                            //   "carry":"0"                                          //GSM的载波标识，"0"或者"1",CDMA时为"-1"
                            //   "imsi":"46000xxxxxxxxx",                             //指定要搜索的IMSI号，不指定是为""
                            //   "number":"138xxxxxxx",                               //指定要搜索的手机号，不指定是为""
                            //   "timeStart":"2018-09-26 12:34:56",                   //开始时间，不指定是为""
                            //   "timeEnded":"2018-95-27 12:34:56",                   //结束时间，不指定是为""                           

                            int rtv = -1;
                            strDevice devInfo = new strDevice();
                            strMsCallHistoryQuery query = new strMsCallHistoryQuery();
                            query.lstDevId = new List<int>();

                            string parentFullPathName = "";
                            string name = "";
                            string deviceFullPathName = "";
                            
                            string carry = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();                                
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();                               
                            }

                            #region 设备过滤条件的处理，2018-10-09

                            if (parentFullPathName == "")
                            {
                                //即所有的设备
                                query.lstDevId = new List<int>();
                            }
                            else
                            {
                                if (name == "")
                                {
                                    //域下面的所有设备

                                    //获取一个节点下所有站点下所有设备Id的列表
                                    rtv = gDbHelperUpper.domain_record_device_id_list_get(parentFullPathName, ref query.lstDevId);
                                    if (rtv != 0)
                                    {
                                        string errInfo = string.Format("{0}：domain_record_device_id_list_get失败", parentFullPathName);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else
                                {
                                    //只有一个设备
                                    deviceFullPathName = string.Format("{0}.{1}", parentFullPathName, name);
                                    if (!gDicDevFullName.ContainsKey(deviceFullPathName))
                                    {
                                        string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", deviceFullPathName);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                    else
                                    {
                                        devInfo = gDicDevFullName[deviceFullPathName];
                                        query.lstDevId.Add(devInfo.id);
                                        query.devName = name;
                                    }
                                }
                            }

                            #endregion

                            if (gAppUpper.Body.dic.ContainsKey("carry"))
                            {
                                carry = gAppUpper.Body.dic["carry"].ToString();
                            }                                
                       
                            if (gAppUpper.Body.dic.ContainsKey("imsi"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["imsi"].ToString()))
                                {
                                    query.imsi = gAppUpper.Body.dic["imsi"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("number"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["number"].ToString()))
                                {
                                    query.number = gAppUpper.Body.dic["number"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("timeStart"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["timeStart"].ToString()))
                                {
                                    query.timeStart = gAppUpper.Body.dic["timeStart"].ToString();

                                    try
                                    {
                                        DateTime.Parse(query.timeStart);
                                    }
                                    catch
                                    {
                                        string errInfo = get_debug_info() + string.Format("timeStart的格式不对");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else
                                {
                                    query.timeStart = "1900-01-01 12:34:56";
                                }
                            }
                            else
                            {
                                query.timeStart = "1900-01-01 12:34:56";
                            }

                            if (gAppUpper.Body.dic.ContainsKey("timeEnded"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["timeEnded"].ToString()))
                                {
                                    query.timeEnded = gAppUpper.Body.dic["timeEnded"].ToString();
                                    try
                                    {
                                        DateTime.Parse(query.timeEnded);
                                        if (string.Compare(query.timeStart, query.timeEnded) > 0)
                                        {
                                            string errInfo = get_debug_info() + string.Format("timeStart大于timeEnded.");
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }
                                    }
                                    catch
                                    {
                                        string errInfo = get_debug_info() + string.Format("timeEnded的格式不对");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else
                                {
                                    query.timeEnded = "2918-06-05 12:34:56";
                                }
                            }
                            else
                            {
                                query.timeEnded = "2918-06-05 12:34:56";
                            }                           

                            #endregion

                            #region 返回消息

                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                                              
                            if (!gDicStrMsCallHistoryQuery.ContainsKey(appId))
                            {        
                                rtv = gDbHelperUpper.send_ms_call_get_by_devid(int.Parse(carry),ref query,gDicDevId_Station_DevName);
                                if (rtv == 0)
                                {
                                    query.totalRecords = query.lstMsCall.Count ;
                                    query.totalPages = (int)Math.Ceiling((double)query.totalRecords / DataController.RecordsOfPageSize);
                                    query.pageSize = DataController.RecordsOfPageSize;
                                }

                                //添加App对应的黑白名单查询条件和结果
                                gDicStrMsCallHistoryQuery.Add(appId, query);
                            }
                            else
                            {
                                gDicStrMsCallHistoryQuery.Remove(appId);

                                //每次都从库中取吧，因为再次查询时，库已经发生变化了。
                                rtv = gDbHelperUpper.send_ms_call_get_by_devid(int.Parse(carry),ref query, gDicDevId_Station_DevName);
                                if (rtv == 0)
                                {
                                    query.totalRecords = query.lstMsCall.Count;
                                    query.totalPages = (int)Math.Ceiling((double)query.totalRecords / DataController.RecordsOfPageSize);
                                    query.pageSize = DataController.RecordsOfPageSize;
                                }

                                //添加App对应的黑白名单查询条件和结果
                                gDicStrMsCallHistoryQuery.Add(appId, query);
                            }

                            if (rtv != (int)RC.SUCCESS)
                            {
                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                string pageInfo = "";
                                if (gDicStrMsCallHistoryQuery[appId].lstMsCall.Count == 0)
                                {
                                    pageInfo = "0:0";
                                }
                                else
                                {
                                    pageInfo = string.Format("1:{0}", Math.Ceiling((double)gDicStrMsCallHistoryQuery[appId].lstMsCall.Count / DataController.RecordsOfPageSize));
                                }

                                int firstPageSize = 0;
                                if (gDicStrMsCallHistoryQuery[appId].lstMsCall.Count > DataController.RecordsOfPageSize)
                                {
                                    firstPageSize = DataController.RecordsOfPageSize;
                                }
                                else
                                {
                                    firstPageSize = gDicStrMsCallHistoryQuery[appId].lstMsCall.Count;
                                }

                                #region 取出各条记录

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                gAppUpper.Body.dic.Add("TotalRecords", gDicStrMsCallHistoryQuery[appId].totalRecords.ToString());
                                gAppUpper.Body.dic.Add("CurPageIndex", pageInfo);
                                gAppUpper.Body.dic.Add("PageSize", gDicStrMsCallHistoryQuery[appId].pageSize.ToString());
                   
                                for (int inx = 0; inx < firstPageSize; inx++)
                                {
                                    strMsCall tmp = gDicStrMsCallHistoryQuery[appId].lstMsCall[inx];
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();
                                    ndic.name = (inx + 1).ToString();

                                    if (string.IsNullOrEmpty(tmp.imsi))
                                    {
                                        ndic.dic.Add("imsi", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("imsi", tmp.imsi);
                                    }

                                    // 2018-10-11
                                    if (string.IsNullOrEmpty(tmp.devName))
                                    {
                                        ndic.dic.Add("name", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("name", tmp.devName);
                                    }

                                    if (string.IsNullOrEmpty(tmp.number))
                                    {
                                        ndic.dic.Add("number", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("number", tmp.number);
                                    }

                                    if (string.IsNullOrEmpty(tmp.time))
                                    {
                                        ndic.dic.Add("time", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("time", tmp.time);
                                    }                                   

                                    gAppUpper.Body.n_dic.Add(ndic);
                                }

                                #endregion
                            }                       
                           
                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                                               
                        }
                    case AppMsgType.app_get_MsCall_NextPage_Request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);
               
                            //
                            // "CurPageIndex":"1:50",   
                            //                                                 

                            string CurPageIndex = "";
                            int curPageInx = -1;
                            int totalPages = -1;

                            if (gAppUpper.Body.dic.ContainsKey("CurPageIndex"))
                            {
                                CurPageIndex = gAppUpper.Body.dic["CurPageIndex"].ToString();
                                if (check_and_get_page_info(CurPageIndex, ref curPageInx, ref totalPages) == false)
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:", "CurPageIndex字段解析出错.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:", "没包含字段CurPageIndex");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            if (!gDicStrMsCallHistoryQuery.ContainsKey(appId))
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的查询信息不存在.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            strMsCallHistoryQuery query = gDicStrMsCallHistoryQuery[appId];
                            if (query.totalPages != totalPages)
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的总页数不匹配.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            int startInx = -1;
                            int endedInx = -1;

                            if (curPageInx == totalPages)
                            {
                                //最后一页
                                startInx = (curPageInx - 1) * query.pageSize;
                                endedInx = query.totalRecords;
                            }
                            else
                            {
                                //不是最后一页
                                startInx = (curPageInx - 1) * query.pageSize;
                                endedInx = startInx + query.pageSize;
                            }

                            #region 取出各条记录

                            string pageInfo = string.Format("{0}:{1}", curPageInx, query.totalPages);
                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_Response, 0, gDbHelperUpper.get_rtv_str(0), true, null, null);
                            gAppUpper.Body.dic.Add("TotalRecords", query.totalRecords.ToString());
                            gAppUpper.Body.dic.Add("CurPageIndex", pageInfo);
                            gAppUpper.Body.dic.Add("PageSize", query.pageSize.ToString());

                            for (int inx = startInx; inx < endedInx; inx++)
                            {
                                strMsCall tmp = gDicStrMsCallHistoryQuery[appId].lstMsCall[inx];
                                Name_DIC_Struct ndic = new Name_DIC_Struct();
                                ndic.name = (inx + 1).ToString();

                                if (string.IsNullOrEmpty(tmp.imsi))
                                {
                                    ndic.dic.Add("imsi", "");
                                }
                                else
                                {
                                    ndic.dic.Add("imsi", tmp.imsi);
                                }

                                // 2018-10-11
                                if (string.IsNullOrEmpty(tmp.devName))
                                {
                                    ndic.dic.Add("name", "");
                                }
                                else
                                {
                                    ndic.dic.Add("name", tmp.devName);
                                }

                                if (string.IsNullOrEmpty(tmp.number))
                                {
                                    ndic.dic.Add("number", "");
                                }
                                else
                                {
                                    ndic.dic.Add("number", tmp.number);
                                }

                                if (string.IsNullOrEmpty(tmp.time))
                                {
                                    ndic.dic.Add("time", "");
                                }
                                else
                                {
                                    ndic.dic.Add("time", tmp.time);
                                }

                                gAppUpper.Body.n_dic.Add(ndic);
                            }

                            #endregion


                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                                         
                        }
                    case AppMsgType.app_get_MsCall_ExportCSV_Request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);

                            //                         
                            //
                            // "fileName":"abc.csv"
                            //                                                 

                            string fileName = "";
                            if (gAppUpper.Body.dic.ContainsKey("fileName"))
                            {
                                fileName = gAppUpper.Body.dic["fileName"].ToString();

                                if (false == IsValidFileName(fileName))
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:", "文件名非法.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_ExportCSV_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    string extension = System.IO.Path.GetExtension(fileName);
                                    if (extension != ".csv")
                                    {
                                        string errInfo = get_debug_info() + string.Format("{0}:", "后缀名非法.");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_ExportCSV_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:", "没包含字段fileName");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_ExportCSV_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }


                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_ExportCSV_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            if (!gDicStrMsCallHistoryQuery.ContainsKey(appId))
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的截获电话信息不存在.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_ExportCSV_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            strMsCallHistoryQuery query = gDicStrMsCallHistoryQuery[appId];

                            int rtv = -1;
                            byte[] outData = null;
                            if (0 == generate_call_byte_csv(ref outData, query.lstMsCall))
                            {
                                try
                                {                                    
                                    rtv = gFtpHelperFile.Put(fileName, outData);
                                    if (rtv == -1)
                                    {
                                        string errInfo = get_debug_info() + string.Format("上传文件失败.");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsCall_ExportCSV_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                catch (Exception ee)
                                {
                                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);

                                    gAppUpper.Body.type = AppMsgType.app_get_MsCall_ExportCSV_Response;
                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("ReturnCode", -1);
                                    gAppUpper.Body.dic.Add("ReturnStr", "失败");
                                    gAppUpper.Body.dic.Add("ftpUsrName", DataController.StrFtpUserId);
                                    gAppUpper.Body.dic.Add("ftpPwd", DataController.StrFtpUserPsw);
                                    gAppUpper.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                    gAppUpper.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                    gAppUpper.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                    gAppUpper.Body.dic.Add("fileName", fileName);

                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }                              
                            }

                            gAppUpper.Body.type = AppMsgType.app_get_MsCall_ExportCSV_Response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();

                            if (rtv == 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnCode", 0);
                                gAppUpper.Body.dic.Add("ReturnStr", "成功");
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", "失败");
                            }

                            gAppUpper.Body.dic.Add("ftpUsrName", DataController.StrFtpUserId);
                            gAppUpper.Body.dic.Add("ftpPwd", DataController.StrFtpUserPsw);
                            gAppUpper.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                            gAppUpper.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                            gAppUpper.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                            gAppUpper.Body.dic.Add("fileName", fileName);

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                     
                        }
                    case AppMsgType.app_get_MsSms_Request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);

                            //   "parentFullPathName":"设备.深圳.福田.中心广场.西北监控",   //为""时表示所有的设备
                            //   "name":"GSM-Name"                                    //GSM的名称，为""时表示parentFullPathName下所有的设备
                            //   "carry":"0"                                          //GSM的载波标识，"0"或者"1",CDMA时为"-1"
                            //   "imsi":"46000xxxxxxxxx",                             //指定要搜索的IMSI号，不指定是为""
                            //   "number":"138xxxxxxx",                               //指定要搜索的手机号，不指定是为""
                            //   "data":"服务器",                                      //指定要搜索的内容，不指定是为""
                            //   "timeStart":"2018-09-26 12:34:56",                   //开始时间，不指定是为""
                            //   "timeEnded":"2018-95-27 12:34:56",                   //结束时间，不指定是为""                

                            int rtv = -1;
                            strDevice devInfo = new strDevice();
                            strMsSmsHistoryQuery query = new strMsSmsHistoryQuery();
                            query.lstDevId = new List<int>();

                            string parentFullPathName = "";
                            string name = "";
                            string deviceFullPathName = "";

                            string carry = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                                query.devName = name;
                            }

                            #region 设备过滤条件的处理，2018-10-09

                            if (parentFullPathName == "")
                            {
                                //即所有的设备
                                query.lstDevId = new List<int>();
                            }
                            else
                            {
                                if (name == "")
                                {
                                    //域下面的所有设备

                                    //获取一个节点下所有站点下所有设备Id的列表
                                    rtv = gDbHelperUpper.domain_record_device_id_list_get(parentFullPathName, ref query.lstDevId);
                                    if (rtv != 0)
                                    {
                                        string errInfo = string.Format("{0}：domain_record_device_id_list_get失败", parentFullPathName);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else
                                {
                                    //只有一个设备
                                    deviceFullPathName = string.Format("{0}.{1}", parentFullPathName, name);
                                    if (!gDicDevFullName.ContainsKey(deviceFullPathName))
                                    {
                                        string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", deviceFullPathName);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                    else
                                    {
                                        devInfo = gDicDevFullName[deviceFullPathName];
                                        query.lstDevId.Add(devInfo.id);
                                        query.devName = name;
                                    }
                                }
                            }

                            #endregion

                            if (gAppUpper.Body.dic.ContainsKey("carry"))
                            {
                                carry = gAppUpper.Body.dic["carry"].ToString();
                            }
                            
                            if (gAppUpper.Body.dic.ContainsKey("imsi"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["imsi"].ToString()))
                                {
                                    query.imsi = gAppUpper.Body.dic["imsi"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("number"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["number"].ToString()))
                                {
                                    query.number = gAppUpper.Body.dic["number"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("data"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["data"].ToString()))
                                {
                                    query.data = gAppUpper.Body.dic["data"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("timeStart"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["timeStart"].ToString()))
                                {
                                    query.timeStart = gAppUpper.Body.dic["timeStart"].ToString();

                                    try
                                    {
                                        DateTime.Parse(query.timeStart);
                                    }
                                    catch
                                    {
                                        string errInfo = get_debug_info() + string.Format("timeStart的格式不对");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else
                                {
                                    query.timeStart = "1900-01-01 12:34:56";
                                }
                            }
                            else
                            {
                                query.timeStart = "1900-01-01 12:34:56";
                            }

                            if (gAppUpper.Body.dic.ContainsKey("timeEnded"))
                            {
                                if (!string.IsNullOrEmpty(gAppUpper.Body.dic["timeEnded"].ToString()))
                                {
                                    query.timeEnded = gAppUpper.Body.dic["timeEnded"].ToString();
                                    try
                                    {
                                        DateTime.Parse(query.timeEnded);
                                        if (string.Compare(query.timeStart, query.timeEnded) > 0)
                                        {
                                            string errInfo = get_debug_info() + string.Format("timeStart大于timeEnded.");
                                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                            break;
                                        }
                                    }
                                    catch
                                    {
                                        string errInfo = get_debug_info() + string.Format("timeEnded的格式不对");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                else
                                {
                                    query.timeEnded = "2918-06-05 12:34:56";
                                }
                            }
                            else
                            {
                                query.timeEnded = "2918-06-05 12:34:56";
                            }

                            #endregion

                            #region 返回消息

                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (!gDicStrMsSmsHistoryQuery.ContainsKey(appId))
                            {
                                rtv = gDbHelperUpper.send_ms_sms_get_by_devid(int.Parse(carry), ref query,gDicDevId_Station_DevName);
                                if (rtv == 0)
                                {
                                    query.totalRecords = query.lstMsSms.Count;
                                    query.totalPages = (int)Math.Ceiling((double)query.totalRecords / DataController.RecordsOfPageSize);
                                    query.pageSize = DataController.RecordsOfPageSize;
                                }

                                //添加App对应的黑白名单查询条件和结果
                                gDicStrMsSmsHistoryQuery.Add(appId, query);
                            }
                            else
                            {
                                gDicStrMsSmsHistoryQuery.Remove(appId);

                                //每次都从库中取吧，因为再次查询时，库已经发生变化了。
                                rtv = gDbHelperUpper.send_ms_sms_get_by_devid(int.Parse(carry), ref query, gDicDevId_Station_DevName);
                                if (rtv == 0)
                                {
                                    query.totalRecords = query.lstMsSms.Count;
                                    query.totalPages = (int)Math.Ceiling((double)query.totalRecords / DataController.RecordsOfPageSize);
                                    query.pageSize = DataController.RecordsOfPageSize;
                                }

                                //添加App对应的黑白名单查询条件和结果
                                gDicStrMsSmsHistoryQuery.Add(appId, query);
                            }

                            if (rtv != (int)RC.SUCCESS)
                            {
                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                string pageInfo = "";
                                if (gDicStrMsSmsHistoryQuery[appId].lstMsSms.Count == 0)
                                {
                                    pageInfo = "0:0";
                                }
                                else
                                {
                                    pageInfo = string.Format("1:{0}", Math.Ceiling((double)gDicStrMsSmsHistoryQuery[appId].lstMsSms.Count / DataController.RecordsOfPageSize));
                                }

                                int firstPageSize = 0;
                                if (gDicStrMsSmsHistoryQuery[appId].lstMsSms.Count > DataController.RecordsOfPageSize)
                                {
                                    firstPageSize = DataController.RecordsOfPageSize;
                                }
                                else
                                {
                                    firstPageSize = gDicStrMsSmsHistoryQuery[appId].lstMsSms.Count;
                                }

                                #region 取出各条记录

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);
                                gAppUpper.Body.dic.Add("TotalRecords", gDicStrMsSmsHistoryQuery[appId].totalRecords.ToString());
                                gAppUpper.Body.dic.Add("CurPageIndex", pageInfo);
                                gAppUpper.Body.dic.Add("PageSize", gDicStrMsSmsHistoryQuery[appId].pageSize.ToString());

                                for (int inx = 0; inx < firstPageSize; inx++)
                                {
                                    strMsSms tmp = gDicStrMsSmsHistoryQuery[appId].lstMsSms[inx];
                                    Name_DIC_Struct ndic = new Name_DIC_Struct();
                                    ndic.name = (inx + 1).ToString();

                                    if (string.IsNullOrEmpty(tmp.imsi))
                                    {
                                        ndic.dic.Add("imsi", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("imsi", tmp.imsi);
                                    }

                                    // 2018-10-11
                                    if (string.IsNullOrEmpty(tmp.devName))
                                    {
                                        ndic.dic.Add("name", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("name", tmp.devName);
                                    }

                                    if (string.IsNullOrEmpty(tmp.number))
                                    {
                                        ndic.dic.Add("number", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("number", tmp.number);
                                    }

                                    if (string.IsNullOrEmpty(tmp.codetype))
                                    {
                                        ndic.dic.Add("codetype", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("codetype", tmp.codetype);
                                    }

                                    if (string.IsNullOrEmpty(tmp.data))
                                    {
                                        ndic.dic.Add("data", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("data", tmp.data);
                                    }

                                    if (string.IsNullOrEmpty(tmp.time))
                                    {
                                        ndic.dic.Add("time", "");
                                    }
                                    else
                                    {
                                        ndic.dic.Add("time", tmp.time);
                                    }

                                    gAppUpper.Body.n_dic.Add(ndic);
                                }

                                #endregion
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                                               
                        }
                    case AppMsgType.app_get_MsSms_NextPage_Request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);

                            //
                            // "CurPageIndex":"1:50",   
                            //                                                 

                            string CurPageIndex = "";
                            int curPageInx = -1;
                            int totalPages = -1;

                            if (gAppUpper.Body.dic.ContainsKey("CurPageIndex"))
                            {
                                CurPageIndex = gAppUpper.Body.dic["CurPageIndex"].ToString();
                                if (check_and_get_page_info(CurPageIndex, ref curPageInx, ref totalPages) == false)
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:", "CurPageIndex字段解析出错.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:", "没包含字段CurPageIndex");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            if (!gDicStrMsSmsHistoryQuery.ContainsKey(appId))
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的查询信息不存在.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            strMsSmsHistoryQuery query = gDicStrMsSmsHistoryQuery[appId];
                            if (query.totalPages != totalPages)
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的总页数不匹配.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            int startInx = -1;
                            int endedInx = -1;

                            if (curPageInx == totalPages)
                            {
                                //最后一页
                                startInx = (curPageInx - 1) * query.pageSize;
                                endedInx = query.totalRecords;
                            }
                            else
                            {
                                //不是最后一页
                                startInx = (curPageInx - 1) * query.pageSize;
                                endedInx = startInx + query.pageSize;
                            }

                            #region 取出各条记录

                            string pageInfo = string.Format("{0}:{1}", curPageInx, query.totalPages);
                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_Response, 0, gDbHelperUpper.get_rtv_str(0), true, null, null);
                            gAppUpper.Body.dic.Add("TotalRecords", query.totalRecords.ToString());
                            gAppUpper.Body.dic.Add("CurPageIndex", pageInfo);
                            gAppUpper.Body.dic.Add("PageSize", query.pageSize.ToString());

                            for (int inx = startInx; inx < endedInx; inx++)
                            {
                                strMsSms tmp = gDicStrMsSmsHistoryQuery[appId].lstMsSms[inx];
                                Name_DIC_Struct ndic = new Name_DIC_Struct();
                                ndic.name = (inx + 1).ToString();

                                if (string.IsNullOrEmpty(tmp.imsi))
                                {
                                    ndic.dic.Add("imsi", "");
                                }
                                else
                                {
                                    ndic.dic.Add("imsi", tmp.imsi);
                                }

                                // 2018-10-11
                                if (string.IsNullOrEmpty(tmp.devName))
                                {
                                    ndic.dic.Add("name", "");
                                }
                                else
                                {
                                    ndic.dic.Add("name", tmp.devName);
                                }

                                if (string.IsNullOrEmpty(tmp.number))
                                {
                                    ndic.dic.Add("number", "");
                                }
                                else
                                {
                                    ndic.dic.Add("number", tmp.number);
                                }

                                if (string.IsNullOrEmpty(tmp.codetype))
                                {
                                    ndic.dic.Add("codetype", "");
                                }
                                else
                                {
                                    ndic.dic.Add("codetype", tmp.codetype);
                                }

                                if (string.IsNullOrEmpty(tmp.data))
                                {
                                    ndic.dic.Add("data", "");
                                }
                                else
                                {
                                    ndic.dic.Add("data", tmp.data);
                                }

                                if (string.IsNullOrEmpty(tmp.time))
                                {
                                    ndic.dic.Add("time", "");
                                }
                                else
                                {
                                    ndic.dic.Add("time", tmp.time);
                                }

                                gAppUpper.Body.n_dic.Add(ndic);
                            }

                            #endregion


                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                                                             
                        }
                    case AppMsgType.app_get_MsSms_ExportCSV_Request:
                        {
                            #region 获取信息

                            string appId = Get_App_Info(gAppUpper);

                            //                         
                            //
                            // "fileName":"abc.csv"
                            //                                                 

                            string fileName = "";
                            if (gAppUpper.Body.dic.ContainsKey("fileName"))
                            {
                                fileName = gAppUpper.Body.dic["fileName"].ToString();

                                if (false == IsValidFileName(fileName))
                                {
                                    string errInfo = get_debug_info() + string.Format("{0}:", "文件名非法.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_ExportCSV_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    string extension = System.IO.Path.GetExtension(fileName);
                                    if (extension != ".csv")
                                    {
                                        string errInfo = get_debug_info() + string.Format("{0}:", "后缀名非法.");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_ExportCSV_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:", "没包含字段fileName");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_ExportCSV_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }


                            if (string.IsNullOrEmpty(appId))
                            {
                                string errInfo = get_debug_info() + "获取AppInfo的IP和Port失败.";
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_ExportCSV_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            if (!gDicStrMsSmsHistoryQuery.ContainsKey(appId))
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的截获电话信息不存在.", appId);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_ExportCSV_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            strMsSmsHistoryQuery query = gDicStrMsSmsHistoryQuery[appId];

                            int rtv = -1;
                            byte[] outData = null;
                            if (0 == generate_sms_byte_csv(ref outData, query.lstMsSms))
                            {
                                try
                                {
                                    rtv = gFtpHelperFile.Put(fileName, outData);
                                    if (rtv == -1)
                                    {
                                        string errInfo = get_debug_info() + string.Format("上传文件失败.");
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_MsSms_ExportCSV_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                                catch (Exception ee)
                                {
                                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);

                                    gAppUpper.Body.type = AppMsgType.app_get_MsSms_ExportCSV_Response;
                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("ReturnCode", -1);
                                    gAppUpper.Body.dic.Add("ReturnStr", "失败");
                                    gAppUpper.Body.dic.Add("ftpUsrName", DataController.StrFtpUserId);
                                    gAppUpper.Body.dic.Add("ftpPwd", DataController.StrFtpUserPsw);
                                    gAppUpper.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                                    gAppUpper.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                                    gAppUpper.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                                    gAppUpper.Body.dic.Add("fileName", fileName);

                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            gAppUpper.Body.type = AppMsgType.app_get_MsSms_ExportCSV_Response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();

                            if (rtv == 0)
                            {
                                gAppUpper.Body.dic.Add("ReturnCode", 0);
                                gAppUpper.Body.dic.Add("ReturnStr", "成功");
                            }
                            else
                            {
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", "失败");
                            }

                            gAppUpper.Body.dic.Add("ftpUsrName", DataController.StrFtpUserId);
                            gAppUpper.Body.dic.Add("ftpPwd", DataController.StrFtpUserPsw);
                            gAppUpper.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                            gAppUpper.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                            gAppUpper.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                            gAppUpper.Body.dic.Add("fileName", fileName);

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                     
                        }
                    case AppMsgType.app_get_GCInfo_Request:
                        {
                            #region 获取信息

                            //   "parentFullPathName":"设备.深圳.福田.中心广场.西北监控",
                            //   "name":"GCname"     //GSM-V2/CDMA的名称
                            //   "carry":"x"         //GSM-V2的载波标识，"0"或者"1" ; CDMA时为"-1"

                            int rtv = -1;
                            string mode = "";
                            strDevice devInfo = new strDevice();

                            string name = "";
                            string carry = "";
                            string parentFullPathName = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("carry"))
                            {
                                carry = gAppUpper.Body.dic["carry"].ToString();
                            }

                            if (parentFullPathName == "" || name == "")
                            {
                                string errInfo = get_debug_info() + string.Format("app_get_GCInfo_Request,参数有误");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GCInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (carry != "-1" && carry != "0" && carry != "1")
                            {
                                string errInfo = get_debug_info() + string.Format("app_get_GsmInfo_Request,carry = {0},参数有误", carry);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GCInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            strDomian domian = new strDomian();
                            string devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);

                            if (!gDicDevFullName.ContainsKey(devFullPathName))
                            {
                                string errInfo = string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", devFullPathName);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GCInfo_Response, -1, get_debug_info() + errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[devFullPathName];
                                rtv = gDbHelperUpper.domain_record_get_by_nameFullPath(parentFullPathName, ref domian);
                                if (rtv == 0)
                                {
                                    int id = -1;
                                    rtv = gDbHelperUpper.device_record_id_get_by_affdomainid_and_name(domian.id, name, ref id, ref mode);
                                }
                            }

                            str_GC_All_Para allInfo = new str_GC_All_Para();

                            //(1)
                            rtv = gDbHelperUpper.gc_param_config_record_get_by_devid(int.Parse(carry), devInfo.id, ref allInfo.gcParamConfig);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("gc_param_config_record_get_by_devid出错:") + gDbHelperUpper.get_rtv_str(rtv); ;
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GCInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            //(2)
                            rtv = gDbHelperUpper.gc_misc_record_get_by_devid(int.Parse(carry), devInfo.id, ref allInfo.gcMisc);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("gc_misc_record_get_by_devid出错") + gDbHelperUpper.get_rtv_str(rtv);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GCInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            //(2.1)  2018-10-26
                            rtv = gDbHelperUpper.gc_trace_report_record_get_by_devid(int.Parse(carry), devInfo.id, ref allInfo.listGcTraceReport);
                            if ((rtv != 0)  && (rtv!= (int)RC.NO_EXIST))
                            {
                                string errInfo = string.Format("gc_trace_report_record_get_by_devid出错") + gDbHelperUpper.get_rtv_str(rtv);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GCInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            ////////"n_dic":  2018-11-09，这部分移除掉，变成了用app_all_bwlist_request进行请求,因为如果有很多bIMSI时，方便分页处理
                            ////////   [
                            ////////       "name":"CONFIG_IMSI_MSG_V3_ID",    //4.17  大数量imsi名单，用于配置不同的目标IMSI不同的行为
                            ////////      {
                            ////////					"wTotalImsi":XXX		总的IMSI数（此版本忽略）				
                            ////////					"bIMSI_#n#":XXX	        IMSI数组。0~9	配置/删除/查询的IMSI
                            ////////					"bUeActionFlag_#n#":XXX 目标IMSI对应的动作。1 = Reject；5 = Hold ON	
                            ////////       }
                            ////////    ],
                            //(3)
                            //rtv = gDbHelperUpper.gc_imsi_action_record_get_by_devid(int.Parse(carry), devInfo.id, ref allInfo.listGcImsiAction);
                            //if (rtv != 0)
                            //{
                            //    string errInfo = string.Format("gc_imsi_action_record_get_by_devid出错:") + gDbHelperUpper.get_rtv_str(rtv); ;
                            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                            //    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GCInfo_Response, -1, errInfo, true, null, null);
                            //    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            //    break;
                            //}

                            //(4)
                            rtv = gDbHelperUpper.gc_carrier_msg_record_get_by_devid(int.Parse(carry), devInfo.id, ref allInfo.gcCarrierMsg);
                            if (rtv != 0)
                            {
                                string errInfo = string.Format("gc_carrier_msg_record_get_by_devid出错:") + gDbHelperUpper.get_rtv_str(rtv); ;
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GCInfo_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }


                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_GCInfo_Response, rtv, gDbHelperUpper.get_rtv_str(rtv), true, null, null);

                            gAppUpper.Body.dic.Add("domainId", domian.id.ToString());
                            gAppUpper.Body.dic.Add("domainParentId", domian.parentId.ToString());
                            gAppUpper.Body.dic.Add("parentFullPathName", parentFullPathName);
                            gAppUpper.Body.dic.Add("name", name);
                            gAppUpper.Body.dic.Add("carry", carry);

                            //"n_dic":
                            //   [
                            //       "name":"CONFIG_FAP_MSG",            //4.4  GUI配置FAP的启动参数
                            //       {
                            //					"bWorkingMode":XXX		    工作模式:1 为侦码模式 ;3驻留模式.
                            //					"bC":XXX		            是否自动切换模式。保留
                            //					"wRedirectCellUarfcn":XXX	CDMA黑名单频点
                            //					"dwDateTime":XXX			当前时间	
                            //					"bPLMNId":XXX		    PLMN标志
                            //					"bTxPower":XXX			实际发射功率.设置发射功率衰减寄存器, 0输出最大功率, 每增加1, 衰减1DB
                            //					"bRxGain":XXX			接收信号衰减寄存器. 每增加1增加1DB的增益
                            //					"wPhyCellId":XXX		物理小区ID.
                            //					"wLAC":XXX			    追踪区域码。GSM：LAC;CDMA：REG_ZONE
                            //					"wUARFCN":XXX			小区频点. CDMA 制式为BSID
                            //					"dwCellId":XXX			小区ID。注意在CDMA制式没有小区ID，高位WORD 是SID ， 低位WORD 是NID
                            //       }
                            //    ]; 

                            Name_DIC_Struct ndic = new Name_DIC_Struct();
                            if (!string.IsNullOrEmpty(allInfo.gcParamConfig.bWorkingMode))
                            {
                                ndic = new Name_DIC_Struct();
                                ndic.name = "CONFIG_FAP_MSG";

                                ndic.dic.Add("bWorkingMode", allInfo.gcParamConfig.bWorkingMode);
                                ndic.dic.Add("bC", allInfo.gcParamConfig.bC);
                                ndic.dic.Add("wRedirectCellUarfcn", allInfo.gcParamConfig.wRedirectCellUarfcn);
                                ndic.dic.Add("dwDateTime", allInfo.gcParamConfig.dwDateTime);
                                ndic.dic.Add("bPLMNId", allInfo.gcParamConfig.bPLMNId);
                                ndic.dic.Add("bTxPower", allInfo.gcParamConfig.bTxPower);
                                ndic.dic.Add("bRxGain", allInfo.gcParamConfig.bRxGain);
                                ndic.dic.Add("wPhyCellId", allInfo.gcParamConfig.wPhyCellId);
                                ndic.dic.Add("wLAC", allInfo.gcParamConfig.wLAC);
                                ndic.dic.Add("wUARFCN", allInfo.gcParamConfig.wUARFCN);
                                ndic.dic.Add("dwCellId", allInfo.gcParamConfig.dwCellId);
                                gAppUpper.Body.n_dic.Add(ndic);
                            }


                            // 2018-10-26
                            if (allInfo.listGcTraceReport.Count > 0)
                            {                                
                                foreach (strGcTraceReport gtr in allInfo.listGcTraceReport)
                                {
                                    //       "name":"FAP_TRACE_MSG",     //4.7  FAP上报一些事件和状态给GUI，GUI程序需要显示给操作者看。
                                    //      {
                                    //					"wTraceLen":XXX	      Trace长度
                                    //                  "cTrace":XXX          Trace内容
                                    //       }
                                    if (!string.IsNullOrEmpty(gtr.wTraceLen))
                                    {
                                        ndic = new Name_DIC_Struct();
                                        ndic.name = "FAP_TRACE_MSG";

                                        ndic.dic.Add("wTraceLen", gtr.wTraceLen);
                                        ndic.dic.Add("cTrace", gtr.cTrace);
                                        gAppUpper.Body.n_dic.Add(ndic);
                                    }


                                    //       "name":"UE_ORM_REPORT_MSG",                 //4.9  FAP上报UE主叫信息，只用于GSM和CDMA
                                    //      {
                                    //					"bOrmType":XXX	    	主叫类型。1=呼叫号码, 2=短消息PDU,3=寻呼测量
                                    //					"bUeId":XXX	     	    IMSI
                                    //					"cRSRP":XXX	    	    接收信号强度。寻呼测量时，-128表示寻呼失败
                                    //					"bUeContentLen":XXX	    Ue主叫内容长度
                                    //					"bUeContent":XXX	    Ue主叫内容。最大249字节。
                                    //       }
                                    if (!string.IsNullOrEmpty(gtr.bOrmType))
                                    {
                                        ndic = new Name_DIC_Struct();
                                        ndic.name = "UE_ORM_REPORT_MSG";

                                        ndic.dic.Add("bOrmType", gtr.bOrmType);
                                        ndic.dic.Add("bUeId", gtr.bUeId);
                                        ndic.dic.Add("cRSRP", gtr.cRSRP);
                                        ndic.dic.Add("bUeContentLen", gtr.bUeContentLen);
                                        ndic.dic.Add("bUeContent", gtr.bUeContent);
                                        gAppUpper.Body.n_dic.Add(ndic);
                                    }
                                }
                            }


                            //     "name":"CONFIG_SMS_CONTENT_MSG",                 //4.10  FAP 配置下发短信号码和内容
                            //      {
                            //					"bSMSOriginalNumLen":XXX	    主叫号码长度
                            //					"bSMSOriginalNum":XXX	    	主叫号码
                            //					"bSMSContentLen":XXX	    	短信内容字数
                            //					"bSMSContent":XXX	            短信内容.unicode编码，每个字符占2字节
                            //       }
                            if (!string.IsNullOrEmpty(allInfo.gcMisc.bSMSOriginalNumLen))
                            {
                                ndic = new Name_DIC_Struct();
                                ndic.name = "CONFIG_SMS_CONTENT_MSG";

                                ndic.dic.Add("bSMSOriginalNumLen", allInfo.gcMisc.bSMSOriginalNumLen);
                                ndic.dic.Add("bSMSOriginalNum", allInfo.gcMisc.bSMSOriginalNum);
                                ndic.dic.Add("bSMSContentLen", allInfo.gcMisc.bSMSContentLen);
                                ndic.dic.Add("bSMSContent", allInfo.gcMisc.bSMSContent);
                                gAppUpper.Body.n_dic.Add(ndic);
                            }

                            //     2018-08-20
                            //       "name":"TIME_CONTROL",            // 2018-08-20
                            //      {
                            //                  "activeTime1Start":"09:30:00"  生效时间1的起始时间
                            //                  "activeTime1Ended":"12:30:00"  生效时间1的结束时间
                            //                  "activeTime2Start":"13:30:00"  生效时间2的起始时间
                            //                  "activeTime2Ended":"14:30:00"  生效时间2的结束时间
                            //                  "activeTime3Start":"16:30:00"  生效时间3的起始时间，有的话就添加该项
                            //                  "activeTime3Ended":"18:30:00"  生效时间3的结束时间，有的话就添加该项
                            //                  "activeTime4Start":"20:30:00"  生效时间4的起始时间，有的话就添加该项
                            //                  "activeTime4Ended":"22:30:00"  生效时间4的结束时间，有的话就添加该项
                            //       }
                            if (!string.IsNullOrEmpty(allInfo.gcMisc.activeTime1Start))
                            {
                                ndic = new Name_DIC_Struct();
                                ndic.name = "TIME_CONTROL";

                                ndic.dic.Add("activeTime1Start", allInfo.gcMisc.activeTime1Start);
                                ndic.dic.Add("activeTime1Ended", allInfo.gcMisc.activeTime1Ended);

                                if (!string.IsNullOrEmpty(allInfo.gcMisc.activeTime2Start))
                                {
                                    ndic.dic.Add("activeTime2Start", allInfo.gcMisc.activeTime2Start);
                                    ndic.dic.Add("activeTime2Ended", allInfo.gcMisc.activeTime2Ended);
                                }

                                if (!string.IsNullOrEmpty(allInfo.gcMisc.activeTime3Start))
                                {
                                    ndic.dic.Add("activeTime3Start", allInfo.gcMisc.activeTime3Start);
                                    ndic.dic.Add("activeTime3Ended", allInfo.gcMisc.activeTime3Ended);
                                }

                                if (!string.IsNullOrEmpty(allInfo.gcMisc.activeTime4Start))
                                {
                                    ndic.dic.Add("activeTime4Start", allInfo.gcMisc.activeTime4Start);
                                    ndic.dic.Add("activeTime4Ended", allInfo.gcMisc.activeTime4Ended);
                                }

                                gAppUpper.Body.n_dic.Add(ndic);
                            }
                                                  

                            //       "name":"CONFIG_CDMA_CARRIER_MSG",            //4.14  GUI 配置CDMA多载波参数
                            //       {
                            //					"wARFCN1":XXX	        工作频点1	
                            //					"bARFCN1Mode":XXX	    工作频点1模式。0表示扫描，1表示常开,2表示关闭。
                            //					"wARFCN1Duration":XXX	工作频点1扫描时长
                            //					"wARFCN1Period":XXX	    工作频点1扫描间隔
                            //					"wARFCN2":XXX	        工作频点2
                            //					"bARFCN2Mode":XXX	    工作频点2模式。 0表示扫描，1表示常开,2表示关闭。
                            //					"wARFCN2Duration":XXX	工作频点2扫描时长
                            //					"wARFCN2Period":XXX	    工作频点2扫描间隔
                            //					"wARFCN3":XXX	        工作频点3	
                            //					"bARFCN3Mode":XXX	    工作频点3模式。 0表示扫描，1表示常开,2表示关闭。
                            //					"wARFCN3Duration":XXX	工作频点3扫描时长	
                            //					"wARFCN3Period":XXX	    工作频点3扫描间隔
                            //					"wARFCN4":XXX	        工作频点4	
                            //					"bARFCN4Mode":XXX	    工作频点4模式。	0表示扫描，1表示常开,2表示关闭。
                            //					"wARFCN4Duration":XXX	工作频点4扫描时长
                            //					"wARFCN4Period":XXX	    工作频点4扫描间隔
                            //       }
                            if (!string.IsNullOrEmpty(allInfo.gcCarrierMsg.wARFCN1))
                            {
                                ndic = new Name_DIC_Struct();
                                ndic.name = "CONFIG_CDMA_CARRIER_MSG";

                                ndic.dic.Add("wARFCN1", allInfo.gcCarrierMsg.wARFCN1);
                                ndic.dic.Add("bARFCN1Mode", allInfo.gcCarrierMsg.bARFCN1Mode);
                                ndic.dic.Add("wARFCN1Duration", allInfo.gcCarrierMsg.wARFCN1Duration);
                                ndic.dic.Add("wARFCN1Period", allInfo.gcCarrierMsg.wARFCN1Period);

                                ndic.dic.Add("wARFCN2", allInfo.gcCarrierMsg.wARFCN2);
                                ndic.dic.Add("bARFCN2Mode", allInfo.gcCarrierMsg.bARFCN2Mode);
                                ndic.dic.Add("wARFCN2Duration", allInfo.gcCarrierMsg.wARFCN2Duration);
                                ndic.dic.Add("wARFCN2Period", allInfo.gcCarrierMsg.wARFCN2Period);

                                ndic.dic.Add("wARFCN3", allInfo.gcCarrierMsg.wARFCN3);
                                ndic.dic.Add("bARFCN3Mode", allInfo.gcCarrierMsg.bARFCN3Mode);
                                ndic.dic.Add("wARFCN3Duration", allInfo.gcCarrierMsg.wARFCN3Duration);
                                ndic.dic.Add("wARFCN3Period", allInfo.gcCarrierMsg.wARFCN3Period);

                                ndic.dic.Add("wARFCN4", allInfo.gcCarrierMsg.wARFCN4);
                                ndic.dic.Add("bARFCN4Mode", allInfo.gcCarrierMsg.bARFCN4Mode);
                                ndic.dic.Add("wARFCN4Duration", allInfo.gcCarrierMsg.wARFCN4Duration);
                                ndic.dic.Add("wARFCN4Period", allInfo.gcCarrierMsg.wARFCN4Period);

                                gAppUpper.Body.n_dic.Add(ndic);
                            }


                            ////////"n_dic":  2018-11-09，这部分移除掉，变成了用app_all_bwlist_request进行请求,因为如果有很多bIMSI时，方便分页处理
                            ////////   [
                            ////////       "name":"CONFIG_IMSI_MSG_V3_ID",    //4.17  大数量imsi名单，用于配置不同的目标IMSI不同的行为
                            ////////      {
                            ////////					"wTotalImsi":XXX		总的IMSI数（此版本忽略）				
                            ////////					"bIMSI_#n#":XXX	        IMSI数组。0~9	配置/删除/查询的IMSI
                            ////////					"bUeActionFlag_#n#":XXX 目标IMSI对应的动作。1 = Reject；5 = Hold ON	
                            ////////       }
                            ////////    ],
                            //       "name":"CONFIG_IMSI_MSG_V3_ID",    //4.17  大数量imsi名单，用于配置不同的目标IMSI不同的行为
                            //      {
                            //				"wTotalImsi":XXX		总的IMSI数（此版本忽略）				
                            //				"bIMSI_#n#":XXX	        IMSI数组。0~9	配置/删除/查询的IMSI
                            //				"bUeActionFlag_#n#":XXX 目标IMSI对应的动作。1 = Reject；5 = Hold ON	
                            //       }
                            //if (allInfo.listGcImsiAction.Count > 0)
                            //{
                            //    int i = 0;
                            //    string field = "";
                            //    ndic = new Name_DIC_Struct();
                            //    ndic.name = "CONFIG_IMSI_MSG_V3_ID";

                            //    ndic.dic.Add("wTotalImsi", allInfo.listGcImsiAction.Count.ToString());
                            //    foreach (strGcImsiAction str in allInfo.listGcImsiAction)
                            //    {
                            //        field = string.Format("bIMSI_#{0}#", i);
                            //        ndic.dic.Add(field, str.bIMSI);

                            //        field = string.Format("bUeActionFlag_#{0}#", i);
                            //        ndic.dic.Add(field, str.bUeActionFlag);
                            //        i++;
                            //    }

                            //    gAppUpper.Body.n_dic.Add(ndic);
                            //}

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                         
                        }
                    case AppMsgType.app_set_redirection_request:
                        {
                            #region 获取信息

                            //   "parentFullPathName":"设备.深圳.福田.中心广场.西北监控",
                            //   "name":"电信FDD"
                            //   "category":"0"                       //0:white,1:black,2:other
                            //   "priority":"2"                       //2:2G,3:3G,4:4G,Others:noredirect
                            //   "GeranRedirect":"0"                  //0:disable;1:enable
                            //   "arfcn":"2G frequency"               //2G frequency
                            //   "UtranRedirect":"0"                  //0:disable;1:enable
                            //   "uarfcn":"3G frequency"              //3G frequency
                            //   "EutranRedirect":"0"                 //0:disable;1:enable
                            //   "earfcn":"4G frequency"              //4G frequency
                            //   "RejectMethod":"1"                   //1,2,0xFF,0x10-0xFE
                            //   "additionalFreq":"uarfcn1,uarfcn2"   //不超过7个freq，超过7个freq的默认丢弃

                            int rtv = -1;
                            strDevice devInfo = new strDevice();
                            string devFullPathName = "";

                            string parentFullPathName = "";
                            string name = "";
                            string category = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("category"))
                            {
                                category = gAppUpper.Body.dic["category"].ToString();
                            }

                            if (parentFullPathName == "" || name == "" || category == "")
                            {
                                string errInfo = get_debug_info() + string.Format("app_set_redirection_request,参数有误");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_redirection_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (category != "0" && category != "1" && category != "2")
                            {
                                string errInfo = get_debug_info() + string.Format("category,参数有误");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_redirection_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);

                            if (!gDicDevFullName.ContainsKey(devFullPathName))
                            {
                                string info = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", devFullPathName);

                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);

                                //返回出错处理    
                                gAppUpper.Body.type = AppMsgType.app_set_redirection_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", info);

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[devFullPathName];
                            }

                            gRedirectionInfo = new strRedirection();
                            gRedirectionInfo.category = category;

                            if (gAppUpper.Body.dic.ContainsKey("priority"))
                            {
                                if (string.IsNullOrEmpty(gAppUpper.Body.dic["priority"].ToString()))
                                {
                                    gRedirectionInfo.priority = "0";
                                }
                                else
                                {
                                    gRedirectionInfo.priority = gAppUpper.Body.dic["priority"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("GeranRedirect"))
                            {
                                gRedirectionInfo.GeranRedirect = gAppUpper.Body.dic["GeranRedirect"].ToString();

                                if (gRedirectionInfo.GeranRedirect != "0" && gRedirectionInfo.GeranRedirect != "1")
                                {
                                    string errInfo = get_debug_info() + string.Format("GeranRedirect,参数有误");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_redirection_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("arfcn"))
                            {
                                if (string.IsNullOrEmpty(gAppUpper.Body.dic["arfcn"].ToString()))
                                {
                                    gRedirectionInfo.arfcn = "0";
                                }
                                else
                                {
                                    gRedirectionInfo.arfcn = gAppUpper.Body.dic["arfcn"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("UtranRedirect"))
                            {
                                gRedirectionInfo.UtranRedirect = gAppUpper.Body.dic["UtranRedirect"].ToString();

                                if (gRedirectionInfo.UtranRedirect != "0" && gRedirectionInfo.UtranRedirect != "1")
                                {
                                    string errInfo = get_debug_info() + string.Format("UtranRedirect,参数有误");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_redirection_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("uarfcn"))
                            {                               
                                if (string.IsNullOrEmpty(gAppUpper.Body.dic["uarfcn"].ToString()))
                                {
                                    gRedirectionInfo.uarfcn = "0";
                                }
                                else
                                {
                                    gRedirectionInfo.uarfcn = gAppUpper.Body.dic["uarfcn"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("EutranRedirect"))
                            {
                                gRedirectionInfo.EutranRedirect = gAppUpper.Body.dic["EutranRedirect"].ToString();

                                if (gRedirectionInfo.EutranRedirect != "0" && gRedirectionInfo.EutranRedirect != "1")
                                {
                                    string errInfo = get_debug_info() + string.Format("EutranRedirect,参数有误");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_redirection_response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("earfcn"))
                            {                               
                                if (string.IsNullOrEmpty(gAppUpper.Body.dic["earfcn"].ToString()))
                                {
                                    gRedirectionInfo.earfcn = "0";
                                }
                                else
                                {
                                    gRedirectionInfo.earfcn = gAppUpper.Body.dic["earfcn"].ToString();
                                }
                            }

                            if (gAppUpper.Body.dic.ContainsKey("RejectMethod"))
                            {
                                gRedirectionInfo.RejectMethod = gAppUpper.Body.dic["RejectMethod"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("additionalFreq"))
                            {
                                if (string.IsNullOrEmpty(gAppUpper.Body.dic["additionalFreq"].ToString()))
                                {
                                    gRedirectionInfo.additionalFreq = "";
                                }
                                else
                                {
                                    gRedirectionInfo.additionalFreq = gAppUpper.Body.dic["additionalFreq"].ToString();
                                }                                
                            }

                            #endregion

                            #region 给AP下发命令

                            strDevice strDev = new strDevice();

                            //通过设备ID获取对应的记录（获取最新的上下线信息）
                            rtv = gDbHelperUpper.device_record_entity_get_by_devid(devInfo.id, ref strDev);
                            if (rtv == 0)
                            {
                                if (strDev.online == "0")
                                {
                                    string errInfo = get_debug_info() + "设备下线";
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_redirection_response, rtv, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }

                                gAppUpper.ApInfo.SN = strDev.sn;
                                gAppUpper.ApInfo.Fullname = devFullPathName;
                                gAppUpper.ApInfo.IP = strDev.ipAddr;
                                gAppUpper.ApInfo.Port = int.Parse(strDev.port);
                                gAppUpper.ApInfo.Type = strDev.innerType;

                                gAppUpper.Body.type = ApMsgType.set_redirection_req;
                                gAppUpper.MsgType = MsgType.CONFIG.ToString();

                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("category", gRedirectionInfo.category);
                                gAppUpper.Body.dic.Add("priority", gRedirectionInfo.priority);
                                gAppUpper.Body.dic.Add("GeranRedirect", gRedirectionInfo.GeranRedirect);
                                gAppUpper.Body.dic.Add("arfcn", gRedirectionInfo.arfcn);
                                gAppUpper.Body.dic.Add("UtranRedirect", gRedirectionInfo.UtranRedirect);
                                gAppUpper.Body.dic.Add("uarfcn", gRedirectionInfo.uarfcn);
                                gAppUpper.Body.dic.Add("EutranRedirect", gRedirectionInfo.EutranRedirect);
                                gAppUpper.Body.dic.Add("earfcn", gRedirectionInfo.earfcn);
                                gAppUpper.Body.dic.Add("RejectMethod", gRedirectionInfo.RejectMethod);
                                gAppUpper.Body.dic.Add("additionalFreq", gRedirectionInfo.additionalFreq);

                                //发送给ApController
                                Send_Msg_2_ApCtrl_Lower(gAppUpper);

                                #region 启动超时计时器 

                                gTimerSetRedirection = new TaskTimer();
                                gTimerSetRedirection.Interval = DataController.TimerTimeOutInterval * 1000;

                                gTimerSetRedirection.Id = 0;
                                gTimerSetRedirection.Name = string.Format("{0}:{1}:{2}", "gTimerSetRedirection", strDev.ipAddr, strDev.port);
                                gTimerSetRedirection.MsgType = AppMsgType.app_set_redirection_response;
                                gTimerSetRedirection.TimeOutFlag = false;
                                gTimerSetRedirection.Imms = gAppUpper;

                                gTimerSetRedirection.Elapsed += new System.Timers.ElapsedEventHandler(TimerFunc);
                                gTimerSetRedirection.Start();

                                // 临时测试
                                ////保存到库中
                                //if ((int)RC.EXIST == gDbHelperUpper.redirection_record_exist(int.Parse(gRedirectionInfo.category), devInfo.id))
                                //{
                                //    //记录存在，只是更新
                                //    gDbHelperUpper.redirection_record_update(int.Parse(gRedirectionInfo.category), devInfo.id, gRedirectionInfo);
                                //}
                                //else
                                //{
                                //    //记录不存在，先插入，再更新
                                //    gDbHelperUpper.redirection_record_insert(int.Parse(gRedirectionInfo.category), devInfo.id);
                                //    gDbHelperUpper.redirection_record_update(int.Parse(gRedirectionInfo.category), devInfo.id, gRedirectionInfo);
                                //}

                                #endregion

                                break;
                            }
                            else
                            {
                                string errInfo = get_debug_info() + gDbHelperUpper.get_rtv_str(rtv);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_redirection_response, rtv, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion
                        }
                    case AppMsgType.app_get_redirection_request:
                        {
                            #region 获取信息

                            //   "parentFullPathName":"设备.深圳.福田.中心广场.西北监控",
                            //   "name":"电信FDD"
                            //   "category":"0"     //0:white,1:black,2:other 
                            //                      //3:all,返回所有，2018-09-28

                            int rtv;
                            strDevice devInfo = new strDevice();
                            List<strRedirection> lstRd = new List<strRedirection>();

                            string parentFullPathName = "";
                            string name = "";
                            string devFullPathName = "";
                            string category = "";

                            if (gAppUpper.Body.dic.ContainsKey("parentFullPathName"))
                            {
                                parentFullPathName = gAppUpper.Body.dic["parentFullPathName"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (parentFullPathName == "" || name == "")
                            {
                                add_log_info(LogInfoType.EROR, "app_get_redirection_request,参数有误", "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, "app_get_redirection_request,参数有误", "Main", LogCategory.I);

                                //返回出错处理
                                gAppUpper.Body.type = AppMsgType.app_get_redirection_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + "app_get_redirection_request,参数有误.");

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (gAppUpper.Body.dic.ContainsKey("category"))
                            {
                                category = gAppUpper.Body.dic["category"].ToString();
                            }

                            if (category != "0" && 
                                category != "1" && 
                                category != "2" &&
                                category != "3")
                            {
                                string errInfo = get_debug_info() + string.Format("category,参数有误 = {0}",category);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_redirection_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            strDomian domian = new strDomian();
                            devFullPathName = string.Format("{0}.{1}", parentFullPathName, name);

                            if (!gDicDevFullName.ContainsKey(devFullPathName))
                            {
                                string info = string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", devFullPathName);

                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);

                                //返回出错处理    
                                gAppUpper.Body.type = AppMsgType.app_get_redirection_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", -1);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + info);

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[devFullPathName];
                                rtv = gDbHelperUpper.domain_record_get_by_nameFullPath(parentFullPathName, ref domian);
                                if ((int)RC.SUCCESS != rtv)
                                {
                                    string info = "domain_record_get_by_nameFullPath,出错" + gDbHelperUpper.get_rtv_str(rtv);

                                    add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);

                                    //返回出错处理    
                                    gAppUpper.Body.type = AppMsgType.app_get_redirection_response;
                                    gAppUpper.Body.dic = new Dictionary<string, object>();
                                    gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                    gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + info);

                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }

                            category = "3";
                            rtv = gDbHelperUpper.redirection_record_get_by_devid(int.Parse(category), devInfo.id, ref lstRd);
                            if ((int)RC.SUCCESS != rtv)
                            {
                                string info = "redirection_record_get_by_devid,出错" + gDbHelperUpper.get_rtv_str(rtv);

                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);

                                //返回出错处理    
                                gAppUpper.Body.type = AppMsgType.app_get_redirection_response;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ReturnCode", rtv);
                                gAppUpper.Body.dic.Add("ReturnStr", get_debug_info() + info);

                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }


                            gAppUpper.Body.type = AppMsgType.app_get_redirection_response;
                            gAppUpper.Body.dic = new Dictionary<string, object>();
                            gAppUpper.Body.dic.Add("ReturnCode", rtv);
                            gAppUpper.Body.dic.Add("ReturnStr", gDbHelperUpper.get_rtv_str(rtv));

                            gAppUpper.Body.dic.Add("domainId", domian.id.ToString());
                            gAppUpper.Body.dic.Add("domainParentId", domian.parentId.ToString());
                            gAppUpper.Body.dic.Add("parentFullPathName", parentFullPathName);
                            gAppUpper.Body.dic.Add("name", name);

                            //   "category":"0"                       //0:white,1:black,2:other  
                            //   "priority":"2"                       //2:2G,3:3G,4:4G,Others:noredirect
                            //   "GeranRedirect":"0"                  //0:disable;1:enable
                            //   "arfcn":"2G frequency"               //2G frequency
                            //   "UtranRedirect":"0"                  //0:disable;1:enable
                            //   "uarfcn":"3G frequency"              //3G frequency
                            //   "EutranRedirect":"0"                 //0:disable;1:enable
                            //   "earfcn":"4G frequency"              //4G frequency
                            //   "RejectMethod":"1"                   //1,2,0xFF,0x10-0xFE
                            //   "additionalFreq":"uarfcn1,uarfcn2"   //不超过7个freq，超过7个freq的默认丢弃

                            gAppUpper.Body.n_dic = new List<Name_DIC_Struct>();

                            foreach (strRedirection strRd in lstRd)
                            {
                                Name_DIC_Struct ndic = new Name_DIC_Struct();

                                ndic.name = strRd.category;
                                ndic.dic.Add("category", strRd.category);
                                ndic.dic.Add("priority", strRd.priority);
                                ndic.dic.Add("GeranRedirect", strRd.GeranRedirect);
                                ndic.dic.Add("arfcn", strRd.arfcn);
                                ndic.dic.Add("UtranRedirect", strRd.UtranRedirect);
                                ndic.dic.Add("uarfcn", strRd.uarfcn);
                                ndic.dic.Add("EutranRedirect", strRd.EutranRedirect);
                                ndic.dic.Add("earfcn", strRd.earfcn);
                                ndic.dic.Add("RejectMethod", strRd.RejectMethod);

                                if (!string.IsNullOrEmpty(strRd.additionalFreq))
                                {
                                    ndic.dic.Add("additionalFreq", strRd.additionalFreq);
                                }
                                else
                                {
                                    ndic.dic.Add("additionalFreq", "");
                                }

                                gAppUpper.Body.n_dic.Add(ndic);
                            }

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                         
                        }
                    case AppMsgType.set_whitelist_study_request:
                        {
                            #region 获取信息

                            //    "command": int              //0:停止 1:开机执行 2:立即执行
                            //    "txpower": float(-128:0)    //Relative to maximum output power
                            //    "duration":int              //白名单自学习时长,单位秒
                            //    "clearWhiteList": int       //清除手配白名单 0：否 1：是


                            string Fullname = "";
                            strDevice devInfo = new strDevice();

                            if (string.IsNullOrEmpty(gAppUpper.ApInfo.Fullname))
                            {
                                //返回出错处理
                                string errInfo = string.Format("{0}:Fullname is NULL.", AppMsgType.set_whitelist_study_request);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.set_whitelist_study_request, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                Fullname = gAppUpper.ApInfo.Fullname;
                            }

                            if (!gDicDevFullName.ContainsKey(Fullname))
                            {
                                string errInfo = get_debug_info() + string.Format("{0}:对应的设备ID在gDicDevFullName中找不到", Fullname);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.set_whitelist_study_request, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                devInfo = gDicDevFullName[Fullname];
                            }

                            if (gAppUpper.Body.dic.ContainsKey("command"))
                            {
                                devInfo.command = gAppUpper.Body.dic["command"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("txpower"))
                            {
                                devInfo.txpower = gAppUpper.Body.dic["txpower"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("duration"))
                            {
                                devInfo.duration = gAppUpper.Body.dic["duration"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("clearWhiteList"))
                            {
                                devInfo.clearWhiteList = gAppUpper.Body.dic["clearWhiteList"].ToString();
                            }

                            #endregion

                            #region 保存信息

                            //保存信息
                            gDicDevFullName[Fullname] = devInfo;

                            #endregion

                            #region 发给设备

                            //发给设备
                            Send_Msg_2_ApCtrl_Lower(gAppUpper);

                            break;

                            #endregion
                        }
                    case AppMsgType.app_get_ServerConfig_Request:
                        {                           
                            #region 返回消息
                           
                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_ServerConfig_Response, 0,"成功", true, null, null);

                            //    "ReturnCode": 0，                   //返回码：0,成功；其它值为失败
                            //    "ReturnStr": "成功"，                //失败原因值。ReturnCode不为0时有意义

                            //    "strDbIpAddr":"127.0.0.1",          //数据库IP地址    
                            //    "logOutputLevel": "1",              //DEBG = "0", INFO = "1",WARN = "2", EROR = "3"

                            //    "strFtpIpAddr":"127.0.0.1",         //FTP服务器IP地址
                            //    "strFtpUserId": "ftpuser",          //FTP用户名
                            //    "strFtpUserPsw":"ftpuser",          //FTP用户密码
                            //    "strFtpPort":"21",                  //FTP端口
                            //    "strFtpUpdateDir": "Update",        //FTP的更新路径

                            //    "strStartPortCDMA_ZYF": "14783",    //CDMA，ZYF的端口
                            //    "strStartPortGSM_ZYF": "14784",     //GSM，ZYF的端口
                            //    "strStartPortGSM_HJT": "14785",     //GSM，HJT的端口
                            //    "strStartPortLTE": "14786",         //LTE的端口
                            //    "strStartPortTDS": "14787",         //TDS的端口
                            //    "strStartPortWCDMA": "14788",       //WCDMA的端口
                            //    "strStartPortAppWindows": "14789",  //Windows APP的端口
                            //    "strStartPortAppLinux": "14790",    //Linux APP的端口
                            //    "strStartPortAppAndroid": "14791",  //Android APP的端口

                            //    "dataAlignMode": "1",               //数据对齐基准:"0"数据库为基准，"1"以Ap为基准
                            //    "logMaxSize": "10",                 //每个Log文件的大小，单位为MB

                            //    "apFtpUploadEnable": "1",           //AP直接上传FTP的开关
                            //    "apFtpUploadNameFormat": "%A_[%#I]_%04y_%02m_%02d_%02h_%02f_%02s.pns"                   //文件名格式定义
                            //    "apFtpUploadDataFormat": "%E,%S,%U,%04y-%02m-%02d %02h:%02f:%02s,%R,%.6J,%.6W,%O\r\n"   //数据格式定义
                            //    "imsiThresholdValue": "0.7"                                                             //IMSI的分析阈值

                            gAppUpper.Body.dic.Add("strDbIpAddr",DataController.StrDbIpAddr);
                            gAppUpper.Body.dic.Add("logOutputLevel", ((int)DataController.LogOutputLevel).ToString());

                            gAppUpper.Body.dic.Add("strFtpIpAddr", DataController.StrFtpIpAddr);
                            gAppUpper.Body.dic.Add("strFtpUserId", DataController.StrFtpUserId);
                            gAppUpper.Body.dic.Add("strFtpUserPsw", DataController.StrFtpUserPsw);
                            gAppUpper.Body.dic.Add("strFtpPort", DataController.StrFtpPort);                            
                            gAppUpper.Body.dic.Add("strFtpUpdateDir", DataController.StrFtpUpdateDir);

                            gAppUpper.Body.dic.Add("strStartPortCDMA_ZYF", DataController.StrStartPortCDMA_ZYF);
                            gAppUpper.Body.dic.Add("strStartPortGSM_ZYF", DataController.StrStartPortGSM_ZYF);
                            gAppUpper.Body.dic.Add("strStartPortGSM_HJT", DataController.StrStartPortGSM_HJT);
                            gAppUpper.Body.dic.Add("strStartPortLTE", DataController.StrStartPortLTE);
                            gAppUpper.Body.dic.Add("strStartPortTDS", DataController.StrStartPortTDS);
                            gAppUpper.Body.dic.Add("strStartPortWCDMA", DataController.StrStartPortWCDMA);
                            gAppUpper.Body.dic.Add("strStartPortAppWindows", DataController.StrStartPortAppWindows);
                            gAppUpper.Body.dic.Add("strStartPortAppLinux", DataController.StrStartPortAppLinux);
                            gAppUpper.Body.dic.Add("strStartPortAppAndroid", DataController.StrStartPortAppAndroid);

                            gAppUpper.Body.dic.Add("dataAlignMode", DataController.DataAlignMode.ToString());
                            gAppUpper.Body.dic.Add("logMaxSize", DataController.LogMaxSize.ToString());

                            // 2018-12-25
                            gAppUpper.Body.dic.Add("apFtpUploadEnable", DataController.ApFtpUploadEnable.ToString());
                            gAppUpper.Body.dic.Add("apFtpUploadNameFormat", DataController.ApFtpUploadNameFormat);
                            gAppUpper.Body.dic.Add("apFtpUploadDataFormat", DataController.ApFtpUploadDataFormat);

                            // 2018-12-26
                            gAppUpper.Body.dic.Add("imsiThresholdValue", DataController.ImsiThresholdValue);

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                         
                        }
                    case AppMsgType.app_set_ServerConfig_Request:
                        {
                            #region 获取并设置

                            int rebootFlag = 0;

                            //    "strDbIpAddr":"127.0.0.1",          //数据库IP地址    
                            //    "logOutputLevel": "1",              //DEBG = "0", INFO = "1",WARN = "2", EROR = "3"

                            //    "strFtpIpAddr":"127.0.0.1",         //FTP服务器IP地址
                            //    "strFtpUserId": "ftpuser",          //FTP用户名
                            //    "strFtpUserPsw":"ftpuser",          //FTP用户密码
                            //    "strFtpPort":"21",                  //FTP端口
                            //    "strFtpUpdateDir": "Update",        //FTP的更新路径

                            //    "strStartPortCDMA_ZYF": "14783",    //CDMA，ZYF的端口
                            //    "strStartPortGSM_ZYF": "14784",     //GSM，ZYF的端口
                            //    "strStartPortGSM_HJT": "14785",     //GSM，HJT的端口
                            //    "strStartPortLTE": "14786",         //LTE的端口
                            //    "strStartPortTDS": "14787",         //TDS的端口
                            //    "strStartPortWCDMA": "14788",       //WCDMA的端口
                            //    "strStartPortAppWindows": "14789",  //Windows APP的端口
                            //    "strStartPortAppLinux": "14790",    //Linux APP的端口
                            //    "strStartPortAppAndroid": "14791",  //Android APP的端口

                            //    "dataAlignMode": "1",               //数据对齐基准:"0"数据库为基准，"1"以Ap为基准
                            //    "logMaxSize": "10",                 //每个Log文件的大小，单位为MB    

                            //    "apFtpUploadEnable": "1",           //AP直接上传FTP的开关
                            //    "apFtpUploadNameFormat": "%A_[%#I]_%04y_%02m_%02d_%02h_%02f_%02s.pns"                   //文件名格式定义
                            //    "apFtpUploadDataFormat": "%E,%S,%U,%04y-%02m-%02d %02h:%02f:%02s,%R,%.6J,%.6W,%O\r\n"   //数据格式定义
                            //    "imsiThresholdValue": "0.7"                                                             //IMSI的分析阈值

                            string item = "";
                      
                            //(1)
                            if (gAppUpper.Body.dic.ContainsKey("strDbIpAddr"))
                            {
                                item = gAppUpper.Body.dic["strDbIpAddr"].ToString();

                                IPAddress ipAddress;
                                if (!IPAddress.TryParse(item, out ipAddress))
                                {
                                    string errInfo = string.Format("IP地址:{0}，非法.",item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrDbIpAddr != item)
                                    {
                                        DataController.SetConfigValue("strDbIpAddr", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(2)
                            if (gAppUpper.Body.dic.ContainsKey("logOutputLevel"))
                            {
                                item = gAppUpper.Body.dic["logOutputLevel"].ToString();
                          
                                if (item != "0" && item != "1" && item != "2" && item != "3")
                                {
                                    string errInfo = string.Format("logOutputLevel:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if ( ((int)DataController.LogOutputLevel).ToString() != item)
                                    {
                                        DataController.SetConfigValue("logOutputLevel", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //////////////////////////////////////

                            //(3)
                            if (gAppUpper.Body.dic.ContainsKey("strFtpIpAddr"))
                            {
                                item = gAppUpper.Body.dic["strFtpIpAddr"].ToString();

                                IPAddress ipAddress;
                                if (!IPAddress.TryParse(item, out ipAddress))
                                {
                                    string errInfo = string.Format("IP地址:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrFtpIpAddr != item)
                                    {
                                        DataController.SetConfigValue("strFtpIpAddr", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(4)
                            if (gAppUpper.Body.dic.ContainsKey("strFtpUserId"))
                            {
                                item = gAppUpper.Body.dic["strFtpUserId"].ToString();

                                if (item.Length > 32)
                                {
                                    string errInfo = string.Format("strFtpUserId:{0}，长度非法.", item.Length);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrFtpUserId != item)
                                    {
                                        DataController.SetConfigValue("strFtpUserId", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(5)
                            if (gAppUpper.Body.dic.ContainsKey("strFtpUserPsw"))
                            {
                                item = gAppUpper.Body.dic["strFtpUserPsw"].ToString();

                                if (item.Length > 32)
                                {
                                    string errInfo = string.Format("strFtpUserPsw:{0}，长度非法.", item.Length);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {                                    
                                    if (DataController.StrFtpUserPsw != item)
                                    {
                                        DataController.SetConfigValue("strFtpUserPsw", Common.Common.Encode(item));
                                        rebootFlag++;
                                    }
                                }
                            }


                            //(6)
                            if (gAppUpper.Body.dic.ContainsKey("strFtpPort"))
                            {
                                item = gAppUpper.Body.dic["strFtpPort"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item,out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrFtpPort != item)
                                    {
                                        DataController.SetConfigValue("strFtpPort", item);
                                        rebootFlag++;
                                    }
                                }
                            }


                            //(7)
                            if (gAppUpper.Body.dic.ContainsKey("strFtpUpdateDir"))
                            {
                                item = gAppUpper.Body.dic["strFtpUpdateDir"].ToString();

                                if (item.Length > 32)
                                {
                                    string errInfo = string.Format("strFtpUpdateDir:{0}，长度非法.", item.Length);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrFtpUpdateDir != item)
                                    {
                                        DataController.SetConfigValue("strFtpUpdateDir", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            ////////////////////////////////

                            //(8)
                            if (gAppUpper.Body.dic.ContainsKey("strStartPortCDMA_ZYF"))
                            {
                                item = gAppUpper.Body.dic["strStartPortCDMA_ZYF"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrStartPortCDMA_ZYF != item)
                                    {
                                        DataController.SetConfigValue("strStartPortCDMA_ZYF", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(9)
                            if (gAppUpper.Body.dic.ContainsKey("strStartPortGSM_ZYF"))
                            {
                                item = gAppUpper.Body.dic["strStartPortGSM_ZYF"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrStartPortGSM_ZYF != item)
                                    {
                                        DataController.SetConfigValue("strStartPortGSM_ZYF", item);
                                        rebootFlag++;
                                    }
                                }
                            }


                            //(10)
                            if (gAppUpper.Body.dic.ContainsKey("strStartPortGSM_HJT"))
                            {
                                item = gAppUpper.Body.dic["strStartPortGSM_HJT"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrStartPortGSM_HJT != item)
                                    {
                                        DataController.SetConfigValue("strStartPortGSM_HJT", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(11)
                            if (gAppUpper.Body.dic.ContainsKey("strStartPortLTE"))
                            {
                                item = gAppUpper.Body.dic["strStartPortLTE"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrStartPortLTE != item)
                                    {
                                        DataController.SetConfigValue("strStartPortLTE", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(12)
                            if (gAppUpper.Body.dic.ContainsKey("strStartPortTDS"))
                            {
                                item = gAppUpper.Body.dic["strStartPortTDS"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrStartPortTDS != item)
                                    {
                                        DataController.SetConfigValue("strStartPortTDS", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(13)
                            if (gAppUpper.Body.dic.ContainsKey("strStartPortWCDMA"))
                            {
                                item = gAppUpper.Body.dic["strStartPortWCDMA"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrStartPortWCDMA != item)
                                    {
                                        DataController.SetConfigValue("strStartPortWCDMA", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(14)
                            if (gAppUpper.Body.dic.ContainsKey("strStartPortAppWindows"))
                            {
                                item = gAppUpper.Body.dic["strStartPortAppWindows"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrStartPortAppWindows != item)
                                    {
                                        DataController.SetConfigValue("strStartPortAppWindows", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(15)
                            if (gAppUpper.Body.dic.ContainsKey("strStartPortAppLinux"))
                            {
                                item = gAppUpper.Body.dic["strStartPortAppLinux"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrStartPortAppLinux != item)
                                    {
                                        DataController.SetConfigValue("strStartPortAppLinux", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(16)
                            if (gAppUpper.Body.dic.ContainsKey("strStartPortAppAndroid"))
                            {
                                item = gAppUpper.Body.dic["strStartPortAppAndroid"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("端口:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.StrStartPortAppAndroid != item)
                                    {
                                        DataController.SetConfigValue("strStartPortAppAndroid", item);
                                        rebootFlag++;
                                    }
                                }
                            }


                            //////////////////////////////////////////////////


                            //(17)
                            if (gAppUpper.Body.dic.ContainsKey("dataAlignMode"))
                            {
                                item = gAppUpper.Body.dic["dataAlignMode"].ToString();

                                if (item != "0" && item != "1" )
                                {
                                    string errInfo = string.Format("logOutputLevel:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.DataAlignMode.ToString() != item)
                                    {
                                        DataController.SetConfigValue("dataAlignMode", item);
                                        rebootFlag++;
                                    }
                                }
                            }


                            //(18)
                            if (gAppUpper.Body.dic.ContainsKey("logMaxSize"))
                            {
                                item = gAppUpper.Body.dic["logMaxSize"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("大小:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.LogMaxSize.ToString() != item)
                                    {
                                        DataController.SetConfigValue("logMaxSize", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //////////////////////////////////////////////

                            //    "apFtpUploadEnable": "1",                                                               //AP直接上传FTP的开关
                            //    "apFtpUploadNameFormat": "%A_[%#I]_%04y_%02m_%02d_%02h_%02f_%02s.pns"                   //文件名格式定义
                            //    "apFtpUploadDataFormat": "%E,%S,%U,%04y-%02m-%02d %02h:%02f:%02s,%R,%.6J,%.6W,%O\r\n"   //数据格式定义

                            //(19)
                            if (gAppUpper.Body.dic.ContainsKey("apFtpUploadEnable"))
                            {
                                item = gAppUpper.Body.dic["apFtpUploadEnable"].ToString();

                                UInt16 tmp;
                                if (!UInt16.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("大小:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.ApFtpUploadEnable.ToString() != item)
                                    {
                                        DataController.SetConfigValue("apFtpUploadEnable", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(20)
                            if (gAppUpper.Body.dic.ContainsKey("apFtpUploadNameFormat"))
                            {
                                item = gAppUpper.Body.dic["apFtpUploadNameFormat"].ToString();

                                if(!item.Contains("%A")  || !item.Contains("_"))                         
                                {
                                    string errInfo = string.Format("item:{0}，不包含%A或_,非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.ApFtpUploadNameFormat.ToString() != item)
                                    {
                                        DataController.SetConfigValue("apFtpUploadNameFormat", item);
                                        rebootFlag++;
                                    }
                                }
                            }


                            //(21)
                            if (gAppUpper.Body.dic.ContainsKey("apFtpUploadDataFormat"))
                            {
                                item = gAppUpper.Body.dic["apFtpUploadDataFormat"].ToString();

                                if (!item.Contains("%U") || !item.Contains("%S") || !item.Contains(","))
                                {
                                    string errInfo = string.Format("item:{0}，不包含%U,%S或者,非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.ApFtpUploadDataFormat.ToString() != item)
                                    {
                                        DataController.SetConfigValue("apFtpUploadDataFormat", item);
                                        rebootFlag++;
                                    }
                                }
                            }

                            //(22)
                            if (gAppUpper.Body.dic.ContainsKey("imsiThresholdValue"))
                            {
                                item = gAppUpper.Body.dic["imsiThresholdValue"].ToString();

                                double tmp;
                                if (!Double.TryParse(item, out tmp))
                                {
                                    string errInfo = string.Format("大小:{0}，非法.", item);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    if (DataController.ApFtpUploadDataFormat.ToString() != item)
                                    {
                                        DataController.SetConfigValue("imsiThresholdValue", item);
                                        rebootFlag++;
                                    }
                                }
                            }                            

                            #endregion

                            #region 返回消息

                            string info = "";
                            info += string.Format("\r\n成功设置了{0}个参数", rebootFlag);

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_ServerConfig_Response, 0, info, true, null, null);
                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            gAppUpper.Body.dic.Add("UpdateCnt", rebootFlag.ToString());
                            

                            Thread.Sleep(888);

                            if (rebootFlag >= 1)
                            {
                                info = "";
                                info += string.Format("\r\n成功设置了{0}个参数", rebootFlag);
                                info += string.Format("\r\n现在自己关闭Server，然后由Monitor重新启动...");

                                SaveLog(info);

                                RebootByAuto = 1;
                                this.Close();
                            }

                            break;

                            #endregion
                        }
                    case AppMsgType.app_get_BIE_ExportConfig_Request:
                        {
                            #region 获取信息                  

                            //                         
                            //
                            // "fileName":"abc.csv"
                            //                                                 

                            string fileName = "";
                            string errInfo = "";

                            if (gAppUpper.Body.dic.ContainsKey("fileName"))
                            {
                                fileName = gAppUpper.Body.dic["fileName"].ToString();

                                if (false == IsValidFileName(fileName))
                                {
                                    errInfo = get_debug_info() + string.Format("{0}:", "文件名非法.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_BIE_ExportConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    string extension = System.IO.Path.GetExtension(fileName);
                                    if (extension != ".txt")
                                    {
                                        errInfo = get_debug_info() + string.Format("{0}:{1}:", "后缀名非法.", extension);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_BIE_ExportConfig_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                errInfo = get_debug_info() + string.Format("{0}:", "没包含字段fileName");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_BIE_ExportConfig_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息
                        
                            string JsonText = "";
                            strBatchImportExport bie = new strBatchImportExport();

                            Stopwatch sw = new Stopwatch();
                            sw.Start();                                                
                            int rtv = BIE_read_from_DB(ref bie, ref errInfo, ref JsonText);
                            sw.Stop();
                            TimeSpan ts2 = sw.Elapsed;

                            if (rtv != 0)
                            {
                                errInfo += string.Format("\r\n{0}:", "BIE_read_from_DB函数出错");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_BIE_ExportConfig_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            byte[] outData = null;
                            outData = System.Text.Encoding.Default.GetBytes(JsonText);
                            try
                            {
                                rtv = gFtpHelperFile.Put(fileName, outData);
                                if (rtv == -1)
                                {
                                    errInfo = get_debug_info() + string.Format("上传文件失败.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_BIE_ExportConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }
                            catch (Exception ee)
                            {
                                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);

                                errInfo = ee.Message + ee.StackTrace;
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_BIE_ExportConfig_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_BIE_ExportConfig_Response, 0, "成功", true, null, null);                                               
                            gAppUpper.Body.dic.Add("ftpUsrName", DataController.StrFtpUserId);
                            gAppUpper.Body.dic.Add("ftpPwd", DataController.StrFtpUserPsw);
                            gAppUpper.Body.dic.Add("ftpRootDir", DataController.StrFtpUpdateDir);
                            gAppUpper.Body.dic.Add("ftpServerIp", DataController.StrFtpIpAddr);
                            gAppUpper.Body.dic.Add("ftpPort", DataController.StrFtpPort);
                            gAppUpper.Body.dic.Add("fileName", fileName);
                            gAppUpper.Body.dic.Add("ElapsedTime", ts2.TotalSeconds.ToString()+ "秒");

                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion                                     
                        }
                    case AppMsgType.app_set_BIE_ImportConfig_Request:
                        {
                            #region 获取信息                  

                            //                         
                            //
                            // "fileName":"abc.txt"
                            //                                                 

                            int rtv = -1;
                            string fileName = "";
                            string errInfo = "";

                            if (gAppUpper.Body.dic.ContainsKey("fileName"))
                            {
                                fileName = gAppUpper.Body.dic["fileName"].ToString();
                                if (false == IsValidFileName(fileName))
                                {
                                    errInfo = get_debug_info() + string.Format("{0}:", "文件名非法.");
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_BIE_ImportConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                                else
                                {
                                    string extension = System.IO.Path.GetExtension(fileName);
                                    if (extension != ".txt")
                                    {
                                        errInfo = get_debug_info() + string.Format("{0}:{1}:", "后缀名非法.", extension);
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_BIE_ImportConfig_Response, -1, errInfo, true, null, null);
                                        Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                errInfo = get_debug_info() + string.Format("{0}:", "没包含字段fileName");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_BIE_ImportConfig_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            #endregion

                            #region 返回消息

                            string tmp = string.Format("{0}\\tmp", Application.StartupPath);

                            //从FTP服务器上下载文件
                            rtv = gFtpHelperFile.Get(fileName, tmp, fileName);
                            if (rtv != 0)
                            {
                                errInfo = string.Format("从FTP服务器下载文件:{0}失败.", fileName);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_BIE_ImportConfig_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                            else
                            {
                                fileName = string.Format("{0}\\{1}", tmp, fileName);
                                errInfo = string.Format("从FTP服务器下载批量导入文件:{0}成功.", fileName);
                                add_log_info(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.INFO, errInfo, "Main", LogCategory.I);
                            }

                            errInfo = string.Format("\r\n开始将批量导入文件写入数据库，写之前会清空数据库中相关的表.\r\n");
                            add_log_info(LogInfoType.WARN, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.WARN, errInfo, "Main", LogCategory.I);

                            TimeSpan ts2;

                            try
                            {
                                string JsonText = System.IO.File.ReadAllText(fileName, Encoding.Default);
                                strBatchImportExport bie = JsonConvert.DeserializeObject<strBatchImportExport>(JsonText);

                                Stopwatch sw = new Stopwatch();
                                sw.Start();
                                rtv = BIE_write_2_DB(bie, ref errInfo);
                                sw.Stop();
                                ts2 = sw.Elapsed;

                                if (rtv != 0)
                                {
                                    errInfo = string.Format("BIE_write_2_DB失败,{0}.", errInfo);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_BIE_ImportConfig_Response, -1, errInfo, true, null, null);
                                    Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                    break;
                                }
                            }
                            catch (Exception ee)
                            {
                                errInfo = string.Format("BIE_write_2_DB失败,{0}.", ee.Message + ee.StackTrace);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_BIE_ImportConfig_Response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }
                      
                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_BIE_ImportConfig_Response, 0, "成功", true, null, null);
                            gAppUpper.Body.dic.Add("ElapsedTime", ts2.TotalSeconds.ToString() + "秒");
                            Send_Msg_2_AppCtrl_Upper(gAppUpper);

                            //#region 重新获取gDicDevFullName

                            //if (rtv == 0)
                            //{
                            //    if (0 == gDbHelperUpper.domain_dictionary_info_join_get(ref gDicDevFullName, ref gDicDevId_Station_DevName))
                            //    {
                            //        add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);
                            //        Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);

                            //        print_dic_dev_fullname_info("app_del_device_request", gDicDevFullName);
                            //    }
                            //    else
                            //    {
                            //        add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                            //        Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                            //    }
                            //}

                            //#endregion

                            //#region 重新获取gDicDevId_Imsi_Des

                            //// 2018-11-20
                            //if (rtv == 0)
                            //{
                            //    if (0 == gDbHelperUpper.domain_dictionary_info_join_imsi_des_get(ref gDicDevId_Imsi_Des))
                            //    {
                            //        add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                            //        Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                            //    }
                            //    else
                            //    {
                            //        add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                            //        Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                            //    }
                            //}

                            //#endregion

                            Thread.Sleep(888);
                  
                            string info = "";
                            info += string.Format("\r\n成功进行了批量数据的导入.");
                            info += string.Format("\r\n现在自己关闭Server，然后由Monitor重新启动...");

                            SaveLog(info);
                            RebootByAuto = 1;
                            this.Close();                           

                            break;

                            #endregion                                     
                        }
                    case AppMsgType.app_get_station_location_request:
                        {
                            #region 获取信息

                            string name = "";
                            string parentNameFullPath = "";
                            string nameFullPath = "";
                            strDomian str = new strDomian();
                            string errInfo = "";

                            //    "name":"南山",
                            //    "parentNameFullPath":"设备.深圳",

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("parentNameFullPath"))
                            {
                                parentNameFullPath = gAppUpper.Body.dic["parentNameFullPath"].ToString();
                            }                            

                            if (name == "" || parentNameFullPath == "")
                            {
                                errInfo = get_debug_info() + string.Format(":{0}", "app_get_station_location_request,参数有误.");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_station_location_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);                               
                                break;
                            }                            
                          
                            #endregion

                            #region 返回消息

                            nameFullPath = string.Format("{0}.{1}", parentNameFullPath, name);

                            int rtv = gDbHelperUpper.domain_record_is_station(nameFullPath);
                            //int rtv = gDbHelperSts.domain_record_is_station(nameFullPath);

                            if ((int)RC.IS_STATION != rtv)
                            {
                                errInfo = string.Format("domain_record_is_station出错:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_station_location_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;                               
                            }

                            //rtv = gDbHelperSts.domain_record_get_by_nameFullPath(nameFullPath, ref str);
                            rtv = gDbHelperUpper.domain_record_get_by_nameFullPath(nameFullPath, ref str);

                            if ((int)RC.SUCCESS != rtv)
                            {
                                errInfo = string.Format("domain_record_get_by_nameFullPath出错:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_station_location_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_get_station_location_response,0, "成功", true, null, null);
                            gAppUpper.Body.dic.Add("name", name);
                            gAppUpper.Body.dic.Add("parentNameFullPath", parentNameFullPath);
                            gAppUpper.Body.dic.Add("longitude", str.longitude);
                            gAppUpper.Body.dic.Add("latitude", str.latitude);
                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion
                        }
                    case AppMsgType.app_set_station_location_request:
                        {
                            #region 获取信息

                            string name = "";
                            string parentNameFullPath = "";
                            string nameFullPath = "";
                            string longitude = "";
                            string latitude = "";

                            strDomian str = new strDomian();
                            string errInfo = "";

                            //    "name":"南山",
                            //    "parentNameFullPath":"设备.深圳",
                            //    "longitude":"114.06667",
                            //    "latitude":"22.61667",

                            if (gAppUpper.Body.dic.ContainsKey("name"))
                            {
                                name = gAppUpper.Body.dic["name"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("parentNameFullPath"))
                            {
                                parentNameFullPath = gAppUpper.Body.dic["parentNameFullPath"].ToString();
                            }

                            if (name == "" || parentNameFullPath == "")
                            {
                                errInfo = get_debug_info() + string.Format(":{0}", "app_get_station_location_request,参数有误.");
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_station_location_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            if (gAppUpper.Body.dic.ContainsKey("longitude"))
                            {
                                longitude = gAppUpper.Body.dic["longitude"].ToString();
                            }

                            if (gAppUpper.Body.dic.ContainsKey("latitude"))
                            {
                                latitude = gAppUpper.Body.dic["latitude"].ToString();
                            }

                            str.longitude = longitude;
                            str.latitude = latitude;

                            #endregion

                            #region 返回消息

                            nameFullPath = string.Format("{0}.{1}", parentNameFullPath, name);

                            int rtv = gDbHelperUpper.domain_record_is_station(nameFullPath);
                            //int rtv = gDbHelperSts.domain_record_is_station(nameFullPath);

                            if ((int)RC.IS_STATION != rtv)
                            {
                                errInfo = string.Format("domain_record_is_station出错:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_station_location_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }


                            //rtv = gDbHelperSts.domain_record_update_longitude_latitude(nameFullPath, str);
                            rtv = gDbHelperUpper.domain_record_update_longitude_latitude(nameFullPath, str);
                            
                            if ((int)RC.SUCCESS != rtv)
                            {
                                errInfo = string.Format("domain_record_update_longitude_latitude出错:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_station_location_response, -1, errInfo, true, null, null);
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            Fill_IMMS_Info(ref gAppUpper, AppMsgType.app_set_station_location_response, 0, "成功", true, null, null);
                            gAppUpper.Body.dic.Add("name", name);
                            gAppUpper.Body.dic.Add("parentNameFullPath", parentNameFullPath);
                            Send_Msg_2_AppCtrl_Upper(gAppUpper);
                            break;

                            #endregion
                        }
                    case AppMsgType.app_get_statistics_request:
                        {
                            #region 统计处理

                            //statistics_record_process_delegate_fun(gAppUpper);
                            ThreadPool.QueueUserWorkItem(new WaitCallback(statistics_record_process_delegate_fun), gAppUpper);

                            break;

                            #endregion
                        }
                    case AppMsgType.app_get_imsi_path_request:
                        {
                            #region 轨迹处理

                            //path_record_process_delegate_fun(gAppUpper);
                            ThreadPool.QueueUserWorkItem(new WaitCallback(path_record_process_delegate_fun), gAppUpper);

                            break;

                            #endregion
                        }
                    case AppMsgType.app_get_resident_imsi_list_request:
                        {
                            #region 常驻人口处理

                            //resident_record_process_delegate_fun(gAppUpper);
                            ThreadPool.QueueUserWorkItem(new WaitCallback(resident_record_process_delegate_fun), gAppUpper);

                            break;

                            #endregion
                        }
                    case AppMsgType.app_get_collision_imsi_list_request:
                        {
                            #region 碰撞处理

                            //collision_record_process_delegate_fun(gAppUpper);
                            ThreadPool.QueueUserWorkItem(new WaitCallback(collision_record_process_delegate_fun), gAppUpper);

                            break;

                            #endregion
                        }
                    case AppMsgType.app_get_accompany_request:
                        {
                            #region 碰撞处理

                            //accompany_record_process_delegate_fun(gAppUpper);
                            ThreadPool.QueueUserWorkItem(new WaitCallback(accompany_record_process_delegate_fun), gAppUpper);

                            break;

                            #endregion
                        }                        
                    default:
                        {
                            #region 出错和透传处理

                            string info = "";
                            if (string.IsNullOrEmpty(gAppUpper.ApInfo.Fullname) &&
                                (string.IsNullOrEmpty(gAppUpper.ApInfo.IP) || gAppUpper.ApInfo.Port == 0))
                            {
                                info = string.Format("{0}->{1}", gAppUpper.Body.type, "消息中ApInfo信息错误，FullName和Ip都为空！");
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.S);
                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.S);

                                //返回出错处理    
                                gAppUpper.Body.type = AppMsgType.general_error_result;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ErrStr", info);
                                gAppUpper.Body.dic.Add("RecvType", gAppUpper.Body.type);

                                //发给界面
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            ApInnerType apInnerType;
                            if (!Enum.TryParse(gAppUpper.ApInfo.Type, true, out apInnerType))
                            {
                                info = string.Format("{0}->{1}", gAppUpper.ApInfo.Type, "消息中ApInfo信息错误，Type非法！");
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.S);
                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.S);

                                //返回出错处理    
                                gAppUpper.Body.type = AppMsgType.general_error_result;
                                gAppUpper.Body.dic = new Dictionary<string, object>();
                                gAppUpper.Body.dic.Add("ErrStr", info);
                                gAppUpper.Body.dic.Add("RecvType", gAppUpper.Body.type);

                                //发给界面
                                Send_Msg_2_AppCtrl_Upper(gAppUpper);
                                break;
                            }

                            info = string.Format("透传给ApCtrlLower的消息:{0}", gAppUpper.Body.type);
                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.S);
                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.S);

                            //发给设备
                            Send_Msg_2_ApCtrl_Lower(gAppUpper);

                            rv = -1;
                            break;

                            #endregion
                        }
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return rv;
        }

        #endregion

        #region 处理DbHelper的线程

        private int get_level_list(ref List<int> list, int level)
        {
            if (level <= 0)
            {
                return -1;
            }

            list = new List<int>();

            for (int i = 1; i <= level; i++)
            {
                list.Add(i * 50);
            }

            return 0;
        }

        private int get_level_list_value(List<int> list, int count)
        {
            if (count <= 0)
            {
                return 50;
            }

            if (list == null || list.Count == 0)
            {
                return 50;
            }           

            for (int i = (list.Count-1);i>=0 ; i--)
            {
                if (count >= list[i])
                {
                    return list[i];
                }
            }

            return list[0];
        }

        private int db_batch_process_delegate_fun(List<strCapture> listSC)
        {
            if(gDbHelperImsi.MyDbConnFlag == false)
            {
                Logger.Trace(LogInfoType.EROR, "尚未连接到数据库!", "Main", LogCategory.I);
                return -1;
            }

            if (listSC == null || listSC.Count == 0)
            {
                Logger.Trace(LogInfoType.INFO,"DB listSC is empty.", "Main", LogCategory.I);
                return -1;
            }

            Stopwatch sw = new Stopwatch();
            sw.Start();

            try
            {
                int rv = gDbHelperImsi.capture_record_insert_batch(listSC);
                if (rv == 0)
                {
                    saveImsiToDbCount += listSC.Count;
                }
            }
            catch (Exception e)
            {
                Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
            }

            sw.Stop();
            TimeSpan ts2 = sw.Elapsed;

            //string ss = "";
            //for (int i = 0; i < listSC.Count; i++)
            //{
            //    ss += listSC[i].time + " ";
            //}

            //Logger.Trace(LogInfoType.EROR, ss + " DB批量插入：" + listSC.Count.ToString() + "  ms:" + ts2.TotalMilliseconds.ToString());

            Logger.Trace(LogInfoType.INFO, " DB批量插入：" + listSC.Count.ToString() + "  ms:" + ts2.TotalMilliseconds.ToString() + " tolCnt:" + saveImsiToDbCount.ToString(), "Main", LogCategory.I);
            sw = null;

            return 0;
        }
       
        private void re_connection_db(ref DbHelper helper,string name,ref int reConnCnt)
        {
            try
            {                
                if (helper.Conn_Is_Closed_Or_Abnormal())
                {
                    string info = string.Format("{0}:ConnectionState is NO.",name);
                    add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);

                    helper.MyDbConnFlag = false;
                    helper = new DbHelper(DataController.StrDbIpAddr,
                                             DataController.StrDbName,
                                             DataController.StrDbUserId,
                                             DataController.StrDbUserPsw,
                                             DataController.StrDbPort);

                    reConnCnt++;
                    string tmp = string.Format("{0},{1},{2},{3},{4},cnt = {5}", 
                                              DataController.StrDbIpAddr,
                                              DataController.StrDbName,
                                              DataController.StrDbUserId,
                                              DataController.StrDbUserPsw,
                                              DataController.StrDbPort,
                                              reConnCnt);


                    if (helper.MyDbConnFlag == true)
                    {
                        info = string.Format("{0}:重连数据库:【{1}->连接数据库OK！】", name, tmp);
                        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                    }
                    else
                    {
                        info = string.Format("{0}:重连数据库:【{1}->连接数据库FAILED！】", name, tmp);
                        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);                                    
                    }
                }
                else
                {
                    string info = string.Format("{0}:ConnectionState is OK.", name);
                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                }
            }
            catch (Exception ee)
            {
                string info = string.Format("{0}:re_connection_db : {1}",name, ee.Message + ee.StackTrace);
                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
            }
        }

        /// <summary>
        /// 用于处理DbHelper的线程
        /// </summary>
        /// <param name="obj"></param>
        private void thread_for_db_helper(object obj)
        {
            #region 初始化各个数据库的连接通道

            int DbMaxIdleSeconds = 60;
            int DbBatchUpdateRecordsLevel = 6;
            int DbBatchUpdateRecords = -1;
            List<int> DbBatchUpdateRecordsLevelList = new List<int>();

            #region (1) gDbHelperLower

            string tmp = string.Format("{0},{1},{2},{3},{4}", DataController.StrDbIpAddr,
                                      DataController.StrDbName,
                                      DataController.StrDbUserId,
                                      DataController.StrDbUserPsw,
                                      DataController.StrDbPort);

            gDbHelperLower = new DbHelper(DataController.StrDbIpAddr,
                                     DataController.StrDbName,
                                     DataController.StrDbUserId,
                                     DataController.StrDbUserPsw,
                                     DataController.StrDbPort);

            if (gDbHelperLower.MyDbConnFlag == true)
            {
                add_log_info(LogInfoType.INFO, "【" + tmp + " -> gDbHelperLower连接数据库OK！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "【" + tmp + " -> gDbHelperLower连接数据库OK！】", "Main", LogCategory.I);


                //将所有设备设置为下线           
                if (0 == gDbHelperLower.device_record_clear_online())
                {
                    add_log_info(LogInfoType.INFO, "device_record_clear_online -> OK！", "Main", LogCategory.I);
                }
                else
                {
                    add_log_info(LogInfoType.INFO, "device_record_clear_online -> FAILED！", "Main", LogCategory.I);
                }

                //在设备(未指派)表中清空所有的记录               
                if (0 == gDbHelperLower.device_unknown_record_clear())
                {
                    add_log_info(LogInfoType.INFO, "device_unknown_record_clear -> OK！", "Main", LogCategory.I);
                }
                else
                {
                    add_log_info(LogInfoType.INFO, "device_unknown_record_clear -> FAILED！", "Main", LogCategory.I);
                }

                #region 获取参数到内存中

                Stopwatch sw = new Stopwatch();
                sw.Start();

                //用于快速通过设备的全名早点设备对应的ID
                if (0 == gDbHelperLower.domain_dictionary_info_join_get(ref gDicDevFullName, ref gDicDevId_Station_DevName))
                {
                    add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取OK！", "Main", LogCategory.I);

                    print_dic_dev_fullname_info("启动时初始化",gDicDevFullName);
                }
                else
                {
                    add_log_info(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, "gDicDevFullName -> 获取FAILED！", "Main", LogCategory.I);
                }


                if (0 == gDbHelperLower.domain_dictionary_info_join_imsi_des_get(ref gDicDevId_Imsi_Des))
                {
                    add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                }
                else
                {
                    add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                }           

                sw.Stop();
                TimeSpan ts2 = sw.Elapsed;

                #endregion

                string info = string.Format("获取参数到内存中，总共花费:{0}ms", Math.Ceiling(ts2.TotalMilliseconds));
                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);               
            }
            else
            {
                add_log_info(LogInfoType.EROR, "【" + tmp + " -> gDbHelperLower连接数据库FAILED！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "【" + tmp + " -> gDbHelperLower连接数据库FAILED！】", "Main", LogCategory.I);

                //MessageBox.Show("数据库连接失败，请确认配置信息!", "出错", MessageBoxButtons.OK, MessageBoxIcon.Error);

                MessageBox.Show("【" + tmp + " -> gDbHelperLower连接数据库FAILED！】", "出错", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                Process.GetCurrentProcess().Kill();
            }

            #endregion

            #region (2) gDbHelperUpper         

            gDbHelperUpper = new DbHelper(DataController.StrDbIpAddr,
                                     DataController.StrDbName,
                                     DataController.StrDbUserId,
                                     DataController.StrDbUserPsw,
                                     DataController.StrDbPort);

            if (gDbHelperUpper.MyDbConnFlag == true)
            {
                add_log_info(LogInfoType.INFO, "【" + tmp + " -> gDbHelperUpper连接数据库OK！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "【" + tmp + " -> gDbHelperUpper连接数据库OK！】", "Main", LogCategory.I);                                                   
            }
            else
            {
                add_log_info(LogInfoType.EROR, "【" + tmp + " -> gDbHelperUpper连接数据库FAILED！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "【" + tmp + " -> gDbHelperUpper连接数据库FAILED！】", "Main", LogCategory.I);
               
                MessageBox.Show("【" + tmp + " -> gDbHelperUpper连接数据库FAILED！】", "出错", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                Process.GetCurrentProcess().Kill();
            }

            #endregion

            #region (3) gDbHelperImsi         

            gDbHelperImsi = new DbHelper(DataController.StrDbIpAddr,
                                     DataController.StrDbName,
                                     DataController.StrDbUserId,
                                     DataController.StrDbUserPsw,
                                     DataController.StrDbPort);

            if (gDbHelperImsi.MyDbConnFlag == true)
            {
                add_log_info(LogInfoType.INFO, "【" + tmp + " -> gDbHelperImsi连接数据库OK！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "【" + tmp + " -> gDbHelperImsi连接数据库OK！】", "Main", LogCategory.I);
            }
            else
            {
                add_log_info(LogInfoType.EROR, "【" + tmp + " -> gDbHelperImsi连接数据库FAILED！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "【" + tmp + " -> gDbHelperImsi连接数据库FAILED！】", "Main", LogCategory.I);

                MessageBox.Show("【" + tmp + " -> gDbHelperImsi连接数据库FAILED！】", "出错", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                Process.GetCurrentProcess().Kill();
            }

            #endregion

            #region (4) gDbHelperRadio       

            gDbHelperRadio = new DbHelper(DataController.StrDbIpAddr,
                                     DataController.StrDbName,
                                     DataController.StrDbUserId,
                                     DataController.StrDbUserPsw,
                                     DataController.StrDbPort);

            if (gDbHelperRadio.MyDbConnFlag == true)
            {
                add_log_info(LogInfoType.INFO, "【" + tmp + " -> gDbHelperRadio连接数据库OK！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "【" + tmp + " -> gDbHelperRadio连接数据库OK！】", "Main", LogCategory.I);
            }
            else
            {
                add_log_info(LogInfoType.EROR, "【" + tmp + " -> gDbHelperRadio连接数据库FAILED！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "【" + tmp + " -> gDbHelperRadio连接数据库FAILED！】", "Main", LogCategory.I);

                MessageBox.Show("【" + tmp + " -> gDbHelperRadio连接数据库FAILED！】", "出错", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                Process.GetCurrentProcess().Kill();
            }

            #endregion

            #region (5) gDbHelperBWO    

            gDbHelperBWO = new DbHelper(DataController.StrDbIpAddr,
                                     DataController.StrDbName,
                                     DataController.StrDbUserId,
                                     DataController.StrDbUserPsw,
                                     DataController.StrDbPort);

            if (gDbHelperBWO.MyDbConnFlag == true)
            {
                add_log_info(LogInfoType.INFO, "【" + tmp + " -> gDbHelperBWO连接数据库OK！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "【" + tmp + " -> gDbHelperBWO连接数据库OK！】", "Main", LogCategory.I);
            }
            else
            {
                add_log_info(LogInfoType.EROR, "【" + tmp + " -> gDbHelperBWO连接数据库FAILED！】", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "【" + tmp + " -> gDbHelperBWO连接数据库FAILED！】", "Main", LogCategory.I);

                MessageBox.Show("【" + tmp + " -> gDbHelperBWO连接数据库FAILED！】", "出错", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                Process.GetCurrentProcess().Kill();
            }

            #endregion

            #region (6) gDbHelperSts

            //gDbHelperSts = new DbHelper(DataController.StrDbIpAddr,
            //                         DataController.StrDbName,
            //                         DataController.StrDbUserId,
            //                         DataController.StrDbUserPsw,
            //                         DataController.StrDbPort);

            //if (gDbHelperSts.MyDbConnFlag == true)
            //{
            //    add_log_info(LogInfoType.INFO, "【" + tmp + " -> gDbHelperSts连接数据库OK！】", "Main", LogCategory.I);
            //    Logger.Trace(LogInfoType.INFO, "【" + tmp + " -> gDbHelperSts连接数据库OK！】", "Main", LogCategory.I);
            //}
            //else
            //{
            //    add_log_info(LogInfoType.EROR, "【" + tmp + " -> gDbHelperSts连接数据库FAILED！】", "Main", LogCategory.I);
            //    Logger.Trace(LogInfoType.EROR, "【" + tmp + " -> gDbHelperSts连接数据库FAILED！】", "Main", LogCategory.I);

            //    MessageBox.Show("【" + tmp + " -> gDbHelperSts连接数据库FAILED！】", "出错", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
            //    Process.GetCurrentProcess().Kill();
            //}

            #endregion

            try
            {
                DbMaxIdleSeconds = int.Parse(DataController.StrDbMaxIdleSeconds);
                DbBatchUpdateRecordsLevel = int.Parse(DataController.StrDbBatchUpdateRecordsLevel);
                get_level_list(ref DbBatchUpdateRecordsLevelList, DbBatchUpdateRecordsLevel);

            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + "StrDbMaxIdleSeconds解析出错", "Main", LogCategory.I);
                DbMaxIdleSeconds = 60;
                DbBatchUpdateRecordsLevel = 6;
                get_level_list(ref DbBatchUpdateRecordsLevelList, DbBatchUpdateRecordsLevel);
            }

            #endregion

            bool noMsg = false;

            DateTime startTime = System.DateTime.Now;
            DateTime endTime = System.DateTime.Now;
            TimeSpan ts = endTime.Subtract(startTime);

            long pingPangIndex = 0;
            List<strCapture> batchData0 = new List<strCapture>();
            List<strCapture> batchData1 = new List<strCapture>();
            List<strCapture> batchData2 = new List<strCapture>();

            /*
             * 用于修复mysql连接的空闲时间超过8小时后，MySQL自动断开该连接的问题
             * wait_timeout = 8*3600
             * 即每隔fix_for_wait_timeout的时间（秒数）就访问一下数据库
             */
            int fix_for_wait_timeout = 60; //10*60;
            int reConnCnt = 0;

            DateTime startTimeConn = System.DateTime.Now;
            DateTime endTimeConn = System.DateTime.Now;
            TimeSpan tsConn = endTimeConn.Subtract(startTimeConn);

            long monitorCnt = 0;
            DateTime startMonitor = System.DateTime.Now;
            DateTime endedMonitor = System.DateTime.Now;
            TimeSpan tsMonitor = endedMonitor.Subtract(startMonitor);            

            while (true)
            {
                if (noMsg)
                {
                    Thread.Sleep(100);
                }
                else
                {
                    //Thread.Sleep(1);
                }

                //try
                //{
                //    #region 显示运行状态

                //    endedMonitor = System.DateTime.Now;
                //    tsMonitor = endedMonitor.Subtract(startMonitor);

                //    if (tsMonitor.TotalSeconds >= 10)
                //    {
                //        monitorCnt++;
                //        string info = string.Format("D{0}", monitorCnt % 10);                        

                //        BeginInvoke(new monitor_thread_status_delegate(monitor_thread_status_delegate_fun), new object[] { 2, info });

                //        // 复位计时器
                //        startMonitor = System.DateTime.Now;
                //    }

                //    #endregion
                //}
                //catch (Exception ee)
                //{
                //    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                //    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                //    continue;
                //}

                try
                {
                    #region 防止自动断开该连接的问题

                    endTimeConn = System.DateTime.Now;
                    tsConn = endTimeConn.Subtract(startTimeConn);

                    if (tsConn.TotalSeconds >= fix_for_wait_timeout)
                    {
                        // 2018-08-09
                        re_connection_db(ref gDbHelperImsi, "gDbHelperImsi",ref reConnCnt);

                        Thread.Sleep(5);

                        if (gDbHelperImsi.MyDbConnFlag)
                        {
                            List<string> listAllTbl = new List<string>();
                            listAllTbl = gDbHelperImsi.Get_All_ColumnName("user");
                        }

                        //报到线程状态
                        write_monitor_status("DB_Status");

                        startTimeConn = System.DateTime.Now;
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    startTimeConn = System.DateTime.Now;
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }
               
                try
                {
                    #region 上传处理

                    lock (mutex_DbHelper)
                    {
                        //动态计算要更新的数量
                        DbBatchUpdateRecords = get_level_list_value(DbBatchUpdateRecordsLevelList, gCaptureInfoDb.Count);

                        if (gCaptureInfoDb.Count < DbBatchUpdateRecords)
                        {
                            #region 数量不足

                            endTime = System.DateTime.Now;
                            ts = endTime.Subtract(startTime);

                            if (ts.TotalSeconds < DbMaxIdleSeconds)
                            {
                                noMsg = true;
                                continue;
                            }
                            else
                            {
                                //清空数据
                                //batchData0 = new List<strCapture>();
                                batchData0.Clear();
                                batchData0.TrimExcess();

                                //拷贝数据
                                while (gCaptureInfoDb.Count > 0)
                                {
                                    batchData0.Add(gCaptureInfoDb.Dequeue());
                                }

                                //处理数据
                                BeginInvoke(new db_batch_process_delegate(db_batch_process_delegate_fun), new object[] { batchData0 });

                                //复位计时
                                startTime = System.DateTime.Now;
                            }

                            #endregion
                        }
                        else
                        {
                            #region 数量充足

                            #region 清空数据

                            if (0 == (pingPangIndex % 3))
                            {
                                //batchData0 = new List<strCapture>();
                                batchData0.Clear();
                                batchData0.TrimExcess();
                            }
                            else if (1 == (pingPangIndex % 3))
                            {
                                //batchData1 = new List<strCapture>();
                                batchData1.Clear();
                                batchData1.TrimExcess();
                            }
                            else
                            {
                                //batchData2 = new List<strCapture>();
                                batchData2.Clear();
                                batchData2.TrimExcess();
                            }

                            #endregion

                            #region 从队列中获取设定的批量数据

                            for (int i = 0; i < DbBatchUpdateRecords; i++)
                            {
                                if (0 == (pingPangIndex % 3))
                                {
                                    batchData0.Add(gCaptureInfoDb.Dequeue());
                                }
                                else if (1 == (pingPangIndex % 3))
                                {
                                    batchData1.Add(gCaptureInfoDb.Dequeue());
                                }
                                else
                                {
                                    batchData2.Add(gCaptureInfoDb.Dequeue());
                                }
                            }

                            #endregion

                            #region 处理数据

                            //复位起始时间
                            startTime = System.DateTime.Now;

                            //处理批量的数据
                            if (0 == (pingPangIndex % 3))
                            {
                                BeginInvoke(new db_batch_process_delegate(db_batch_process_delegate_fun), new object[] { batchData0 });
                            }
                            else if (1 == (pingPangIndex % 3))
                            {
                                BeginInvoke(new db_batch_process_delegate(db_batch_process_delegate_fun), new object[] { batchData1 });
                            }
                            else
                            {
                                BeginInvoke(new db_batch_process_delegate(db_batch_process_delegate_fun), new object[] { batchData2 });
                            }

                            #endregion

                            #endregion
                        }
                    }

                    pingPangIndex++;
                    noMsg = false;

                    #endregion
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }
            }
        }

        #endregion

        #region 处理FtpHelper的线程

        private int ftp_batch_process_delegate_fun(List<strCapture> listSC)
        {
            if (gFtpHelperImsi.Connected == false)
            {
                Logger.Trace(LogInfoType.EROR, "尚未连接到FTP Server!", "Main", LogCategory.I);
                return -1;
            }

            if (listSC == null || listSC.Count == 0)
            {
                add_log_info(LogInfoType.INFO, "FTP listSC is empty", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "FTP listSC is empty", "Main", LogCategory.I);
                return -1;
            }

            //string fullPathFile = string.Format("F:\\1234567-{0}.txt", aaa++);

            string fullPathFile = DateTime.Now.ToString("yyyy-MM-dd HH-mm-ss");
            fullPathFile += ".csv";

            Stopwatch sw = new Stopwatch();
            sw.Start();           

            try
            {
                byte[] data = null;
                if (0 == generate_ftp_byte(ref data, listSC))
                {
                    gFtpHelperImsi.Put(fullPathFile, data);
                }
            }
            catch (Exception e)
            {
                Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                if (e.Message.Contains("中止"))
                {
                    gFtpHelperImsi.Connected = false;
                    gFtpHelperImsi.Connect();

                    byte[] data = null;
                    if (0 == generate_ftp_byte(ref data, listSC))
                    {
                        gFtpHelperImsi.Put(fullPathFile, data);
                    }
                }
            }

            sw.Stop();
            TimeSpan ts2 = sw.Elapsed;

            //add_log_info(LogInfoType.INFO, "FTP批量插入：" + listSC.Count.ToString() + "  ms:" + ts2.TotalMilliseconds.ToString());
            Logger.Trace(LogInfoType.INFO, "FTP批量插入：" + listSC.Count.ToString() + "  ms:" + ts2.TotalMilliseconds.ToString(), "Main", LogCategory.I);
            sw = null;

            return 0;
        }

        private int generate_ftp_file(string fileFullPath, List<strCapture> capList)
        {
            if (string.IsNullOrEmpty(fileFullPath))
            {
                add_log_info(LogInfoType.EROR, "fileFullPath is NULL", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "fileFullPath is NULL", "Main", LogCategory.I);
                return -1;
            }

            if (File.Exists(fileFullPath))
            {
                File.Delete(fileFullPath);
            }

            if (capList == null || capList.Count == 0)
            {
                add_log_info(LogInfoType.EROR, "capList is NULL", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "capList is NULL", "Main", LogCategory.I);
                return -1;
            }


            //public string imsi;          //IMSI号
            //public string imei;          //IMEI号
            //public bwType bwFlag;        //名单标识
            //public string isdn;          //手机号码号段
            //public string bsPwr;         //手机上报的基站功率
            //public string tmsi;          //手机TMSI号
            //public string time;          //感知时间
            //public string sn;            //SN号

            try
            {
                byte[] data = null;
                FileStream fs = new FileStream(fileFullPath, FileMode.Create);

                string title = string.Format("{0,4}{1,18}{2,18}{3,8}{4,18}{5,4}{6,12}{6,20}{6,20}\n",
                 "序号", "IMSI", "IMEI", "用户类型", "ISDN", "功率", "TMSI", "时间", "SN");

                data = System.Text.Encoding.Default.GetBytes(title);
                fs.Write(data, 0, data.Length);

                title = string.Format("---------------------------------------------------------------------\n");
                data = System.Text.Encoding.Default.GetBytes(title);
                fs.Write(data, 0, data.Length);

                int index = 1;
                foreach (strCapture cap in capList)
                {
                    string sqlSub = "";

                    #region 构造字符串

                    sqlSub += string.Format("{0:D4} -- ", index++);

                    //(1)
                    if (!string.IsNullOrEmpty(cap.imsi))
                    {
                        if (cap.imsi.Length > 15)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0,18}", cap.imsi);
                        }
                    }


                    //(2)
                    if (!string.IsNullOrEmpty(cap.imei))
                    {
                        if (cap.imei.Length > 15)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.imei);
                        }
                    }

                    //(3)
                    if (!string.IsNullOrEmpty(cap.isdn))
                    {
                        if (cap.isdn.Length > 10)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.isdn);
                        }
                    }

                    //(4)
                    if (!string.IsNullOrEmpty(cap.bsPwr))
                    {
                        if (cap.bsPwr.Length > 4)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.bsPwr);
                        }
                    }

                    //(5)
                    if (!string.IsNullOrEmpty(cap.tmsi))
                    {
                        if (cap.tmsi.Length > 10)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.tmsi);
                        }
                    }

                    //(6)
                    if (!string.IsNullOrEmpty(cap.time))
                    {
                        if (cap.time.Length > 19)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.time);
                        }
                    }

                    //(7)
                    if (!string.IsNullOrEmpty(cap.affDeviceId))
                    {
                        if (cap.affDeviceId.Length > 10)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.affDeviceId);
                        }
                    }

                    if (sqlSub != "")
                    {
                        //去掉最后4个字符
                        sqlSub = sqlSub.Remove(sqlSub.Length - 4, 4);
                    }

                    #endregion

                    data = System.Text.Encoding.Default.GetBytes(sqlSub + "\n");
                    fs.Write(data, 0, data.Length);
                }

                //清空缓冲区、关闭流
                fs.Flush();
                fs.Close();
                fs.Dispose();
                fs = null;
            }
            catch (Exception e)
            {
                add_log_info(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }       

        private int generate_ftp_byte(ref byte[] outData, List<strCapture> capList)
        {
            if (capList == null || capList.Count == 0)
            {
                add_log_info(LogInfoType.INFO, "capList is empty", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "capList is empty", "Main", LogCategory.I);
                return -1;
            }

            try
            {
                int index = 1;
                StringBuilder bigStr = new StringBuilder(1024 * 10);

                //string title = string.Format("序号,IMSI,时间,用户类型,TMSI,设备名称,信号,运营商,号码归属地,IMEI,SN\n");

                // 2018-09-06
                string title = string.Format("序号,IMSI,时间,用户类型,TMSI,设备名称,信号,运营商,号码归属地,IMEI,SN,别名\n");

                bigStr.Append(title); 
                      
                foreach (strCapture cap in capList)
                {
                    string sqlSub = "";

                    #region 构造字符串

                    //public string imsi;          //IMSI号
                    //public string imei;          //IMEI号
                    //public bwType bwFlag;        //名单标识
                    //public string isdn;          //手机号码号段
                    //public string bsPwr;         //手机上报的基站功率
                    //public string tmsi;          //手机TMSI号
                    //public string time;          //感知时间
                    //public string sn;            //SN号

                    //(1) 序号
                    sqlSub += string.Format("{0},", index++);

                    //(2) IMSI
                    if (!string.IsNullOrEmpty(cap.imsi))
                    {
                        if (cap.imsi.Length > 15)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("'{0},", cap.imsi);
                        }
                    }

                    //(3) 时间
                    if (!string.IsNullOrEmpty(cap.time))
                    {
                        if (cap.time.Length > 19)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0},", cap.time);
                        }
                    }

                    //(4) 用户类型
                    if (!string.IsNullOrEmpty(cap.bwFlag.ToString()))
                    {
                        if (cap.bwFlag == bwType.BWTYPE_BLACK)
                        {
                            sqlSub += string.Format("{0},", "黑名单");
                        }
                        else if (cap.bwFlag == bwType.BWTYPE_WHITE)
                        {
                            sqlSub += string.Format("{0},", "白名单");
                        }
                        else if (cap.bwFlag == bwType.BWTYPE_OTHER)
                        {
                            sqlSub += string.Format("{0},", "普通名单");
                        }
                        else
                        {
                            sqlSub += string.Format("{0},", "未知");
                        }
                    }


                    //(5) TMSI
                    if (!string.IsNullOrEmpty(cap.tmsi))
                    {
                        if (cap.tmsi.Length > 10)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0},", cap.tmsi);
                        }
                    }
                    else
                    {
                        sqlSub += string.Format(",");
                    }

                    //(6) 设备名称
                    if (!string.IsNullOrEmpty(cap.name))
                    {
                        if (cap.name.Length > 64)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0},", cap.name);
                        }
                    }
                    else
                    {
                        sqlSub += string.Format(",");
                    }                   

                    //(7) 信号
                    if (!string.IsNullOrEmpty(cap.bsPwr))
                    {
                        if (cap.bsPwr.Length > 4)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0},", cap.bsPwr);
                        }
                    }
                    else
                    {
                        sqlSub += string.Format(",");
                    }

                    strImsiParse sip = new strImsiParse();
                    if (0 == Location_And_Operator_Get(cap.imsi, ref sip))
                    {
                        // (8) 运营商
                        sqlSub += string.Format("{0},", sip.operators);

                        // (9) 号码归属地
                        sqlSub += string.Format("{0},", sip.country + sip.location);
                    }
                    else
                    {
                        // (8) 运营商
                        sqlSub += string.Format("{0},", "Null");

                        // (9) 号码归属地
                        sqlSub += string.Format("{0},", "Null");
                    }

                    //(10) IMEI
                    if (!string.IsNullOrEmpty(cap.imei))
                    {
                        if (cap.imei.Length > 15)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0},", cap.imei);
                        }
                    }
                    else
                    {
                        sqlSub += string.Format(",");
                    }

                    //(11) SN
                    if (!string.IsNullOrEmpty(cap.sn))
                    {
                        if (cap.sn.Length > 16)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0},", cap.sn);
                        }
                    }

                    #region 添加IMSI对应的别名

                    //(12) 别名
                    if (!string.IsNullOrEmpty(cap.des))
                    {
                        if (cap.des.Length > 128)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0},", cap.des);
                        }
                    }
                    else
                    {
                        sqlSub += string.Format(",");
                    }

                    #endregion

                    if (sqlSub != "")
                    {
                        //去掉最后一个字符
                        sqlSub = sqlSub.Remove(sqlSub.Length - 1, 1);
                    }

                    #endregion

                    bigStr.Append(sqlSub + "\n");
                }

                outData = System.Text.Encoding.Default.GetBytes(bigStr.ToString());
                bigStr = null;
            }
            catch (Exception e)
            {
                add_log_info(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }

        private int generate_ftp_byte(ref byte[] outData, List<string> strList)
        {
            if (strList == null)
            {
                add_log_info(LogInfoType.INFO, "strList is empty", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "strList is empty", "Main", LogCategory.I);
                return -1;
            }

            try
            {
                string bigStr = "";

                if (strList.Count == 0)
                {
                    bigStr = " ";
                }
                else
                {
                    foreach (string str in strList)
                    {
                        bigStr += string.Format("{0}\n", str);
                    }
                }

                outData = System.Text.Encoding.Default.GetBytes(bigStr);
            }
            catch (Exception e)
            {
                add_log_info(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }

        private int generate_ftp_memory(ref MemoryStream ms, List<strCapture> capList)
        {
            if (ms == null)
            {
                add_log_info(LogInfoType.EROR, "ms is NULL", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "ms is NULL", "Main", LogCategory.I);
                return -1;
            }

            if (capList == null || capList.Count == 0)
            {
                add_log_info(LogInfoType.EROR, "capList is NULL", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "capList is NULL", "Main", LogCategory.I);
                return -1;
            }

            try
            {
                int index = 1;
                int offset = 0;
                ms = new MemoryStream();
                string str = "";

                foreach (strCapture cap in capList)
                {
                    string sqlSub = "";

                    #region 构造字符串

                    sqlSub += string.Format("{0:D4} -- ", index++);

                    //(1)
                    if (!string.IsNullOrEmpty(cap.imsi))
                    {
                        if (cap.imsi.Length > 15)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.imsi);
                        }
                    }


                    //(2)
                    if (!string.IsNullOrEmpty(cap.imei))
                    {
                        if (cap.imei.Length > 15)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.imei);
                        }
                    }

                    //(3)
                    if (!string.IsNullOrEmpty(cap.isdn))
                    {
                        if (cap.isdn.Length > 10)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.isdn);
                        }
                    }

                    //(4)
                    if (!string.IsNullOrEmpty(cap.bsPwr))
                    {
                        if (cap.bsPwr.Length > 4)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.bsPwr);
                        }
                    }

                    //(5)
                    if (!string.IsNullOrEmpty(cap.tmsi))
                    {
                        if (cap.tmsi.Length > 10)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.tmsi);
                        }
                    }

                    //(6)
                    if (!string.IsNullOrEmpty(cap.time))
                    {
                        if (cap.time.Length > 19)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.time);
                        }
                    }

                    //(7)
                    if (!string.IsNullOrEmpty(cap.affDeviceId))
                    {
                        if (cap.affDeviceId.Length > 10)
                        {
                            Logger.Trace(LogInfoType.EROR, "Length error.", "Main", LogCategory.I);
                            continue;
                        }
                        else
                        {
                            sqlSub += string.Format("{0} -- ", cap.affDeviceId);
                        }
                    }

                    if (sqlSub != "")
                    {
                        //去掉最后4个字符
                        sqlSub = sqlSub.Remove(sqlSub.Length - 4, 4);
                    }

                    str += sqlSub + "\n";
                    #endregion

                    //data = new byte[1000];
                    //data = System.Text.Encoding.Default.GetBytes(sqlSub + "\n");                               
                }

                byte[] data = System.Text.Encoding.Default.GetBytes(str);
                ms.Write(data, offset, data.Length);
            }
            catch (Exception e)
            {
                add_log_info(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }

        private int generate_ftp_byte_csv(ref byte[] outData, DataTable dt)
        {
            if (dt == null || dt.Rows.Count == 0)
            {
                add_log_info(LogInfoType.EROR, "generate_ftp_byte_csv,dt is NULL", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "generate_ftp_byte_csv,dt is NULL", "Main", LogCategory.I);
                return -1;
            }

            string str = "";
            StringBuilder bigStr = new StringBuilder(1024 * 10);

            //string title = string.Format("序号,IMSI,时间,用户类型,TMSI,设备名称,信号,运营商,号码归属地,IMEI,SN\n");
            
            // 2018-09-06
            string title = string.Format("序号,IMSI,时间,用户类型,TMSI,设备名称,信号,运营商,号码归属地,IMEI,SN,别名\n");
            bigStr.Append(title);

            for (int inx = 0; inx < dt.Rows.Count; inx++)
            {
                DataRow dr = dt.Rows[inx];

                str = "";

                //(1)序号
                str += string.Format("{0},",inx + 1);

                //(2)IMSI
                if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("'{0},", dr["imsi"].ToString());
                }

                //(3) 时间
                if (string.IsNullOrEmpty(dr["time"].ToString()))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", dr["time"].ToString());
                }


                //(4) 用户类型
                if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                {
                    str += string.Format(",");
                }
                else
                {
                    if (dr["bwFlag"].ToString() == "other")
                    {
                        str += string.Format("普通名单,");
                    }
                    else if (dr["bwFlag"].ToString() == "white")
                    {
                        str += string.Format("白名单,");
                    }
                    else if (dr["bwFlag"].ToString() == "black")
                    {
                        str += string.Format("黑名单,");
                    }
                    else
                    {
                        str += string.Format("未知,");
                    }
                }


                // (5) TMSI 2018-07-24
                if (string.IsNullOrEmpty(dr["tmsi"].ToString()))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", dr["tmsi"].ToString());
                }

                //(6) 设备名称
                if (string.IsNullOrEmpty(dr["name"].ToString()))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", dr["name"].ToString());
                }

                // (7)信号 2018-07-25
                if (string.IsNullOrEmpty(dr["bsPwr"].ToString()))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", dr["bsPwr"].ToString());
                }

                strImsiParse sip = new strImsiParse();
                if (0 == Location_And_Operator_Get(dr["imsi"].ToString(), ref sip))
                {
                    // (8) 运营商
                    str += string.Format("{0},", sip.operators);

                    // (9) 号码归属地
                    str += string.Format("{0},", sip.country + sip.location);
                }
                else
                {
                    // (8) 运营商
                    str += string.Format("{0},", "Null");

                    // (9) 号码归属地
                    str += string.Format("{0},", "Null");
                }               

                //(10) IMEI
                if (string.IsNullOrEmpty(dr["imei"].ToString()))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("'{0},", dr["imei"].ToString());
                }

                //(11) SN
                if (string.IsNullOrEmpty(dr["sn"].ToString()))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", dr["sn"].ToString());
                }

                //(12) 别名，2018-09-06
                if (string.IsNullOrEmpty(dr["des"].ToString()))
                {
                    str += string.Format("\n");
                }
                else
                {
                    str += string.Format("{0}\n", dr["des"].ToString());
                }
               
                bigStr.Append(str);
            }

            outData = System.Text.Encoding.Default.GetBytes(bigStr.ToString());
            return 0;
        }

        private int generate_call_byte_csv(ref byte[] outData, List<strMsCall> lstCall)
        {
            if (lstCall.Count == 0)
            {
                add_log_info(LogInfoType.EROR, "generate_call_byte_csv,lstCall is NULL", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "generate_call_byte_csv,lstCall is NULL", "Main", LogCategory.I);
                return -1;
            }

            string str = "";
            StringBuilder bigStr = new StringBuilder(1024 * 10);

            //public string imsi;          //IMSI号
            //public string number;        //number号
            //public string time;          //感知时间

            // 2018-09-28
            string title = string.Format("序号,IMSI,号码,时间,所属设备\n");
            bigStr.Append(title);

            for (int inx = 0; inx < lstCall.Count; inx++)
            {
                strMsCall tmp = lstCall[inx];

                str = "";

                //(1)序号
                str += string.Format("{0},", inx + 1);

                //(2)IMSI
                if (string.IsNullOrEmpty(tmp.imsi))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("'{0},", tmp.imsi);
                }

                //(3)号码
                if (string.IsNullOrEmpty(tmp.number))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", tmp.number);
                }

                //(4)时间
                if (string.IsNullOrEmpty(tmp.time))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", tmp.time);
                }

                //(5) 所属设备
                if (string.IsNullOrEmpty(tmp.devName))
                {
                    str += string.Format("\n");
                }
                else
                {
                    str += string.Format("{0}\n", tmp.devName);
                }

                bigStr.Append(str);
            }

            outData = System.Text.Encoding.Default.GetBytes(bigStr.ToString());
            return 0;
        }

        private int generate_sms_byte_csv(ref byte[] outData, List<strMsSms> lstSms)
        {
            if (lstSms.Count == 0)
            {
                add_log_info(LogInfoType.EROR, "generate_sms_byte_csv,lstSms is NULL", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, "generate_sms_byte_csv,lstSms is NULL", "Main", LogCategory.I);
                return -1;
            }

            string str = "";
            StringBuilder bigStr = new StringBuilder(1024 * 10);

            //public string imsi;          //IMSI号
            //public string number;        //number号
            //public string codetype;      //编码类型
            //public string data;          //短信内容
            //public string time;          //感知时间

            // 2018-09-28
            string title = string.Format("序号,IMSI,号码,编码类型,短信内容,时间,所属设备\n");
            bigStr.Append(title);

            for (int inx = 0; inx < lstSms.Count; inx++)
            {
                strMsSms tmp = lstSms[inx];

                str = "";

                //(1)序号
                str += string.Format("{0},", inx + 1);

                //(2)IMSI
                if (string.IsNullOrEmpty(tmp.imsi))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("'{0},", tmp.imsi);
                }

                //(3)号码
                if (string.IsNullOrEmpty(tmp.number))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", tmp.number);
                }

                //(4)编码类型
                if (string.IsNullOrEmpty(tmp.codetype))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", tmp.codetype);
                }

                //(5)短信内容
                if (string.IsNullOrEmpty(tmp.data))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", tmp.data);
                }

                //(6)时间
                if (string.IsNullOrEmpty(tmp.time))
                {
                    str += string.Format(",");
                }
                else
                {
                    str += string.Format("{0},", tmp.time);
                }

                //(7) 所属设备
                if (string.IsNullOrEmpty(tmp.devName))
                {
                    str += string.Format("\n");
                }
                else
                {
                    str += string.Format("{0}\n", tmp.devName);
                }

                bigStr.Append(str);
            }

            outData = System.Text.Encoding.Default.GetBytes(bigStr.ToString());
            return 0;
        }

        /// <summary>
        /// 用于处理FtpHelper的线程
        /// </summary>
        /// <param name="obj"></param>
        private void thread_for_ftp_helper(object obj)
        {
            #region 初始化FtpHelper

            int FtpMaxIdleSeconds = 60;
            int FtpBatchUpdateRecordsLevel = 6;
            int FtpBatchUpdateRecords = -1;
            List<int> FtpBatchUpdateRecordsLevelList = new List<int>();

            /// <summary>
            /// 和FTP Server保持KeepAlive的频率(秒数)
            /// </summary>
            int CHECK_FTP_CONN_STAT = DataController.CheckFtpConnStatTime;

            try
            {
                FtpMaxIdleSeconds = int.Parse(DataController.StrFtpMaxIdleSeconds);
                FtpBatchUpdateRecordsLevel = int.Parse(DataController.StrFtpBatchUpdateRecordsLevel);
                get_level_list(ref FtpBatchUpdateRecordsLevelList, FtpBatchUpdateRecordsLevel);
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace + "StrDbMaxIdleSeconds解析出错", "Main", LogCategory.I);

                FtpMaxIdleSeconds = 60;
                FtpBatchUpdateRecordsLevel = 6;
                get_level_list(ref FtpBatchUpdateRecordsLevelList, FtpBatchUpdateRecordsLevel);
            }

            #region gFtpHelperImsi

            try
            {
                gFtpHelperImsi = new FtpHelper(DataController.StrFtpIpAddr,
                                           DataController.StrFtpImsiDir,
                                           DataController.StrFtpUserId,
                                           DataController.StrFtpUserPsw,
                                           int.Parse(DataController.StrFtpPort));

                if (gFtpHelperImsi.Connected == false)
                {
                    gFtpHelperImsi.Connect();
                }

                if (gFtpHelperImsi.Connected == true)
                {
                    string info = string.Format("【{0} {1} {2} {3} {4} -> 连接FTP服务器OK！】",
                                          DataController.StrFtpIpAddr,
                                          DataController.StrFtpImsiDir,
                                          DataController.StrFtpUserId,
                                          DataController.StrFtpUserPsw,
                                          int.Parse(DataController.StrFtpPort));

                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                }
                else
                {
                    string info = string.Format("【{0} {1} {2} {3} {4} -> 连接FTP服务器FAILED！】",
                                         DataController.StrFtpIpAddr,
                                         DataController.StrFtpImsiDir,
                                         DataController.StrFtpUserId,
                                         DataController.StrFtpUserPsw,
                                         int.Parse(DataController.StrFtpPort));

                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                    MessageBox.Show(info, "出错", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                    Process.GetCurrentProcess().Kill();
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
            }

            #endregion

            #region gFtpHelperFile

            try
            {
                gFtpHelperFile = new FtpHelper(DataController.StrFtpIpAddr,
                                           DataController.StrFtpUpdateDir,
                                           DataController.StrFtpUserId,
                                           DataController.StrFtpUserPsw,
                                           int.Parse(DataController.StrFtpPort));

                if (gFtpHelperFile.Connected == false)
                {
                    gFtpHelperFile.Connect();
                }

                if (gFtpHelperFile.Connected == true)
                {
                    string info = string.Format("【{0} {1} {2} {3} {4} -> 连接FTP服务器OK！】",
                                          DataController.StrFtpIpAddr,
                                          DataController.StrFtpUpdateDir,
                                          DataController.StrFtpUserId,
                                          DataController.StrFtpUserPsw,
                                          int.Parse(DataController.StrFtpPort));

                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                }
                else
                {
                    string info = string.Format("【{0} {1} {2} {3} {4} -> 连接FTP服务器FAILED！】",
                                         DataController.StrFtpIpAddr,
                                         DataController.StrFtpUpdateDir,
                                         DataController.StrFtpUserId,
                                         DataController.StrFtpUserPsw,
                                         int.Parse(DataController.StrFtpPort));

                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                    MessageBox.Show(info, "出错", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                    Process.GetCurrentProcess().Kill();
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
            }


            #endregion

            #region gFtpHelperApFtp

            if (DataController.ApFtpUploadEnable == 1)
            {
                try
                {
                    gFtpHelperApFtp = new FtpHelper(DataController.StrFtpIpAddr,
                                               DataController.StrApFtpUploadDir,
                                               DataController.StrFtpUserId,
                                               DataController.StrFtpUserPsw,
                                               int.Parse(DataController.StrFtpPort));

                    if (gFtpHelperApFtp.Connected == false)
                    {
                        gFtpHelperApFtp.Connect();
                    }

                    if (gFtpHelperApFtp.Connected == true)
                    {
                        string info = string.Format("【{0} {1} {2} {3} {4} -> 连接FTP服务器OK！】",
                                              DataController.StrFtpIpAddr,
                                              DataController.StrApFtpUploadDir,
                                              DataController.StrFtpUserId,
                                              DataController.StrFtpUserPsw,
                                              int.Parse(DataController.StrFtpPort));

                        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                    }
                    else
                    {
                        string info = string.Format("【{0} {1} {2} {3} {4} -> 连接FTP服务器FAILED！】",
                                             DataController.StrFtpIpAddr,
                                             DataController.StrApFtpUploadDir,
                                             DataController.StrFtpUserId,
                                             DataController.StrFtpUserPsw,
                                             int.Parse(DataController.StrFtpPort));

                        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                        MessageBox.Show(info, "出错", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                        Process.GetCurrentProcess().Kill();
                    }
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                }
            }

            #endregion

            #endregion

            #region 变量定义

            bool noMsg = false;
            long pingPangIndex = 1;

            DateTime startTime = System.DateTime.Now;
            DateTime endTime = System.DateTime.Now;
            TimeSpan ts = endTime.Subtract(startTime);

            DateTime startTimeConn = System.DateTime.Now;
            DateTime endTimeConn = System.DateTime.Now;
            TimeSpan tsConn = endTimeConn.Subtract(startTimeConn);

            List<strCapture> batchData0 = new List<strCapture>();
            List<strCapture> batchData1 = new List<strCapture>();
            List<strCapture> batchData2 = new List<strCapture>();

            int keepAliveMode = 0;

            #endregion
          
            DateTime startMonitor = System.DateTime.Now;
            DateTime endedMonitor = System.DateTime.Now;
            TimeSpan tsMonitor = endedMonitor.Subtract(startMonitor);

            while (true)
            {          
                if (noMsg)
                {
                    Thread.Sleep(100);
                }
                else
                {
                    //Thread.Sleep(1);
                }                

                try
                {
                    #region keepAlive处理

                    endTimeConn = System.DateTime.Now;
                    tsConn = endTimeConn.Subtract(startTimeConn);

                    if (tsConn.TotalSeconds >= CHECK_FTP_CONN_STAT)
                    {
                        string str = string.Format("[{0}]--keepAlive\r\n", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                        byte[] data = System.Text.Encoding.Default.GetBytes(str);

                        #region gFtpHelperImsi

                        try
                        {
                            if (keepAliveMode == 0)
                            {
                                if (gFtpHelperImsi.Connected == false)
                                {
                                    gFtpHelperImsi.Connect();
                                }
                                else
                                {
                                    if (0 == gFtpHelperImsi.Put("keepAlive", data))
                                    {
                                        add_log_info(LogInfoType.INFO, "gFtpHelperImsi -> keepAlive OK.", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gFtpHelperImsi -> keepAlive OK.", "Main", LogCategory.I);
                                    }
                                    else
                                    {
                                        add_log_info(LogInfoType.INFO, "gFtpHelperImsi -> keepAlive NO.", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gFtpHelperImsi -> keepAlive NO.", "Main", LogCategory.I);
                                    }
                                }
                            }
                            else
                            {
                                gFtpHelperImsi.Connected = false;
                                gFtpHelperImsi.Connect();
                            }
                        }
                        catch (Exception e)
                        {
                            add_log_info(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);

                            if (keepAliveMode == 0)
                            {
                                string errInfo = string.Format("异常：{0}，gFtpHelperImsi重连FTP服务器...", e.Message);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                gFtpHelperImsi.Connected = false;
                                gFtpHelperImsi.Connect();
                            }
                        }

                        #endregion

                        #region gFtpHelperFile

                        try
                        {
                            if (keepAliveMode == 0)
                            {
                                if (gFtpHelperFile.Connected == false)
                                {
                                    gFtpHelperFile.Connect();
                                }
                                else
                                {
                                    if (0 == gFtpHelperFile.Put("keepAlive", data))
                                    {
                                        add_log_info(LogInfoType.INFO, "gFtpHelperFile -> keepAlive OK.", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gFtpHelperFile -> keepAlive OK.", "Main", LogCategory.I);
                                    }
                                    else
                                    {
                                        add_log_info(LogInfoType.INFO, "gFtpHelperFile -> keepAlive NO.", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gFtpHelperFile -> keepAlive NO.", "Main", LogCategory.I);
                                    }
                                }
                            }
                            else
                            {
                                gFtpHelperFile.Connected = false;
                                gFtpHelperFile.Connect();
                            }
                        }
                        catch (Exception e)
                        {
                            add_log_info(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);

                            if (keepAliveMode == 0)
                            {
                                string errInfo = string.Format("异常：{0}，gFtpHelperFile重连FTP服务器...", e.Message + e.StackTrace);
                                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                gFtpHelperFile.Connected = false;
                                gFtpHelperFile.Connect();
                            }
                        }

                        #endregion

                        #region gFtpHelperApFtp

                        // 2108-12-24

                        if (DataController.ApFtpUploadEnable == 1)
                        {
                            try
                            {
                                if (keepAliveMode == 0)
                                {
                                    if (gFtpHelperApFtp.Connected == false)
                                    {
                                        gFtpHelperApFtp.Connect();
                                    }
                                    else
                                    {
                                        if (0 == gFtpHelperApFtp.Put("keepAlive", data))
                                        {
                                            add_log_info(LogInfoType.INFO, "gFtpHelperApFtp -> keepAlive OK.", "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, "gFtpHelperApFtp -> keepAlive OK.", "Main", LogCategory.I);
                                        }
                                        else
                                        {
                                            add_log_info(LogInfoType.INFO, "gFtpHelperApFtp -> keepAlive NO.", "Main", LogCategory.I);
                                            Logger.Trace(LogInfoType.INFO, "gFtpHelperApFtp -> keepAlive NO.", "Main", LogCategory.I);
                                        }
                                    }
                                }
                                else
                                {
                                    gFtpHelperFile.Connected = false;
                                    gFtpHelperFile.Connect();
                                }
                            }
                            catch (Exception e)
                            {
                                add_log_info(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, e.Message + e.StackTrace, "Main", LogCategory.I);

                                if (keepAliveMode == 0)
                                {
                                    string errInfo = string.Format("异常：{0}，gFtpHelperApFtp重连FTP服务器...", e.Message + e.StackTrace);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    gFtpHelperApFtp.Connected = false;
                                    gFtpHelperApFtp.Connect();
                                }
                            }
                        }

                        #endregion

                        #region 计时复位

                        startTimeConn = System.DateTime.Now;

                        #endregion

                        //报到线程状态
                        write_monitor_status("Ftp_Status");
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }

                try
                {
                    #region 上传处理

                    lock (mutex_FtpHelper)
                    {
                        //动态计算要更新的数量
                        FtpBatchUpdateRecords = get_level_list_value(FtpBatchUpdateRecordsLevelList, gCaptureInfoFtp.Count);

                        if (gCaptureInfoFtp.Count < FtpBatchUpdateRecords)
                        {
                            #region 数量不足

                            endTime = System.DateTime.Now;
                            ts = endTime.Subtract(startTime);

                            if (ts.TotalSeconds < FtpMaxIdleSeconds)
                            {
                                noMsg = true;
                                continue;
                            }
                            else
                            {
                                //清空数据
                                //batchData0 = new List<strCapture>();
                                batchData0.Clear();
                                batchData0.TrimExcess();

                                //拷贝数据
                                while (gCaptureInfoFtp.Count > 0)
                                {
                                    batchData0.Add(gCaptureInfoFtp.Dequeue());
                                }

                                //处理数据
                                BeginInvoke(new db_batch_process_delegate(ftp_batch_process_delegate_fun), new object[] { batchData0 });

                                //复位计时  
                                startTime = System.DateTime.Now;
                            }

                            #endregion
                        }
                        else
                        {
                            #region 数量充足

                            #region 清空数据

                            if (0 == (pingPangIndex % 3))
                            {
                                //batchData0 = new List<strCapture>();
                                batchData0.Clear();
                                batchData0.TrimExcess();
                            }
                            else if (1 == (pingPangIndex % 3))
                            {
                                //batchData1 = new List<strCapture>();
                                batchData1.Clear();
                                batchData1.TrimExcess();
                            }
                            else
                            {
                                //batchData2 = new List<strCapture>();
                                batchData2.Clear();
                                batchData2.TrimExcess();
                            }

                            #endregion

                            #region 从队列中获取设定的批量数据

                            for (int i = 0; i < FtpBatchUpdateRecords; i++)
                            {
                                if (0 == (pingPangIndex % 3))
                                {
                                    batchData0.Add(gCaptureInfoFtp.Dequeue());
                                }
                                else if (1 == (pingPangIndex % 3))
                                {
                                    batchData1.Add(gCaptureInfoFtp.Dequeue());
                                }
                                else
                                {
                                    batchData2.Add(gCaptureInfoFtp.Dequeue());
                                }
                            }

                            #endregion

                            #region 处理批量的数据

                            if (0 == (pingPangIndex % 3))
                            {
                                BeginInvoke(new db_batch_process_delegate(ftp_batch_process_delegate_fun), new object[] { batchData0 });
                            }
                            else if (1 == (pingPangIndex % 3))
                            {
                                BeginInvoke(new db_batch_process_delegate(ftp_batch_process_delegate_fun), new object[] { batchData1 });
                            }
                            else
                            {
                                BeginInvoke(new db_batch_process_delegate(ftp_batch_process_delegate_fun), new object[] { batchData2 });
                            }

                            #endregion

                            #region 复位计时

                            //复位起始时间
                            startTime = System.DateTime.Now;

                            #endregion

                            #endregion
                        }
                    }

                    noMsg = false;
                    pingPangIndex++;

                    #endregion
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }
            }
        }

        #endregion

        #region 窗体相关处理

        public FrmMainController()
        {
            // 打开控件的双缓冲，2018-08-06
            SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true);
            gSvnVersionString = string.Format("软件+SVN版本:{0}", System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString());

            #region 初始化DataController

            add_log_info(LogInfoType.INFO, "今天是个好日子！", "Main", LogCategory.I);
            add_log_info(LogInfoType.INFO, "欢迎进入ScannerBackgrdServer！", "Main", LogCategory.I);
                        
            Logger.Trace(LogInfoType.INFO, "今天是个好日子！", "Main", LogCategory.I);
            Logger.Trace(LogInfoType.INFO, "欢迎进入ScannerBackgrdServer！", "Main", LogCategory.I);
         
            //add_log_info(LogInfoType.INFO, "StrAppDebugMode = " + DataController.StrAppDebugMode);
            //add_log_info(LogInfoType.INFO, "StrDbSwitch = " + DataController.StrDbSwitch);
            //add_log_info(LogInfoType.INFO, "StrDbIpAddr = " + DataController.StrDbIpAddr);
            //add_log_info(LogInfoType.INFO, "StrDbName = " + DataController.StrDbName);
            //add_log_info(LogInfoType.INFO, "StrDbUserId = " + DataController.StrDbUserId);
            //add_log_info(LogInfoType.INFO, "StrDbUserPsw = " + DataController.StrDbUserPsw);
            //add_log_info(LogInfoType.INFO, "StrDbPort = " + DataController.StrDbPort);
            //add_log_info(LogInfoType.INFO, "StrFtpSwitch = " + DataController.StrFtpSwitch);
            //add_log_info(LogInfoType.INFO, "StrFtpIpAddr = " + DataController.StrFtpIpAddr);
            //add_log_info(LogInfoType.INFO, "StrFtpUserId = " + DataController.StrFtpUserId);
            //add_log_info(LogInfoType.INFO, "StrFtpUserPsw = " + DataController.StrFtpUserPsw);
            //add_log_info(LogInfoType.INFO, "StrFtpPort = " + DataController.StrFtpPort);
            //add_log_info(LogInfoType.INFO, "StrFtpUserDir = " + DataController.StrFtpUserDir);            

            #endregion

            #region 初始化ApCtrl

            try
            {
                new Ap_LTE().Start(int.Parse(DataController.StrStartPortLTE));
                new Ap_WCDMA().Start(int.Parse(DataController.StrStartPortWCDMA));

                // 2018-07-25
                new Ap_GSM_ZYF().Start(int.Parse(DataController.StrStartPortGSM_ZYF));
                new Ap_CDMA_ZYF().Start(int.Parse(DataController.StrStartPortCDMA_ZYF));
                new Ap_GSM_HJT().Start(int.Parse(DataController.StrStartPortGSM_HJT));
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
            }

            #endregion

            #region 初始化AppCtrl

            try
            {
                new App_Windows().Start(int.Parse(DataController.StrStartPortAppWindows));
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
            }

            #endregion                     

            InitializeComponent();

            if (DataController.StrAppDebugMode.Equals("1"))
            {
                //调试模式

                button1.Visible = false;
                button2.Visible = false;
                //button3.Visible = false;
                button4.Visible = false;
                button5.Visible = false;
                button6.Visible = false;
                button8.Visible = false;
                button9.Visible = false;
                button10.Visible = false;
                button12.Visible = false;
                button13.Visible = false;

                textBox1.Visible = false;
                panel1.Height = 85;
             
                label3.Text = string.Format("当前调试级别:{0}", DataController.LogOutputLevel.ToString());                

                pictureBox1.Visible = false;
                label1.Visible = false;
                label2.Visible = false;
                //timer1.Enabled = false;

                //label4.Visible = false;
                //labelAp1.Visible = false;
                //labelApp1.Visible = false;
                //labelDb1.Visible = false;
                //labelFtp1.Visible = false;

                button16.Visible = false;
                label5.Visible = false;

                label_ver.Visible = false;
                label_time.Visible = false;

                richTextBoxLog.Dock = DockStyle.Fill;

                this.Height = 650;
                this.Width = 750;

                label3.Text = string.Format("当前级别:{0}", DataController.LogOutputLevel.ToString());

                labelDbg.Text = System.IO.File.GetLastWriteTime(this.GetType().Assembly.Location).ToString("yyyy-MM-dd");
                labelVersion.Text = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString();
            }
            else
            {
                //非调试模式

                label_ver.Text = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString();
                label_time.Text = System.IO.File.GetLastWriteTime(this.GetType().Assembly.Location).ToString("yyyy-MM-dd");

                //label_ver.Location = new Point(5, 5);
                //label_time.Location = new Point(5, 25);

                panel1.Visible = false;
                richTextBoxLog.Visible = false;

                this.Width = 460;
                this.Height = 560;
                

                label5.Text = string.Format("当前级别:{0}", DataController.LogOutputLevel.ToString());
               
            }

            //button3.Visible = false;

            //button15.Visible = false;
            gCurLogInfoTypeIndex = (int)DataController.LogOutputLevel;
            this.StartPosition = FormStartPosition.CenterScreen;            
        }
 
        private void FrmMainController_Load(object sender, EventArgs e)
        {
            //string tmp1 = null;
            //string tmp2 = string.Empty;
            //string tmp3 = "";
            //string tmp4 = " ";
            //string tmp5 = "asd";
            //bool aa;

            //aa = string.IsNullOrEmpty(tmp1);
            //aa = string.IsNullOrEmpty(tmp2);
            //aa = string.IsNullOrEmpty(tmp3);
            //aa = string.IsNullOrEmpty(tmp4);
            //aa = string.IsNullOrEmpty(tmp5);

            /*
             * 2018-09-18
             * 限制最大工作线程和i/o线程
             */ 
            ThreadPool.SetMaxThreads(40, 40);

            string tmp = string.Format("{0}\\tmp", Application.StartupPath);
            if (!Directory.Exists(tmp))
            {
                Directory.CreateDirectory(tmp);
            }

            //string bUeContent = "123456;中国人民解放军";
            //string number = "";
            //string data = "";
            //int rtv = bUeContent.IndexOf(";");

            //number = bUeContent.Substring(0, rtv);
            //data = bUeContent.Substring(rtv + 1);



            //strImsiParse tmp = new strImsiParse();

            //for (int i = 0; i < 100; i++)
            //{
            //    tmp.country = i.ToString();
            //    tmp.operators = "运营商";
            //    tmp.location = "中国人民解放军";
            //    tmp.isdn = "122212";

            //    gDicImsiParse.Add(i.ToString(), tmp);
            //}

            //int ff = gDicImsiParse.Count;
            //string fist = gDicImsiParse.Keys.First();
            //gDicImsiParse.Remove(fist);

            #region 启动UI的Log线程

            if (ThreadFlag_For_UI_Logger)
            {
                //通过ParameterizedThreadStart创建线程
                Thread thread1 = new Thread(new ParameterizedThreadStart(thread_for_logger));

                thread1.Priority = ThreadPriority.Lowest;

                //给方法传值
                thread1.Start("this is elephant speaking!\n");
                thread1.IsBackground = true;
            }
            else
            {
                Start_BgWorker();
            }

            #endregion

            #region 启动用于接收ApCtrl_Lower消息的线程

            //通过ParameterizedThreadStart创建线程
            Thread thread2 = new Thread(new ParameterizedThreadStart(thread_for_ap_controller));

            //给方法传值
            thread2.Start("thread_for_ap_controller!\n");
            thread2.IsBackground = true;

            #endregion

            #region 启动用于接收AppCtrl_Upper消息的线程

            //通过ParameterizedThreadStart创建线程
            Thread thread3 = new Thread(new ParameterizedThreadStart(thread_for_app_controller));

            //给方法传值
            thread3.Start("thread_for_app_controller!\n");
            thread3.IsBackground = true;

            #endregion

            #region 启动用于处理DbHelper的线程

            //通过ParameterizedThreadStart创建线程
            Thread thread4 = new Thread(new ParameterizedThreadStart(thread_for_db_helper));

            //给方法传值
            thread4.Start("thread_for_db_helper!\n");
            thread4.IsBackground = true;

            #endregion

            #region 启动用于处理FtpHelper的线程

            //通过ParameterizedThreadStart创建线程
            Thread thread5 = new Thread(new ParameterizedThreadStart(thread_for_ftp_helper));

            //给方法传值
            thread5.Start("thread_for_ftp_helper!\n");
            thread5.IsBackground = true;

            #endregion

            #region 启动射频开关设置的线程

            // 2018-09-05

            //通过ParameterizedThreadStart创建线程
            Thread thread6 = new Thread(new ParameterizedThreadStart(thread_for_set_radio));

            //给方法传值
            thread6.Start("thread_for_set_radio!\n");
            thread6.IsBackground = true;

            #endregion

            #region 初始化号码归属地

            Stopwatch sw = new Stopwatch();
            sw.Start();

            //用于快速通过设备的全名早点设备对应的ID
            if (0 == Location_And_Operator_Init())
            {
                add_log_info(LogInfoType.INFO, "Location_And_Operator_Init -> OK！", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "Location_And_Operator_Init -> OK！", "Main", LogCategory.I);
            }
            else
            {
                add_log_info(LogInfoType.INFO, "Location_And_Operator_Init -> NO！", "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, "Location_And_Operator_Init -> NO！", "Main", LogCategory.I);
            }

            sw.Stop();
            TimeSpan ts2 = sw.Elapsed;
            string info = string.Format("Location_And_Operator_Init->Stopwatch总共花费:{0}ms",Math.Ceiling(ts2.TotalMilliseconds));

            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

            #endregion

            #region 启动文件Logger消息线程

            Logger.Start();

            #endregion           

            #region 启动用于处理黑白普通名单的线程

            //通过ParameterizedThreadStart创建线程
            Thread thread7 = new Thread(new ParameterizedThreadStart(thread_for_bwo_process));

            //给方法传值
            thread7.Start("thread_for_bwo_process!\n");
            thread7.IsBackground = true;

            #endregion

            #region 进程间通信

            //for (int i = 0; i < (int)ThreadMonitorIndex.TMI_MAX; i++)
            //{
            //    gLstThreadMonitor.Add(gThreadMonitorCnt);
            //}

            //通过ParameterizedThreadStart创建线程
            Thread thread8 = new Thread(new ParameterizedThreadStart(thread_for_monitor_process));

            //给方法传值
            thread8.Start("thread_for_monitor_process!\n");
            thread8.IsBackground = true;

            #endregion

            #region 处理非XML的FTP上传           

            if (DataController.ApFtpUploadEnable == 1)
            {
                //通过ParameterizedThreadStart创建线程
                Thread thread9 = new Thread(new ParameterizedThreadStart(thread_for_apFtpUpload__process));

                //给方法传值
                thread9.Start("thread_for_apFtpUpload__process!\n");
                thread9.IsBackground = true;
            }

            #endregion
        }

        private static void SaveLog(string log)
        {
            string filePath = AppDomain.CurrentDomain.BaseDirectory + @"\LogSer\Exception.txt";

            //采用using关键字，会自动释放
            using (FileStream fs = new FileStream(filePath, FileMode.Append))
            {
                using (StreamWriter sw = new StreamWriter(fs, Encoding.Default))
                {
                    sw.WriteLine(log);
                }
            }
        }

        private int RebootByAuto = 0;

        private void FrmMainController_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (RebootByAuto == 0)
            {
                DialogResult dr = MessageBox.Show("    是否退出应用程序?", "提示:", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);

                if (dr == DialogResult.OK)   //如果单击"是"按钮
                {
                    if (process_is_exit("Monitor"))
                    {
                        SaveLog("\r\nFrmMainController_FormClosing(RebootByAuto = 0) -> send RESTART_ME_RIGHTNOW to Monitor. " + DateTime.Now.ToString("yyyy-MM-dd HH-mm-ss"));
                        send_data_2_monitor("RESTART_ME_RIGHTNOW");
                    }

                    Thread.Sleep(500);

                    //关闭窗体
                    e.Cancel = false;
                }
                else if (dr == DialogResult.Cancel)
                {
                    //不执行操作
                    e.Cancel = true;
                }
            }
            else
            {
                if (process_is_exit("Monitor"))
                {
                    SaveLog("\r\nFrmMainController_FormClosing(RebootByAuto = 1) -> send RESTART_ME_RIGHTNOW to Monitor. " + DateTime.Now.ToString("yyyy-MM-dd HH-mm-ss"));
                    send_data_2_monitor("RESTART_ME_RIGHTNOW");
                }

                Thread.Sleep(500);

                //关闭窗体
                e.Cancel = false;
            }
        }

        #endregion

        #region 调试按钮处理

        /// <summary>
        /// 进程的线程详细信息
        /// </summary>
        public static void GetProcessThreadInfomation()
        {
            Process pro = Process.GetProcessesByName("ScannerBackgrdServer")[0];

            Console.WriteLine("ScannerBackgrdServer程序进程的线程详细信息如下：");
            int length = pro.Threads.Count;
            for (int i = 0; i < length; i++)
            {
                var thread = pro.Threads[i];

                Console.WriteLine("标识符：" + thread.Id.ToString());
                Console.WriteLine("基本优先级：" + thread.BasePriority.ToString());
                Console.WriteLine("当前优先级：" + thread.CurrentPriority.ToString());
                Console.WriteLine("内存地址：" + thread.StartAddress.ToInt32());
                Console.WriteLine("启动时间：" + thread.StartTime.ToString());
                Console.WriteLine("使用时间：" + thread.UserProcessorTime.ToString());
                Console.Write("当前状态：");


                switch (thread.ThreadState)
                {
                    case System.Diagnostics.ThreadState.Initialized:
                        Console.WriteLine("线程已经初始化但尚未启动");
                        break;
                    case System.Diagnostics.ThreadState.Ready:
                        Console.WriteLine("线程准备在下一个可用的处理器上运行");
                        break;
                    case System.Diagnostics.ThreadState.Running:
                        Console.WriteLine("当前正在使用处理器");
                        break;
                    case System.Diagnostics.ThreadState.Standby:
                        Console.WriteLine("线程将要使用处理器");
                        break;
                    case System.Diagnostics.ThreadState.Terminated:
                        Console.WriteLine("线程已完成执行并退出");
                        break;
                    case System.Diagnostics.ThreadState.Transition:
                        Console.WriteLine("线程在可以执行钱等待处理器之外的资源");
                        break;
                    case System.Diagnostics.ThreadState.Unknown:
                        Console.WriteLine("状态未知");
                        break;
                    case System.Diagnostics.ThreadState.Wait:
                        Console.WriteLine("正在等待外围操作完成或者资源释放");
                        break;
                    default:
                        break;
                }

                /*
                if (thread.ThreadState == System.Diagnostics.ThreadState.Wait)
                {

                    Console.Write("等待原因：");
                    switch (thread.WaitReason)
                    {
                        case ThreadWaitReason.EventPairHigh:
                            Console.WriteLine("线程正在等待事件对高");
                            break;
                        case ThreadWaitReason.EventPairLow:
                            Console.WriteLine("线程正在等待事件对低");
                            break;
                        case ThreadWaitReason.ExecutionDelay:
                            Console.WriteLine("线程执行延迟");
                            break;
                        case ThreadWaitReason.Executive:
                            Console.WriteLine("线程正在等待计划程序");
                            break;
                        case ThreadWaitReason.FreePage:
                            Console.WriteLine("线程正在等待可用的虚拟内存页");
                            break;
                        case ThreadWaitReason.LpcReceive:
                            Console.WriteLine("线程正在等待本地过程调用到达");
                            break;
                        case ThreadWaitReason.LpcReply:
                            Console.WriteLine("线程正在等待对本地过程调用的回复到达");
                            break;
                        case ThreadWaitReason.PageIn:
                            Console.WriteLine("线程正在等待虚拟内存页到达内存");
                            break;
                        case ThreadWaitReason.PageOut:
                            Console.WriteLine("线程正在等待虚拟内存页写入磁盘");
                            break;
                        case ThreadWaitReason.Suspended:
                            Console.WriteLine("线程执行暂停");
                            break;
                        case ThreadWaitReason.SystemAllocation:
                            Console.WriteLine("线程正在等待系统分配");
                            break;
                        case ThreadWaitReason.Unknown:
                            Console.WriteLine("线程因位置原因而等待");
                            break;
                        case ThreadWaitReason.UserRequest:
                            Console.WriteLine("线程正在等待用户请求");
                            break;
                        case ThreadWaitReason.VirtualMemory:
                            Console.WriteLine("线程正在等待系统分配虚拟内存");
                            break;
                        default:
                            break;
                    }
                }
                */
                Console.WriteLine();
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string dd = Guid.NewGuid().ToString(); // 9af7f46a-ea52-4aa3-b8c3-9fd484c2af12


            MessageBox.Show("this is elephant speaking! " + dd);

            add_log_info(LogInfoType.INFO, "this is elephant speaking!", "Main", LogCategory.I);

            dd = "root" + dd.Substring(0, 4);
            string str1 = Common.Common.Encode(dd);

            string ddddd = Common.Common.Decode(str1);

            string str2 = Common.Common.Encode("ftpuser");

            string str3 = Common.Common.Decode("Af8SZ2BneUw=");
            string str4 = Common.Common.Decode("S4N5N1nIj1Y=");

            string strxx = "1,2,3,t";
            string[] s = strxx.Split(new char[] { ',' });

            foreach (string str in s)
            {
                try
                {
                    UInt16.Parse(str);
                }
                catch (Exception ee)
                {
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                }
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //add_log_info(LogInfoType.WARN, "this is elephant speaking!");

            //add_log_info(LogInfoType.WARN, "接收心跳数：" + Ap_LTE.heartbeatMsgNum, "Main", LogCategory.I);
            //add_log_info(LogInfoType.WARN, "接收IMSI数：" + Ap_LTE.imsiMsgNum, "Main", LogCategory.I);

            //add_log_info(LogInfoType.WARN, "接收消息数：" + DeviceManager.recvDeciveMsgNum);
            //add_log_info(LogInfoType.WARN, "处理消息数：" + DeviceManager.handleDeciveMsgNum);
        }        

        private void button3_Click(object sender, EventArgs e)
        {
            int operFlag = 1;

            DataController.SetConfigValue("logMaxIdleSeconds","123");

            RebootByAuto = 1;
            this.Close();

            //gDbHelperUpper.device_unknown_record_insert("172.15.26.253",2569,"asdad");

            string[] ss = gFtpHelperApFtp.Dir("");

            return;

            if (operFlag == 1)
            {
                string errInfo1 = "";
                strBatchImportExport bie2 = new strBatchImportExport();
                string JsonText = "";
                BIE_read_from_DB(ref bie2, ref errInfo1, ref JsonText);

                System.IO.File.WriteAllText(@"f:\\ori-0.txt", JsonText, Encoding.Default);
            }
            else
            {
                string errInfo1 = "";
                string text1 = System.IO.File.ReadAllText(@"f:\\test.txt", Encoding.Default);
                strBatchImportExport bie2 = JsonConvert.DeserializeObject<strBatchImportExport>(text1);
                BIE_write_2_DB(bie2, ref errInfo1);
            }
     

            string text = System.IO.File.ReadAllText(@"f:\\abc.txt", Encoding.Default);
            strBatchImportExport bie1 = JsonConvert.DeserializeObject<strBatchImportExport>(text);

            string errInfo = "";
            strBatchImportExport bie = new strBatchImportExport();

            bie.lstDomainInfo = new List<strBIE_DomainInfo>();
            bie.lstDeviceInfo = new List<strBIE_DeviceInfo>();
            bie.lstLTE = new List<strBIE_LTE>();
            bie.lstGSM_ZYF = new List<strBIE_GSM_ZYF>();
            bie.lstCDMA_ZYF = new List<strBIE_CDMA_ZYF>();

            BIE_get_all_domain(ref bie.lstDomainInfo, ref errInfo);
            BIE_get_all_device(ref bie.lstDeviceInfo, ref errInfo);

            BIE_get_all_LTE(ref bie.lstLTE, ref errInfo);
            BIE_get_all_GSM_ZYF(ref bie.lstGSM_ZYF, ref errInfo);
            BIE_get_all_CDMA_ZYF(ref bie.lstCDMA_ZYF, ref errInfo);

            string test = JsonConvert.SerializeObject(bie);

            #region 格式化

            test = test.Replace("\"lstDomainInfo\":[", "\r\n\r\n\"lstDomainInfo\":[\r\n");       
            test = test.Replace("\"lstDeviceInfo\":[", "\r\n\r\n\"lstDeviceInfo\":[\r\n");  
            
            test = test.Replace("\"lstLTE\":[", "\r\n\r\n\"lstLTE\":[\r\n");
            test = test.Replace("\"lstGSM_ZYF\":[", "\r\n\r\n\"lstGSM_ZYF\":[\r\n");
            test = test.Replace("\"lstCDMA_ZYF\":[", "\r\n\r\n\"lstCDMA_ZYF\":[\r\n");

            test = test.Replace("\"lstBwList\":[", "\r\n\"lstBwList\":[\r\n");

            test = test.Replace("\"bieSys0\"", "\r\n\"bieSys0\"");
            test = test.Replace("\"bieSys1\"", "\r\n\"bieSys1\"");

            test = test.Replace("},{", "},\r\n{");

            #endregion

            System.IO.File.WriteAllText(@"f:\\abc.txt", test, Encoding.Default);

            string tmp = string.Format("{0}\\tmp", Application.StartupPath);

            //从FTP服务器上下载文件
            int rtv1 = gFtpHelperFile.Get("EN90010118250098_white_ap.txt", tmp, "EN90010118250098_white_ap.txt");
           


            //print_bwo_info();
            //gDbHelperUpper.CloseDbConn();

            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);

            //add_log_info(LogInfoType.WARN, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.WARN, "11111111111111111111", "Main", LogCategory.I);

            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);

            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);


            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.INFO, "11111111111111111111", "Main", LogCategory.I);
            //add_log_info(LogInfoType.EROR, "11111111111111111111", "Main", LogCategory.I);


            ////GetProcessThreadInfomation();
            //strGcMisc gm = new strGcMisc();
            //gDbHelperUpper.gc_misc_record_get_by_devid(-1, 1, ref gm);
            //Logger.Trace(LogInfoType.EROR, "this is elephant speaking!", "Main", LogCategory.I);

            //add_log_info(LogInfoType.EROR, null, "Main", LogCategory.I);

            //byte[] aa = new byte[3];

            //try
            //{
            //    byte b = aa[5];
            //}
            //catch (Exception ee)
            //{
            //    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
            //}        

            //int a = 0;
            //int c = 10 / a;

            //Thread t = new Thread(new ThreadStart(() =>
            // {
            //     int a = 0;
            //     int c = 10 / a;
            // }));

            // t.IsBackground = true;
            // t.Start();


            // ZipFile(@"e:\test.txt", @"e:\", @"test11");


            // gDbHelperUpper.gc_imsi_action_record_delete(bwType.BWTYPE_WHITE, 1);

            string info = "";
            List<strBwList> list = new List<strBwList>();
            string fileFullPath = @"E:\各种资料\C#-Project\ScannerBackgrdServer\ScannerBackgrdServer\ScannerBackgrdServer\bin\Debug\tmp\EN90010118250098_white_ap.txt";

            //更新到数据库中
            int rtv = Get_BwList_From_File(fileFullPath, bwType.BWTYPE_WHITE, ref list, ref info);



            //rtv = gDbHelperLower.gc_imsi_action_record_delete(bwType.BWTYPE_WHITE, 1);


            // 2018-11-06
            //rtv = gDbHelperLower.gc_imsi_action_record_insert_batch(list, 1,0);

        }

        private void button4_Click(object sender, EventArgs e)
        {
            //gFtpHelper = new FtpHelper(gDataController.StrFtpIpAddr,"123",gDataController.StrFtpUserId,gDataController.StrFtpUserPsw,int.Parse(gDataController.StrFtpPort));            

            int code = gFtpHelperImsi.SendNoop();
            MessageBox.Show(code.ToString());
        }

        private void button6_Click(object sender, EventArgs e)
        {
            GC.Collect();
        }

        private void button7_Click(object sender, EventArgs e)
        {        
            MessageBox.Show("长度：" + richTextBoxLog.Text.Length);
            richTextBoxLog.Text = "";
            //Ap_LTE.heartbeatMsgNum = 0;
            //Ap_LTE.imsiMsgNum = 0;
            DeviceManager.recvDeciveMsgNum = 0;
            DeviceManager.handleDeciveMsgNum = 0;
        }

        private void button5_Click(object sender, EventArgs e)
        {
           // gFtpHelperImsi.Connect();
            gFtpHelperImsi.Put(@textBox1.Text);

            //gFtpHelper.Put(@"D:\\ucl.chm");           

            //gFtpHelper.Put(@textBox1.Text);

            //byte[] firstString = System.Text.Encoding.Default.GetBytes("123456789ABCDEF\n");

            //using (MemoryStream ms = new MemoryStream())
            //{
            //    // Write the first string to the stream.  
            //    ms.Write(firstString, 0, firstString.Length);

            //    // Set the position to the beginning of the stream.  
            //    ms.Seek(0, SeekOrigin.Begin);

            //    gFtpHelperImsi.Put(@"123456789.txt",ms);
            //}
        }

        private void button8_Click(object sender, EventArgs e)
        {
            //gFtpHelper.Get(@"123.jpg", @"F:\\333", @"123.jpg");
            gFtpHelperImsi.Get("12*", @"F:\\333");
        }
     
        private void button9_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            strCaptureQuery cq = new strCaptureQuery();

            cq.affDeviceId = 2;
            //cq.imsi = "1";
            cq.RmDupFlag = 0;
            cq.topCount = 5;

            //cq.bwFlag = bwType.BWTYPE_BLACK;
            cq.timeStart = "2018-05-29 12:34:56";
            cq.timeEnded = "2018-06-29 12:34:56";


            //int ret  = gDbHelperUpper.update_info_record_insert("f1d63db8b273b92b51339c78f8d04227", "1.tar.gz","x.y.z");

            int ret = gDbHelperUpper.capture_record_entity_query(ref dt,cq, gDicDevId_Imsi_Des, gDicDevId_Station_DevName);

            string str;
            foreach (DataRow dr in dt.Rows)
            {
                str = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i == (dt.Columns.Count - 1))
                    {
                        str += dr[i].ToString();
                    }
                    else
                    {
                        str += dr[i].ToString() + " -- ";
                    }
                }

                MessageBox.Show(str); 
            }


            //DataTable dt = new DataTable();
            //int ret = gDbHelperUpper.user_record_entity_get(ref dt);

            //string str;
            //foreach (DataRow dr in dt.Rows)
            //{
            //    str = "";
            //    for (int i = 0; i < dt.Columns.Count; i++)
            //    {
            //        if (i == (dt.Columns.Count - 1))
            //        {
            //            str += dr[i].ToString();
            //        }
            //        else
            //        {
            //            str += dr[i].ToString() + " -- ";
            //        }
            //    }

            //    //MessageBox.Show(str); 
            //}

            ret = gDbHelperUpper.user_record_insert("root1", "1234", "asdadfadsfdaf");

            ret = gDbHelperUpper.user_record_check("root1", "1234");

            ret = gDbHelperUpper.user_record_update("root1", "1234", "123456");

            ret = gDbHelperUpper.roletype_record_entity_get(ref dt);
            foreach (DataRow dr in dt.Rows)
            {
                str = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i == (dt.Columns.Count - 1))
                    {
                        str += dr[i].ToString();
                    }
                    else
                    {
                        str += dr[i].ToString() + " -- ";
                    }
                }

                //MessageBox.Show(str);
            }

            //ret = gDbHelperUpper.roletype_record_insert("elephant", "12345");
            //ret = gDbHelperUpper.roletype_record_insert("SuperAdmin", "12345");

            //ret = gDbHelperUpper.roletype_record_delete("elephant");

            ret = gDbHelperUpper.role_record_entity_get(ref dt);
            foreach (DataRow dr in dt.Rows)
            {
                str = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i == (dt.Columns.Count - 1))
                    {
                        str += dr[i].ToString();
                    }
                    else
                    {
                        str += dr[i].ToString() + " -- ";
                    }
                }

                //MessageBox.Show(str);
            }

            //ret = gDbHelperUpper.role_record_insert("aaaaa", "Administrator", "2015-04-22", "2015-04-26", "adfad");

            ret = ret = gDbHelperUpper.role_record_delete("aaaaa");


            ret = gDbHelperUpper.privilege_record_entity_get(ref dt);
            foreach (DataRow dr in dt.Rows)
            {
                str = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i == (dt.Columns.Count - 1))
                    {
                        str += dr[i].ToString();
                    }
                    else
                    {
                        str += dr[i].ToString() + " -- ";
                    }
                }

                //MessageBox.Show(str);
            }


            //ret = gDbHelperUpper.privilege_record_insert("111", "111", "111");

            ret = gDbHelperUpper.privilege_record_delete("111");


            ret = gDbHelperUpper.userrole_record_entity_get(ref dt);
            foreach (DataRow dr in dt.Rows)
            {
                str = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i == (dt.Columns.Count - 1))
                    {
                        str += dr[i].ToString();
                    }
                    else
                    {
                        str += dr[i].ToString() + " -- ";
                    }
                }

                //MessageBox.Show(str);
            }

            ret = gDbHelperUpper.userrole_record_insert("root1", "RoleAdmin", "ssss");

            ret = gDbHelperUpper.userrole_record_delete("root12", "RoleAdmin");


            ret = gDbHelperUpper.roleprivilege_record_entity_get(ref dt);
            foreach (DataRow dr in dt.Rows)
            {
                str = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i == (dt.Columns.Count - 1))
                    {
                        str += dr[i].ToString();
                    }
                    else
                    {
                        str += dr[i].ToString() + " -- ";
                    }
                }

                MessageBox.Show(str);
            }

            ret = gDbHelperUpper.roleprivilege_record_insert("RoleAdmin", "1,2,3,4,5,6,7,8,9", "adsfadfd");


            //ret = gDbHelperUpper.roleprivilege_record_insert("RoleSO", "1,2,3,4,5,6,7,8,9", "adsfadfd");

            //ret = gDbHelperUpper.roleprivilege_record_update("RoleSO", "1,2,3,4,5,6,7,8,9,10,11", "adsfadfd");

            ret = gDbHelperUpper.roleprivilege_record_delete("RoleSO");


            ret = gDbHelperUpper.domain_record_insert("深圳", "设备", 0, "this is SZ");
            ret = gDbHelperUpper.domain_record_insert("东莞", "设备", 0, "this is DG");

            ret = gDbHelperUpper.domain_record_insert("福田", "设备.深圳", 0, "this is FT");
            ret = gDbHelperUpper.domain_record_insert("南山", "设备.深圳", 0, "this is NS");
            ret = gDbHelperUpper.domain_record_insert("城区", "设备.东莞", 0, "this is NS");

            ret = gDbHelperUpper.domain_record_insert("中心广场", "设备.深圳.福田", 0, "this is NS");
            ret = gDbHelperUpper.domain_record_insert("莲花山", "设备.深圳.福田", 0, "this is NS");

            ret = gDbHelperUpper.domain_record_insert("西北监控", "设备.深圳.福田.中心广场", 1, "this is elephant speaking");

            //ret = gDbHelperUpper.domain_record_delete("设备.广州");
            //ret = gDbHelperUpper.domain_record_delete("设备");


            //ret = gDbHelperUpper.domain_record_entity_get(ref dt,1);
            //foreach (DataRow dr in dt.Rows)
            //{
            //    str = "";
            //    for (int i = 0; i < dt.Columns.Count; i++)
            //    {
            //        if (i == (dt.Columns.Count - 1))
            //        {
            //            str += dr[i].ToString();
            //        }
            //        else
            //        {
            //            str += dr[i].ToString() + " -- ";
            //        }
            //    }

            //    //MessageBox.Show(str);
            //}

            //ret = gDbHelperUpper.domain_record_rename("设备.深圳", "设备.广州");


            ret = gDbHelperUpper.userdomain_record_insert("root", "1,2,3,4", "aaaaaaaaaa");
            ret = gDbHelperUpper.userdomain_record_insert("engi", "1,2,3,4", "aaaaaaaaaa");

            //ret = gDbHelperUpper.userdomain_record_delete("root");


            ret = gDbHelperUpper.userdomain_record_entity_get(ref dt);
            foreach (DataRow dr in dt.Rows)
            {
                str = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i == (dt.Columns.Count - 1))
                    {
                        str += dr[i].ToString();
                    }
                    else
                    {
                        str += dr[i].ToString() + " -- ";
                    }
                }

                //MessageBox.Show(str);
            }



            // ret = gDbHelperUpper.device_record_insert(9, "LTE-FDD1");
            // ret = gDbHelperUpper.device_record_insert(9, "LTE-FDD2");
            // ret = gDbHelperUpper.device_record_insert(9, "LTE-FDD3");

            //ret = gDbHelperUpper.device_record_delete(9, "LTE-FDD3");


            ret = gDbHelperUpper.device_record_insert(9, "LTE-FDD3-dd", "LTE-FDD");


            strDevice dev = new strDevice();
            dev.sn = "EN1234567890";
            dev.netmask = "255.255.255.0";
            dev.mode = "中国人民解放军";
            dev.online = "1";
            dev.lastOnline = DateTime.Now.ToString();
            dev.isActive = "1";
            dev.ipAddr = "172.17.0.210";
            dev.port = "56789";
            ret = gDbHelperUpper.device_record_update(9, "LTE-FDD2", dev);



            ret = gDbHelperUpper.device_record_entity_get(ref dt);
            foreach (DataRow dr in dt.Rows)
            {
                str = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i == (dt.Columns.Count - 1))
                    {
                        str += dr[i].ToString();
                    }
                    else
                    {
                        str += dr[i].ToString() + " -- ";
                    }
                }

                MessageBox.Show(str);
            }

        }

        private void button10_Click(object sender, EventArgs e)
        {
            //Stopwatch sw = new Stopwatch();
            //sw.Start();


            //for (int i = 0; i < 10*10000; i++)
            //{
            //    gDicRemoveDup.Add("12345" + i.ToString(), DateTime.Now);
            //}

            //sw.Stop();
            //TimeSpan ts2 = sw.Elapsed;
            //MessageBox.Show("Stopwatch总共花费ms : " + ts2.TotalMilliseconds.ToString());

            ////gDicRemoveDup.Add("123450", DateTime.Now);

            //sw.Restart();

            //string str = "";
            //if (gDicRemoveDup.ContainsKey("123450"))
            //{
            //    str = "ContainsKey";
            //}
            //else
            //{
            //    str = "NOContainsKey";
            //}

            //sw.Stop();
            //TimeSpan ts22 = sw.Elapsed;
            //MessageBox.Show(str + "Stopwatch总共花费ms : " + ts22.TotalMilliseconds.ToString());

            //int ret = 0;
            //ret = gDbHelperUpper.domain_record_insert("深圳", "设备", 0, "this is SZ");
            //ret = gDbHelperUpper.domain_record_insert("东莞", "设备", 0, "this is DG");

            //ret = gDbHelperUpper.domain_record_insert("福田", "设备.深圳", 0, "this is FT");
            //ret = gDbHelperUpper.domain_record_insert("南山", "设备.深圳", 0, "this is NS");
            //ret = gDbHelperUpper.domain_record_insert("城区", "设备.东莞", 0, "this is NS");

            //ret = gDbHelperUpper.domain_record_insert("中心广场", "设备.深圳.福田", 0, "this is NS");
            //ret = gDbHelperUpper.domain_record_insert("莲花山", "设备.深圳.福田", 0, "this is NS");

            //ret = gDbHelperUpper.domain_record_insert("西北监控", "设备.深圳.福田.中心广场", 1, "this is elephant speaking");

            //string nameFullPath = "{guangdong.shenzhen.nanshan.abc.def.123456789}";

            //int i = nameFullPath.LastIndexOf(".");
            //int j = nameFullPath.LastIndexOf("}");

            //Name = nameFullPath.Substring(i + 1, j - i - 1);
            //nameFullPath = nameFullPath.Substring(1, i - 1);  

            //string nameFullPath = "guangdong.123456789";
            //int i = nameFullPath.LastIndexOf(".");

            //string name1 = nameFullPath.Substring(i + 1);
            //string name2 = nameFullPath.Substring(0, i - 1);

            gDbHelperUpper.ap_status_record_exist(2);

            gDbHelperUpper.device_record_if_rename(9, "电信FDD", "联通W");

            //strBwList list = new strBwList();
            //list.imei = "0123456789ABCDE";
            //list.bwFlag = bwType.BWTYPE_WHITE;
            //list.time = DateTime.Now.ToString();

            //list.imsi = "460000123456789";
            //list.bwFlag = bwType.BWTYPE_WHITE;
            //list.rbStart = "0";
            //list.rbEnd = "123";
            //list.time = DateTime.Now.ToString();

            //int rtv = gDbHelperUpper.bwlist_record_insert(list, 4);

            //int rtv = gDbHelperUpper.bwlist_record_imei_delete("0123456789ABCDE", bwType.BWTYPE_BLACK, 4);

            //int rtv = gDbHelperUpper.bwlist_record_imsi_delete("460000123456789", bwType.BWTYPE_BLACK, 4);


            //int rtv = gDbHelperUpper.roleprivilege_record_insert("RoleSO", "1,2,3,4,5,6,7,8,9", "afafadf");


            int rtv = gDbHelperUpper.userdomain_record_insert("ABC", "1,3,9,12", "adfadfa");

            List<int> listDevId = new List<int>();
            //rtv = gDbHelperUpper.domain_record_device_id_list_get("设备.深圳.福田.中心广场.西北监控",ref listDevId);

            rtv = gDbHelperUpper.domain_record_device_id_list_get("设备", ref listDevId);

            //rtv = gDbHelperUpper.ap_general_para_record_insert(1);

            strApGenPara apGP = new strApGenPara();
            apGP.mode = "GSM";
            apGP.NTP = "172.17.0.183";
            apGP.periodtac = "123";
            apGP.tac = "46000";
            apGP.earfcnul = "38520";

            //rtv = gDbHelperUpper.ap_general_para_record_update(1, apGP);

            rtv = gDbHelperUpper.ap_general_para_record_get_by_devid(1, ref apGP);


            DataTable dt = new DataTable();
            int ret = gDbHelperUpper.bwlist_record_entity_get(ref dt);
            foreach (DataRow dr in dt.Rows)
            {
                string str = "";
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (i == (dt.Columns.Count - 1))
                    {
                        str += dr[i].ToString();
                    }
                    else
                    {
                        str += dr[i].ToString() + " -- ";
                    }
                }

                MessageBox.Show(str);
            }
        }                       
       
        private void button11_Click(object sender, EventArgs e)
        {
            if (button11.Text.Contains("停住"))
            {
                stopFlag = true;
                button11.Text = "开始显示";
            }
            else if (button11.Text.Contains("开始"))
            {
                stopFlag = false;
                button11.Text = "停住显示";
            }
            else
            {

            }

        }

        private static void OnTimedEvent(object source, ElapsedEventArgs e, int a)
        {
            MessageBox.Show("The Elapsed event was raised" + a.ToString());
        }

        private void button12_Click(object sender, EventArgs e)
        {

            string mm = string.Format("123{0,-10}--asdfasdf","00000");


            MessageBox.Show(mm.ToString());

            string temp = string.Empty;
            UTF8Encoding utf8 = new UTF8Encoding();
            byte[] encodedBytes = utf8.GetBytes("中国");
            foreach (byte b in encodedBytes)
            {
                temp += "%" + b.ToString("X");
            }
            MessageBox.Show(temp);


            List<int> list = new List<int>();

            get_level_list(ref list, int.Parse(DataController.StrDbBatchUpdateRecordsLevel));

            try
            {
                int.Parse(textBox1.Text);
            }
            catch(Exception ee)
            {
                MessageBox.Show(ee.Message + ee.StackTrace.ToString());
                return;
            }

            int dd = get_level_list_value(list, int.Parse(textBox1.Text));

            // MessageBox.Show(dd.ToString());


            gDbHelperUpper.domain_record_update_des("设备.深圳.福田.中心广场", "adfadf");


            gDbHelperUpper.domain_record_rename("设备.深圳.福田.中心广场", "设备.深圳.福田.中心广场");
        }

        private void button13_Click(object sender, EventArgs e)
        {
            strGcMisc gm = new strGcMisc();
            // gm.bOrmType = "1";
            // gm.bSMSContentLen = "23";
            //gm.bUeContent= "adsfadfadfa";

            //gDbHelperUpper.gc_misc_record_update(0, 1, gm);

            gDbHelperUpper.gc_misc_record_get_by_devid(0, 1,ref  gm);

            gDbHelperUpper.gc_misc_record_insert(0, 1);
            gDbHelperUpper.gc_misc_record_insert(1, 1);


            List<strGcImsiAction> ll = new List<strGcImsiAction>();
           // gDbHelperUpper.gc_imsi_action_record_get_by_devid(0, 1, ref ll);

            strGcImsiAction gia = new strGcImsiAction();
            gia.bIMSI = "46001123456788";
            gia.bUeActionFlag = "1";

            //gDbHelperUpper.gc_imsi_action_record_insert(0, 1, gia);

            gia.bIMSI = "46001123456787";
            gia.bUeActionFlag = "1";

            //gDbHelperUpper.gc_imsi_action_record_insert(0, 1, gia);


            gDbHelperUpper.gc_param_config_record_delete(0, 1);
            strGcParamConfig gpr1 = new strGcParamConfig();
            gDbHelperUpper.gc_param_config_record_get_by_devid(0, 1, ref gpr1);

            strGcParamConfig gpr = new strGcParamConfig();

            gpr.bWorkingMode = "1";         //工作模式。1：侦码模式；3：驻留模式(GSM/CDMA支持)            
            gpr.bPLMNId = "331";              //PLMN标志。ASCII字符           
            gpr.bRxGain = "12";              //保留字段。Unit: dB

           
            gDbHelperUpper.gc_param_config_record_update(0, 1,gpr);

            // gDbHelperUpper.gc_param_report_record_insert(0, 1);
            //gDbHelperUpper.gc_param_report_record_insert(1, 1);

            gDbHelperUpper.gc_nb_cell_record_delete(0, 1);

            strGcNbCell str = new strGcNbCell();
            strGcNbCellItem item = new strGcNbCellItem();

            str.bC2 = "122";
            str.bNbCellNum = "33";
            str.wTac = "345";
            str.wPhyCellId = "3667";

            item.bC2 = "1";
            item.cRSRP = "-9";
            item.wPhyCellId = "12";

            str.listItem = new List<strGcNbCellItem>();
            str.listItem.Add(item);
            str.listItem.Add(item);
            str.listItem.Add(item);
            str.listItem.Add(item);

            List<strGcNbCell> listBig = new List<strGcNbCell>();

            listBig.Add(str);
            listBig.Add(str);
            listBig.Add(str);
            listBig.Add(str);
            listBig.Add(str);

            gDbHelperUpper.gc_nb_cell_record_insert_batch(0, 1, listBig);

            List<strGcNbCell> listTest = new List<strGcNbCell>();
            gDbHelperUpper.gc_nb_cell_record_get_by_devid(0, 1, ref listTest);

            //int rtv;
            //string tmp = "144430757";
            //Int32 i = Convert.ToInt32(tmp);

            //StringBuilder ss = new StringBuilder(10);
            //ss.Append("asdfadf\n");
            //ss.Append("asdfadf\n");
            //ss.Append("asdfadf\n");

            //byte[] outData = System.Text.Encoding.Default.GetBytes(ss.ToString());

            //Stopwatch sw = new Stopwatch();
            //sw.Start();

            //strImsiParse ip = new strImsiParse();

            //Location_And_Operator_Get("460003472179561", ref ip);


            ////Location_And_Operator_Get("460003472179562", ref ip);
            ////Location_And_Operator_Get("460003472179563", ref ip);
            ////Location_And_Operator_Get("460003472179564", ref ip);
            ////Location_And_Operator_Get("460003472179565", ref ip);
            ////Location_And_Operator_Get("460003472179566", ref ip);
            ////Location_And_Operator_Get("460003472179567", ref ip);
            ////Location_And_Operator_Get("460003472179568", ref ip);
            ////Location_And_Operator_Get("460003472179569", ref ip);
            ////Location_And_Operator_Get("460003472179570", ref ip);
            ////Location_And_Operator_Get("460003472179571", ref ip);
            ////Location_And_Operator_Get("460003472179572", ref ip);
            ////Location_And_Operator_Get("460003472179573", ref ip);
            ////Location_And_Operator_Get("460003472179574", ref ip);
            ////Location_And_Operator_Get("460003472179575", ref ip);
            ////Location_And_Operator_Get("460003472179576", ref ip);
            ////Location_And_Operator_Get("460003472179577", ref ip);
            ////Location_And_Operator_Get("460003472179578", ref ip);
            ////Location_And_Operator_Get("460003472179579", ref ip);
            ////Location_And_Operator_Get("460003472179580", ref ip);
            ////Location_And_Operator_Get("460003472179581", ref ip);
            ////Location_And_Operator_Get("460003472179582", ref ip);
            ////Location_And_Operator_Get("460003472179583", ref ip);
            ////Location_And_Operator_Get("460003472179584", ref ip);
            ////Location_And_Operator_Get("460003472179585", ref ip);
            ////Location_And_Operator_Get("460003472179586", ref ip);
            ////Location_And_Operator_Get("460003472179587", ref ip);

            //sw.Stop();
            //TimeSpan ts2 = sw.Elapsed;

            //string info1 = string.Format("Location_And_Operator_Get->Stopwatch总共花费:{0}ms,{1}{2}", ts2.TotalMilliseconds,ip.country,ip.location);
            //add_log_info(LogInfoType.INFO, info1, "Main", LogCategory.I);





            //gDbHelperUpper.ap_general_para_string_get_by_devid(1, ref tmp);

            //List<string> lst = new List<string>();
            //gDbHelperUpper.bwlist_record_md5sum_get(bwType.BWTYPE_WHITE, 1, ref lst);

            //lst.Sort();

            //Get_Md5_Sum(lst, 1, ref tmp);

            //byte[] data = null;
            //rtv = generate_ftp_byte(ref data, lst);
            //rtv = gFtpHelperFile.Put("dddddd.txt", data);


            ////从FTP服务器上下载文件
            //rtv = gFtpHelperFile.Get("1234.txt", Application.StartupPath, "1234.txt");


            //string info = "";
            //List<strBwList> list = new List<strBwList>();
            //string fileFullPath = string.Format("{0}\\{1}", Application.StartupPath, "1234.txt");

            ////更新到数据库中
            //rtv = Get_BwList_From_File(fileFullPath, bwType.BWTYPE_WHITE, ref list, ref info);

            //rtv = gDbHelperUpper.bwlist_record_bwflag_delete(bwType.BWTYPE_WHITE, 1);


            //rtv = gDbHelperUpper.bwlist_record_insert_batch(list, 1);

            //从FTP服务器上下载文件
            // rtv = gFtpHelperFile.Get("5678.txt", Application.StartupPath, "5678.txt");


            //string info = "";
            // List<strBwList> list = new List<strBwList>();
            //string fileFullPath = string.Format("{0}\\{1}", Application.StartupPath, "5678.txt");

            //更新到数据库中
            // rtv = Get_BwList_From_File(fileFullPath, bwType.BWTYPE_BLACK, ref list, ref info);

            // rtv = gDbHelperUpper.bwlist_record_bwflag_delete(bwType.BWTYPE_BLACK, 1);


            //  rtv = gDbHelperUpper.bwlist_record_insert_batch(list, 1);



            //StringWriter sw = new StringWriter();
            //XmlTextWriter xw = new XmlTextWriter(sw);

            //// Save Xml Document to Text Writter.
            //myXmlDoc.WriteTo(xw);

            //System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();

            //byte[] data = Encoding.UTF8.GetBytes(sw.ToString());

            //byte[] data;
            //using (MemoryStream ms = new MemoryStream())
            //{
            //    System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();
            //    xmlDoc.Load(@"F:\\test.xml");

            //    xmlDoc.Save(ms);
            //    data = ms.ToArray();
            //    int len = data.Length;

            //    StringWriter sw = new StringWriter();
            //    System.Xml.XmlTextWriter xw = new System.Xml.XmlTextWriter(sw);

            //    // Save Xml Document to Text Writter.
            //    xmlDoc.WriteTo(xw);
            //    byte[] data1 = Encoding.GetEncoding("GBK").GetBytes(sw.ToString()); //KO

            //    //byte[] data1 = Encoding.UTF8.GetBytes(sw.ToString());  //NO
            //    int len1 = data1.Length;
            //}
        }

        private void button14_Click(object sender, EventArgs e)
        {
            gCurLogInfoTypeIndex = (gCurLogInfoTypeIndex + 1) % 4;

            DataController.LogOutputLevel = (LogInfoType)gCurLogInfoTypeIndex;
            label3.Text = string.Format("当前级别:{0}", DataController.LogOutputLevel.ToString());
        }

        private void button16_Click(object sender, EventArgs e)
        {
            gCurLogInfoTypeIndex = (gCurLogInfoTypeIndex + 1) % 4;

            DataController.LogOutputLevel = (LogInfoType)gCurLogInfoTypeIndex;
            label5.Text = string.Format("当前级别:{0}", DataController.LogOutputLevel.ToString());
        }

        private void button16_MouseEnter(object sender, EventArgs e)
        {
            toolTip1.ShowAlways = true;
            toolTip1.SetToolTip(this.button16, "切换设置调试Level.");
        }

        private void button15_Click(object sender, EventArgs e)
        {
            string info = string.Format("heartbeatMsgNum = {0},imsiMsgNum = {1},recvImsiFromApCtrlCount = {2},saveImsiToDbCount = {3}", Ap_LTE.heartbeatMsgNum, Ap_LTE.imsiMsgNum, recvImsiFromApCtrlCount, saveImsiToDbCount);
            Logger.Trace(LogInfoType.WARN, info, "Main", LogCategory.I);


            //strMsSms call = new strMsSms();

            //call.time = DateTime.Now.ToString();

            //for (int i = 0; i < 20; i++)
            //{
            //    call.imsi = "460000000" + i.ToString();
            //    call.number = "138250024" + i.ToString();
            //    call.data = "中国人民解放军" + i.ToString();
            //    call.codetype = "11";

            //    gDbHelperRadio.send_ms_sms_record_insert(-1, 1, call);
            //}

            strMsSmsHistoryQuery query = new strMsSmsHistoryQuery();
            query.imsi = "4600";
            query.number = "2410";

            gDbHelperRadio.send_ms_sms_get_by_devid(-1, ref query, gDicDevId_Station_DevName);


            //    private void button15_Click(object sender, EventArgs e)
            //    {
            //        string info = string.Format("h={0},rA={1},sM={2}nS={3},rAC={4},s={5},rM={6},sA={7}",
            //            Ap_LTE.heartbeatMsgNum,
            //            ApBase.recvApImsiMsgNum, ApBase.sendMainImsiMsgNum,ApBase.noSendMainImsiNum,
            //recvImsiFromApCtrlCount, saveImsiToDbCount,
            //            AppBase.recvMainImsiMsgNum,AppBase.sendAppImsiMsgNum);

            //        Logger.Trace(LogInfoType.WARN, info, "Main", LogCategory.I);
            //        //MessageBox.Show(info);
            //    }

        }

        /// <summary>
        /// 打印各种统计信息
        /// </summary>
        private void print_all_info()
        {
            string info = string.Format("h={0},rA={1},sM={2}nS={3},rM={4},sA={5}\n",
                Ap_LTE.heartbeatMsgNum,
                ApBase.recvApImsiMsgNum, 
                ApBase.sendMainImsiMsgNum, 
                ApBase.noSendMainImsiNum,                
                AppBase.recvMainImsiMsgNum, 
                AppBase.sendAppImsiMsgNum);
            
            info += string.Format("recvImsiFromApCtrlCount = {0},saveImsiToDbCount = {1},gDicImsiParse.Count = {2}\n",
                    recvImsiFromApCtrlCount,
                    saveImsiToDbCount,
                    gDicImsiParse.Count);

            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

            return;
        }

        #endregion

        #region 显示运行时间

        ///<summary>
        ///由秒数得到日期几天几小时。。。
        ///</summary
        ///<param name="t">秒数</param>
        ///<returns>几天几小时几分几秒</returns>
        public static string parseTimeSeconds(long t)
        {
            string r = "";
            int day = 0;
            int hour = 0;
            int minute = 0;
            int second = 0;

            if (t >= 86400) //天,
            {
                day = Convert.ToInt16(t / 86400);
                hour = Convert.ToInt16((t % 86400) / 3600);
                minute = Convert.ToInt16((t % 86400 % 3600) / 60);
                second = Convert.ToInt16(t % 86400 % 3600 % 60);                                         
            }
            else if (t >= 3600)//时,
            {
                hour = Convert.ToInt16(t / 3600);
                minute = Convert.ToInt16((t % 3600) / 60);
                second = Convert.ToInt16(t % 3600 % 60);                
            }
            else if (t >= 60)//分
            {
                minute = Convert.ToInt16(t / 60);
                second = Convert.ToInt16(t % 60);               
            }
            else
            {
                second = Convert.ToInt16(t);               
            }

            if (day > 0)
            {
                r = string.Format("{0} {1:D2}:{2:D2}:{3:D2}", day, hour, minute, second);
            }
            else
            {
                r = string.Format("{0:D2}:{1:D2}:{2:D2}",hour, minute, second);
            }

            return r;
        }

        //private long runTimeCnt = 86400 - 10;
        private long runTimeCnt = 0;
        private void timer1_Tick(object sender, EventArgs e)
        {
            runTimeCnt++;
            
            if (DataController.StrAppDebugMode.Equals("1"))
            {
                //this.Text = string.Format("Scanner后台服务器:{0}", label1.Text);
                label6.Text = parseTimeSeconds(runTimeCnt);
            }
            else
            {
                label1.Text = parseTimeSeconds(runTimeCnt);
            }

            if ((runTimeCnt % 300) == 0)
            {
                Logger.Trace(LogInfoType.INFO, "ClearMemory...", "Main", LogCategory.I);
                add_log_info(LogInfoType.INFO, "ClearMemory...", "Main", LogCategory.I);
                ClearMemory();
            }
            
            //if ((runTimeCnt % 8) == 0)
            //{
            //    add_log_info(LogInfoType.EROR, "gDbHelperUpper.CloseDbConn", "Main", LogCategory.I);
            //    gDbHelperUpper.CloseDbConn();
            //}

            //for (int i = 0; i < 50; i++)
            //{
            //    Logger.Trace(LogInfoType.EROR, "sdfadsffadf", "Main", LogCategory.I);
            //   // add_log_info(LogInfoType.EROR, "sdfadsffadf", "Main", LogCategory.I);

            //    Thread.Sleep(20);
            //}
        }

        #endregion

        #region 自定义控件

        public class TLabel : Label
        {
            private float _angle;

            [Browsable(true)]
            [Description("The angle to rotate the text"), Category("Appearance"), DefaultValue("0")]
            public float Angle
            {
                get
                {
                    return _angle;
                }

                set
                {
                    _angle = value;
                    Invalidate();
                }
            }

            public TLabel()
            {
                this.AutoSize = false;
                this.BackColor = Color.Transparent;
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                Graphics g = e.Graphics;
                float w = Width;
                float h = Height;

                //将graphics坐标原点移到矩形中心点
                g.TranslateTransform(w / 2, h / 2);
                g.RotateTransform(Angle);

                SizeF sz = g.MeasureString(Text, this.Font);
                float x = -sz.Width / 2;
                float y = -sz.Height / 2;
                Brush brush = new SolidBrush(this.ForeColor);
                g.DrawString(Text, this.Font, brush, new PointF(x, y));
            }
        }

        private TLabel tt = new TLabel();



        #endregion

        #region 时间段控制

        /// <summary>
        /// 判读当前时间是否落在dt1和dt2之间
        /// </summary>
        /// <param name="dt1"></param>
        /// <param name="dt2"></param>
        /// <returns>
        /// true  : 落在
        /// false : 不落在
        /// </returns>
        private bool currentTime_In_Range(string dt1, string dt2)
        {
            string tmp = DateTime.Now.ToString("HH:mm:ss");

            if (string.Compare(dt1, tmp) <= 0 && string.Compare(tmp, dt2) <= 0)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 判读当前时间是否落在str中的各个时间段里面
        /// </summary>
        /// <param name="str"></param>
        /// <returns>
        /// true  : 落在
        /// false : 不落在
        /// </returns>
        private bool check_location_in_range(strSetRadio str)
        {
            if (str.activeTime1Start != "" && str.activeTime1Ended != "")
            {
                if (currentTime_In_Range(str.activeTime1Start, str.activeTime1Ended))
                {
                    return true;
                }
            }

            if (str.activeTime2Start != "" && str.activeTime2Ended != "")
            {
                if (currentTime_In_Range(str.activeTime2Start, str.activeTime2Ended))
                {
                    return true;
                }
            }

            if (str.activeTime3Start != "" && str.activeTime3Ended != "")
            {
                if (currentTime_In_Range(str.activeTime3Start, str.activeTime3Ended))
                {
                    return true;
                }
            }

            if (str.activeTime4Start != "" && str.activeTime4Ended != "")
            {
                if (currentTime_In_Range(str.activeTime4Start, str.activeTime4Ended))
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 获取当前射频的开关状态
        /// </summary>
        /// <param name="str"></param>
        /// <returns>
        /// true  : 开启
        /// false : 关闭
        /// </returns>
        private bool getRadio_Status(strSetRadio str)
        {
            if (str.devMode == devMode.MODE_GSM)
            {
                if (str.rfEnable == "0")
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                if (str.RADIO == "0")
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
        }

        /// <summary>
        /// 下发命令设置AP的射频
        /// </summary>
        /// <param name="str"></param>
        /// <param name="swValue"></param>
        /// <returns></returns>
        private int setRadio_2_AP(strSetRadio str,int swValue)
        {
            string info = "";
            InterModuleMsgStruct imms = new InterModuleMsgStruct();


            if (string.IsNullOrEmpty(str.ipAddr) || string.IsNullOrEmpty(str.port) || string.IsNullOrEmpty(str.innerType))
            {
                info = string.Format("setRadio_2_AP:ipAddr,port or innerType are NULL.");
                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                return -1;
            }

            if (!string.IsNullOrEmpty(str.sn))
            {
                imms.ApInfo.SN = str.sn;
            }

            if (!string.IsNullOrEmpty(str.name))
            {
                imms.ApInfo.Fullname = str.name;
            }

            if (!string.IsNullOrEmpty(str.ipAddr))
            {
                imms.ApInfo.IP = str.ipAddr;
            }

            if (!string.IsNullOrEmpty(str.port))
            {
                imms.ApInfo.Port = int.Parse(str.port);
            }

            if (!string.IsNullOrEmpty(str.innerType))
            {
                imms.ApInfo.Type = str.innerType;
            }

            imms.MsgType = MsgType.CONFIG.ToString();

            info = string.Format("Send setRadio_2_AP -> [{0}]:[{1}]:[{2}]", imms.ApInfo.Fullname, imms.ApInfo.IP, imms.ApInfo.Port);
            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

            imms.Body.type = Main2ApControllerMsgType.ApSetRadio;
            imms.Body.dic = new Dictionary<string, object>();

            switch (str.devMode)
            {
                case devMode.MODE_GSM:
                    {
                        #region GSM

                        //"dic":
                        //{     
                        //    "carry":          载波信息 0/1
                        //    "rfEnable":       射频使能(0,关闭；1，打开)
                        //	  "rfFreq":         信道号
                        //	  "rfPwr":          发射功率衰减值
                        //}

                        imms.Body.dic.Add("carry", str.carry);
                        imms.Body.dic.Add("rfEnable", swValue.ToString());
                        imms.Body.dic.Add("rfFreq", str.rfFreq);
                        imms.Body.dic.Add("rfPwr", str.rfPwr);

                        break;

                        #endregion
                    }
                case devMode.MODE_GSM_V2:
                case devMode.MODE_CDMA:
                    {
                        #region CDMA/GSM-V2                                     

                        //"dic":
                        //{     
                        //    "carry":     "载波信息 0/1" ,CDMA为"0"
                        //    "RADIO":     射频使能(0,关闭；1，打开)
                        //}

                        imms.Body.dic.Add("carry", str.carry);
                        imms.Body.dic.Add("RADIO", swValue.ToString());                        

                        break;

                        #endregion
                    }                                
                case devMode.MODE_TD_SCDMA:
                    {
                        break;
                    }
                case devMode.MODE_WCDMA:
                case devMode.MODE_LTE_FDD:
                case devMode.MODE_LTE_TDD:
                    {
                        #region LTE

                        //"dic":
                        //{     
                        //    "active_mode":   "1(start), 2(stop)，3(reboot,本消息不用)"
                        //    "mode":          "1:scanner mode 2: audit mode"
                        //}

                        if (swValue == 1)
                        {
                            imms.Body.dic.Add("active_mode", "1");
                        }
                        else
                        {
                            imms.Body.dic.Add("active_mode", "2");
                        }
                        
                        imms.Body.dic.Add("mode", str.bootMode);

                        break;

                        #endregion
                    }
                case devMode.MODE_UNKNOWN:
                    {
                        break;
                    }
            }          

            //发送给ApCtrl
            Send_Msg_2_ApCtrl_Lower(imms);

            return 0;
        }
        
        private LogInfoType srIT = LogInfoType.INFO;

        /// <summary>
        /// 用于记录设备首次进入两个时间段时的射频状态
        /// string = ipAddr.port.carry
        /// bool = true(射频开启),false(射频关闭)
        /// </summary>
        private static Dictionary<string, bool> gDicSetRadioFirstStatus = new Dictionary<string, bool>();               

        /// <summary>
        /// 用于处理射频设置的线程
        /// </summary>
        /// <param name="obj"></param>
        private void thread_for_set_radio(object obj)
        {            
            /*
             * 用于修复mysql连接的空闲时间超过8小时后，MySQL自动断开该连接的问题
             * wait_timeout = 8*3600
             * 即每隔fix_for_wait_timeout的时间（秒数）就访问一下数据库
             */
            int fix_for_wait_timeout = 60; //10*60;

            int rtv;
            int reConnCnt = 0;

            bool radioFlag, firstFlag;
            bool locationInSideFlag = false;

            string info = "";

            DateTime startTimeConn = System.DateTime.Now;
            DateTime endTimeConn = System.DateTime.Now;
            TimeSpan tsConn = endTimeConn.Subtract(startTimeConn);

            /*
             * 用于多久一次获取射频参数
             */
            int Radio_Para_Get_Time = 58; //60;

            DateTime startTimeRadio = System.DateTime.Now;
            DateTime endTimeRadio = System.DateTime.Now;
            TimeSpan tsRadio = endTimeRadio.Subtract(startTimeRadio);

            Stopwatch sw = new Stopwatch();
            List<strSetRadio> gListSetRadio = new List<strSetRadio>();     

            while (true)
            {          
                Thread.Sleep(50);
                
                try
                {
                    #region 防止自动断开该连接的问题

                    endTimeConn = System.DateTime.Now;
                    tsConn = endTimeConn.Subtract(startTimeConn);

                    if (tsConn.TotalSeconds >= fix_for_wait_timeout)
                    {
                        // 2018-08-09
                        re_connection_db(ref gDbHelperRadio, "gDbHelperRadio", ref reConnCnt);

                        Thread.Sleep(5);
                        if (gDbHelperRadio.MyDbConnFlag)
                        {
                            List<string> listAllTbl = new List<string>();
                            listAllTbl = gDbHelperRadio.Get_All_ColumnName("user");
                        }

                        startTimeConn = System.DateTime.Now;
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    startTimeConn = System.DateTime.Now;
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }

                try
                {
                    #region 获取所有AP的射频参数,并进行处理

                    endTimeRadio = System.DateTime.Now;
                    tsRadio = endTimeRadio.Subtract(startTimeRadio);

                    if ((tsRadio.TotalSeconds >= Radio_Para_Get_Time) && (DateTime.Now.Second == 0))
                    {
                        if (gDbHelperRadio.MyDbConnFlag)
                        {
                            #region 获取所有AP的射频参数
                            
                            sw.Start();

                            rtv = gDbHelperRadio.device_set_radio_info_get(ref gListSetRadio);

                            sw.Stop();
                            TimeSpan ts2 = sw.Elapsed;

                            if ((int)RC.SUCCESS != rtv)
                            {
                                info = string.Format("device_set_radio_info_get出错：{0}", gDbHelperImsi.get_rtv_str(rtv));
                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            }
                            else
                            {
                                info = string.Format("device_set_radio_info_get,总共花费:{0}ms", Math.Ceiling(ts2.TotalMilliseconds));
                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                            }

                            #endregion

                            #region 处理射频时段的控制

                            #region old

                            //if (!string.IsNullOrEmpty(str.activeTime1Start) && !string.IsNullOrEmpty(str.activeTime2Start))
                            //{
                            //    #region 设置了两个时间段

                            //    ts1Flag = currentTime_In_Range(str.activeTime1Start, str.activeTime1Ended);
                            //    ts2Flag = currentTime_In_Range(str.activeTime2Start, str.activeTime2Ended);
                            //    if (ts1Flag || ts2Flag)
                            //    {
                            //        // 落在了两个时间段里面
                            //        locationTwoFlag = true;

                            //        // 初次状态保存
                            //        if (!gDicSetRadioFirstStatus.Keys.Contains(str.fullName))
                            //        {
                            //            radioFlag = getRadio_Status(str);
                            //            gDicSetRadioFirstStatus.Add(str.fullName, radioFlag);

                            //            info = string.Format("{0}:初次状态保存:{1}", str.fullName, radioFlag);
                            //            add_log_info(srIT, info, "Main", LogCategory.I);
                            //            Logger.Trace(srIT, info, "Main", LogCategory.I);
                            //        }
                            //    }
                            //    else
                            //    {
                            //        // 落在了两个时间段以外的3个时间段
                            //        locationTwoFlag = false;
                            //    }

                            //    #endregion
                            //}
                            //else if (!string.IsNullOrEmpty(str.activeTime1Start))
                            //{
                            //    #region 只设置了第一个时间段

                            //    ts1Flag = currentTime_In_Range(str.activeTime1Start, str.activeTime1Ended);
                            //    if (ts1Flag)
                            //    {
                            //        // 落在了第一个时间段里面
                            //        locationTwoFlag = true;

                            //        // 初次状态保存
                            //        if (!gDicSetRadioFirstStatus.Keys.Contains(str.fullName))
                            //        {
                            //            radioFlag = getRadio_Status(str);
                            //            gDicSetRadioFirstStatus.Add(str.fullName, radioFlag);

                            //            info = string.Format("{0}:初次状态保存:{1}", str.fullName, radioFlag);
                            //            add_log_info(srIT, info, "Main", LogCategory.I);
                            //            Logger.Trace(srIT, info, "Main", LogCategory.I);
                            //        }
                            //    }
                            //    else
                            //    {
                            //        // 落在了第一时间段以外的2个时间段
                            //        locationTwoFlag = false;
                            //    }

                            //    #endregion
                            //}
                            //else if (!string.IsNullOrEmpty(str.activeTime2Start))
                            //{
                            //    #region 只设置了第二个时间段

                            //    ts2Flag = currentTime_In_Range(str.activeTime2Start, str.activeTime2Ended);
                            //    if (ts2Flag)
                            //    {
                            //        // 落在了第二个时间段里面
                            //        locationTwoFlag = true;

                            //        // 初次状态保存
                            //        if (!gDicSetRadioFirstStatus.Keys.Contains(str.fullName))
                            //        {
                            //            radioFlag = getRadio_Status(str);
                            //            gDicSetRadioFirstStatus.Add(str.fullName, radioFlag);

                            //            info = string.Format("{0}:初次状态保存:{1}", str.fullName, radioFlag);
                            //            add_log_info(srIT, info, "Main", LogCategory.I);
                            //            Logger.Trace(srIT, info, "Main", LogCategory.I);
                            //        }
                            //    }
                            //    else
                            //    {
                            //        // 落在了第二时间段以外的2个时间段
                            //        locationTwoFlag = false;
                            //    }

                            //    #endregion
                            //}
                            //else
                            //{
                            //    #region 没有设置时间段

                            //    // 没有设置时间段
                            //    locationTwoFlag = false;

                            //    #endregion
                            //}

                            #endregion

                            sw.Reset();

                            /*
                             *  遍历所有online的设备
                             */
                            foreach (strSetRadio str in gListSetRadio)
                            {
                                if (check_location_in_range(str))
                                {
                                    //落在了任意的时间段里面
                                    locationInSideFlag = true;

                                    #region 初次状态保存

                                    if (!gDicSetRadioFirstStatus.Keys.Contains(str.fullName))
                                    {
                                        radioFlag = getRadio_Status(str);
                                        gDicSetRadioFirstStatus.Add(str.fullName, radioFlag);

                                        info = string.Format("{0}:初次状态保存:{1}", str.fullName, radioFlag);
                                        add_log_info(srIT, info, "Main", LogCategory.I);
                                        Logger.Trace(srIT, info, "Main", LogCategory.I);
                                    }

                                    #endregion
                                }
                                else
                                {
                                    //不落在了任意的时间段里面
                                    locationInSideFlag = false;
                                }
                               
                                #region 射频处理

                                if (locationInSideFlag)
                                {
                                    // 落在要控制时间段里面(关闭射频)
                                    if (getRadio_Status(str))
                                    {
                                        info = string.Format("{0}:关闭射频", str.fullName);
                                        add_log_info(srIT, info, "Main", LogCategory.I);
                                        Logger.Trace(srIT, info, "Main", LogCategory.I);

                                        //关闭射频
                                        setRadio_2_AP(str, 0);
                                    }
                                }
                                else
                                {
                                    // 不落在要控制时间段里面(根据首次进入时状态设置射频)

                                    if (!gDicSetRadioFirstStatus.Keys.Contains(str.fullName))
                                    {
                                        // 尚未设置过首次状态
                                        // 无需做动作
                                    }
                                    else
                                    {
                                        // 已经设置过首次状态
                                        radioFlag = getRadio_Status(str);
                                        firstFlag = gDicSetRadioFirstStatus[str.fullName];

                                        if (radioFlag != firstFlag)
                                        {
                                            if (firstFlag)
                                            {
                                                info = string.Format("{0}:开启射频", str.fullName);
                                                add_log_info(srIT, info, "Main", LogCategory.I);
                                                Logger.Trace(srIT, info, "Main", LogCategory.I);

                                                setRadio_2_AP(str, 1);
                                            }
                                            else
                                            {
                                                info = string.Format("{0}:关闭射频", str.fullName);
                                                add_log_info(srIT, info, "Main", LogCategory.I);
                                                Logger.Trace(srIT, info, "Main", LogCategory.I);

                                                setRadio_2_AP(str, 0);
                                            }
                                        }

                                        info = string.Format("{0}:初次状态删除", str.fullName);
                                        add_log_info(srIT, info, "Main", LogCategory.I);
                                        Logger.Trace(srIT, info, "Main", LogCategory.I);

                                        // 初次状态删除         
                                        gDicSetRadioFirstStatus.Remove(str.fullName);
                                    }
                                }

                                #endregion
                            }

                            sw.Stop();
                            ts2 = sw.Elapsed;

                            info = string.Format("处理射频时段的控制,总共花费:{0}ms", Math.Ceiling(ts2.TotalMilliseconds));
                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);


                            #endregion
                        }

                        //报到线程状态
                        write_monitor_status("Radio_Status");

                        startTimeRadio = System.DateTime.Now;

                        // 2018-09-27
                        print_all_info();
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    startTimeRadio = System.DateTime.Now;
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }               
            }
        }

        #endregion

        #region 处理黑白普通的线程

        /// <summary>
        /// 用于处理黑白普通名单的线程
        /// </summary>
        /// <param name="obj"></param>
        private void thread_for_bwo_process(object obj)
        {
            #region 变量定义

            int rtv = -1;
            string info = "";

            bool flag = false;
            bool hasMsg = false;
            strDevice strDev = new strDevice();

            /*
             * 用于修复mysql连接的空闲时间超过8小时后，MySQL自动断开该连接的问题
             * wait_timeout = 8*3600
             * 即每隔fix_for_wait_timeout的时间（秒数）就访问一下数据库
             */
            int fix_for_wait_timeout = 60; //10*60;

            int reConnCnt = 0;
            DateTime startTimeConn = System.DateTime.Now;
            DateTime endTimeConn = System.DateTime.Now;
            TimeSpan tsConn = endTimeConn.Subtract(startTimeConn);

            InterModuleMsgStruct imms = new InterModuleMsgStruct();

            #endregion

            while (true)
            {               
                Thread.Sleep(50);

                try
                {
                    #region 防止自动断开该连接的问题

                    endTimeConn = System.DateTime.Now;
                    tsConn = endTimeConn.Subtract(startTimeConn);

                    if (tsConn.TotalSeconds >= fix_for_wait_timeout)
                    {
                        // 2018-09-29
                        re_connection_db(ref gDbHelperBWO, "gDbHelperBWO", ref reConnCnt);

                        Thread.Sleep(5);
                        if (gDbHelperBWO.MyDbConnFlag)
                        {
                            List<string> listAllTbl = new List<string>();
                            listAllTbl = gDbHelperBWO.Get_All_ColumnName("user");
                        }

                        //报到线程状态
                        write_monitor_status("Bwo_Status");

                        startTimeConn = System.DateTime.Now;
                    }

                    #endregion
                }
                catch (Exception ee)
                {
                    startTimeConn = System.DateTime.Now;
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }

                try
                {       
                    lock (mutex_bwoList)
                    {
                        if (gBWOProcess.Count > 0)
                        {
                            info = string.Format("出队,gBWOProcess.Count = {0},Now,take one.", gBWOProcess.Count);
                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                            //出队处理                          
                            gBwListSetInfo = new strBwListSetInfo();
                            gBwListSetInfo = gBWOProcess.Dequeue();

                            InterModuleMsgStruct tt = new InterModuleMsgStruct();

                            #region 装箱处理，2018-10-15

                            imms = new InterModuleMsgStruct();
                        
                            imms.Version = gBwListSetInfo.imms.Version;

                            imms.ApInfo.SN = gBwListSetInfo.imms.ApInfo.SN;
                            imms.ApInfo.Fullname = gBwListSetInfo.imms.ApInfo.Fullname;
                            imms.ApInfo.IP = gBwListSetInfo.imms.ApInfo.IP;
                            imms.ApInfo.Port = gBwListSetInfo.imms.ApInfo.Port;
                            imms.ApInfo.Type = gBwListSetInfo.imms.ApInfo.Type;

                            imms.Body.type = gBwListSetInfo.imms.Body.type;
                            imms.Body.dic = gBwListSetInfo.imms.Body.dic;
                            imms.Body.n_dic = gBwListSetInfo.imms.Body.n_dic;

                            imms.MsgType = gBwListSetInfo.imms.MsgType;

                            imms.AppInfo.User = gBwListSetInfo.imms.AppInfo.User;
                            imms.AppInfo.Group = gBwListSetInfo.imms.AppInfo.Group;
                            imms.AppInfo.Domain = gBwListSetInfo.imms.AppInfo.Domain;
                            imms.AppInfo.Ip = gBwListSetInfo.imms.AppInfo.Ip;
                            imms.AppInfo.Port = gBwListSetInfo.imms.AppInfo.Port;
                            imms.AppInfo.Type = gBwListSetInfo.imms.AppInfo.Type;

                            #endregion                            

                            hasMsg = true;
                        }
                    }

                    if (hasMsg == false)
                    {
                        continue;
                    }

                    switch (gBwListSetInfo.bt)
                    {
                        case bwType.BWTYPE_BLACK:
                            {
                                #region 黑名单

                                //通过设备ID获取设备的信息
                                rtv = gDbHelperBWO.device_record_entity_get_by_devid(int.Parse(gBwListSetInfo.devId), ref strDev);
                                if (rtv == 0)
                                {
                                    #region 下发给AP

                                    if (string.IsNullOrEmpty(strDev.online) || strDev.online == "0")
                                    {
                                        string errInfo = get_debug_info() + "设备离线";
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref imms, gBwListSetInfo.operTypeRsp, -1, errInfo, true, "1", "2");
                                        Send_Msg_2_AppCtrl_Upper(imms);
                                        break;
                                    }

                                    //只发给上线的AP
                                    imms.ApInfo.SN = strDev.sn;
                                    imms.ApInfo.Fullname = gBwListSetInfo.devFullName;
                                    imms.ApInfo.IP = strDev.ipAddr;
                                    imms.ApInfo.Port = int.Parse(strDev.port);
                                    imms.ApInfo.Type = strDev.innerType;
                                    imms.MsgType = MsgType.CONFIG.ToString();

                                    info = string.Format("下发给设备:{0},BWTYPE_BLACK:{1},{2}:{3}", 
                                        gBwListSetInfo.devFullName,
                                        gBwListSetInfo.operTypeReq, 
                                        strDev.ipAddr,
                                        int.Parse(strDev.port));

                                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                    //发送给ApController
                                    Send_Msg_2_ApCtrl_Lower(imms);

                                    gBwListSetInfo.hasRsp = false;
                                    gBwListSetInfo.rspResult = false;

                                    #endregion

                                    #region 等结果并进行处理

                                    int max = 0;
                                    while (max < 100)
                                    {
                                        max++;
                                        Thread.Sleep(50);
                                       
                                        if (gBwListSetInfo.hasRsp == true)
                                        {
                                            break;
                                        }
                                    }

                                    if (max == 100)
                                    {
                                        //等AP的回复，超时
                                        info = string.Format("等不到AP({0})的BWTYPE_BLACK响应,5秒超时.", gBwListSetInfo.devFullName);
                                        add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref imms, gBwListSetInfo.operTypeRsp, -1, info, true, "1", "2");
                                        Send_Msg_2_AppCtrl_Upper(imms);
                                        break;
                                    }
                                    else
                                    {
                                        //等AP的回复，超时
                                        info = string.Format("AP({0})的BWTYPE_BLACK响应时间为:{1}ms,rspResult = {2}.",
                                            gBwListSetInfo.devFullName,max *50, gBwListSetInfo.rspResult);

                                        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                        //AP已经回复，未超时
                                        if (gBwListSetInfo.rspResult == true)
                                        {
                                            if (gBwListSetInfo.operTypeReq == AppMsgType.app_add_bwlist_request)
                                            {
                                                #region add,保存到库中

                                                flag = false;
                                                for (int i = 0; i < gBwListSetInfo.listBwoInfo.Count; i++)
                                                {
                                                    rtv = gDbHelperBWO.bwlist_record_insert(gBwListSetInfo.listBwoInfo[i], int.Parse(gBwListSetInfo.devId));
                                                    if (rtv == (int)RC.EXIST)
                                                    {
                                                        if (!string.IsNullOrEmpty(gBwListSetInfo.listBwoInfo[i].imsi))
                                                        {
                                                            //先删除IMSI
                                                            rtv = gDbHelperBWO.bwlist_record_imsi_delete(gBwListSetInfo.listBwoInfo[i].imsi, int.Parse(gBwListSetInfo.devId));
                                                            if (rtv == 0)
                                                            {
                                                                //再次插入IMSI
                                                                rtv = gDbHelperBWO.bwlist_record_insert(gBwListSetInfo.listBwoInfo[i], int.Parse(gBwListSetInfo.devId));
                                                                if (rtv == 0)
                                                                {
                                                                    flag = true;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //先删除IMEI
                                                            rtv = gDbHelperBWO.bwlist_record_imei_delete(gBwListSetInfo.listBwoInfo[i].imei, int.Parse(gBwListSetInfo.devId));
                                                            if (rtv == 0)
                                                            {
                                                                //再次插入IMEI
                                                                rtv = gDbHelperBWO.bwlist_record_insert(gBwListSetInfo.listBwoInfo[i], int.Parse(gBwListSetInfo.devId));
                                                                if (rtv == 0)
                                                                {
                                                                    flag = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (rtv == 0)
                                                        {
                                                            flag = true;
                                                        }
                                                    }
                                                }

                                                #endregion
                                            }
                                            else
                                            {
                                                #region del,保存到库中

                                                flag = false;
                                                if (gBwListSetInfo.clearWhiteListFlag)
                                                {
                                                    info = string.Format("name = {0},clearWhiteListFlag = true,清空黑名单！", gBwListSetInfo.devFullName);
                                                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                                    rtv = gDbHelperBWO.bwlist_record_bwflag_delete(bwType.BWTYPE_BLACK, int.Parse(gBwListSetInfo.devId));
                                                    if (rtv == 0)
                                                    {
                                                        flag = true;
                                                    }
                                                }
                                                else
                                                {
                                                    for (int i = 0; i < gBwListSetInfo.listBwoInfo.Count; i++)
                                                    {
                                                        if (!string.IsNullOrEmpty(gBwListSetInfo.listBwoInfo[i].imsi))
                                                        {
                                                            rtv = gDbHelperBWO.bwlist_record_imsi_delete(gBwListSetInfo.listBwoInfo[i].imsi, int.Parse(gBwListSetInfo.devId));
                                                            if (rtv == 0)
                                                            {
                                                                flag = true;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            rtv = gDbHelperBWO.bwlist_record_imei_delete(gBwListSetInfo.listBwoInfo[i].imei, int.Parse(gBwListSetInfo.devId));
                                                            if (rtv == 0)
                                                            {
                                                                flag = true;
                                                            }
                                                        }
                                                    }
                                                }

                                                #endregion
                                            }

                                            #region 重新获取gDicDevId_Imsi_Des

                                            // 2018-09-10
                                            if (0 == gDbHelperBWO.domain_dictionary_info_join_imsi_des_get(ref gDicDevId_Imsi_Des))
                                            {
                                                add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                            }
                                            else
                                            {
                                                add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                            }

                                            #endregion
                                        }                                     
                                    }

                                    #endregion
                                }
                                else
                                {
                                    #region 出错处理

                                    string errInfo = get_debug_info() + gDbHelperBWO.get_rtv_str(rtv);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref imms, gBwListSetInfo.operTypeRsp, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(imms);
                                    break;

                                    #endregion
                                }

                                break;

                                #endregion
                            }
                        case bwType.BWTYPE_WHITE:
                            {
                                #region 白名单

                                //通过设备ID获取设备的信息
                                rtv = gDbHelperBWO.device_record_entity_get_by_devid(int.Parse(gBwListSetInfo.devId), ref strDev);
                                if (rtv == 0)
                                {
                                    #region 下发给AP

                                    if (string.IsNullOrEmpty(strDev.online) || strDev.online == "0")
                                    {
                                        string errInfo = get_debug_info() + "设备离线";
                                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref imms, gBwListSetInfo.operTypeRsp, -1, errInfo, true, "1", "2");
                                        Send_Msg_2_AppCtrl_Upper(imms);
                                        break;
                                    }

                                    //只发给上线的AP
                                    imms.ApInfo.SN = strDev.sn;
                                    imms.ApInfo.Fullname = gBwListSetInfo.devFullName;
                                    imms.ApInfo.IP = strDev.ipAddr;
                                    imms.ApInfo.Port = int.Parse(strDev.port);
                                    imms.ApInfo.Type = strDev.innerType;
                                    imms.MsgType = MsgType.CONFIG.ToString();
                            
                                    info = string.Format("下发给设备:{0},BWTYPE_WHITE:{1},{2}:{3}",
                                        gBwListSetInfo.devFullName,
                                        gBwListSetInfo.operTypeReq,
                                        strDev.ipAddr,
                                        int.Parse(strDev.port));

                                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                    //发送给ApController
                                    Send_Msg_2_ApCtrl_Lower(imms);

                                    gBwListSetInfo.hasRsp = false;
                                    gBwListSetInfo.rspResult = false;

                                    #endregion

                                    #region 等结果并进行处理

                                    int max = 0;
                                    while (max < 100)
                                    {
                                        max++;
                                        Thread.Sleep(50);                                        

                                        if (gBwListSetInfo.hasRsp == true)
                                        {
                                            break;
                                        }
                                    }

                                    if (max == 100)
                                    {
                                        //等AP的回复，超时
                                        info = string.Format("等不到AP({0})的BWTYPE_WHITE响应,5秒超时", gBwListSetInfo.devFullName);
                                        add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);

                                        Fill_IMMS_Info(ref imms, gBwListSetInfo.operTypeRsp, -1, info, true, "1", "2");
                                        Send_Msg_2_AppCtrl_Upper(imms);
                                        break;
                                    }
                                    else
                                    {
                                        //等AP的回复，超时
                                        info = string.Format("AP({0})的BWTYPE_WHITE响应时间为:{1}ms,rspResult = {2}.",
                                            gBwListSetInfo.devFullName,max * 50,gBwListSetInfo.rspResult);

                                        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                        //AP已经回复，未超时
                                        if (gBwListSetInfo.rspResult == true)
                                        {
                                            if (gBwListSetInfo.operTypeReq == AppMsgType.app_add_bwlist_request)
                                            {
                                                #region add,保存到库中

                                                flag = false;
                                                for (int i = 0; i < gBwListSetInfo.listBwoInfo.Count; i++)
                                                {
                                                    rtv = gDbHelperBWO.bwlist_record_insert(gBwListSetInfo.listBwoInfo[i], int.Parse(gBwListSetInfo.devId));
                                                    if (rtv == (int)RC.EXIST)
                                                    {
                                                        if (!string.IsNullOrEmpty(gBwListSetInfo.listBwoInfo[i].imsi))
                                                        {
                                                            //先删除IMSI
                                                            rtv = gDbHelperBWO.bwlist_record_imsi_delete(gBwListSetInfo.listBwoInfo[i].imsi, int.Parse(gBwListSetInfo.devId));
                                                            if (rtv == 0)
                                                            {
                                                                //再次插入IMSI
                                                                rtv = gDbHelperBWO.bwlist_record_insert(gBwListSetInfo.listBwoInfo[i], int.Parse(gBwListSetInfo.devId));
                                                                if (rtv == 0)
                                                                {
                                                                    flag = true;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //先删除IMEI
                                                            rtv = gDbHelperBWO.bwlist_record_imei_delete(gBwListSetInfo.listBwoInfo[i].imei, int.Parse(gBwListSetInfo.devId));
                                                            if (rtv == 0)
                                                            {
                                                                //再次插入IMEI
                                                                rtv = gDbHelperBWO.bwlist_record_insert(gBwListSetInfo.listBwoInfo[i], int.Parse(gBwListSetInfo.devId));
                                                                if (rtv == 0)
                                                                {
                                                                    flag = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (rtv == 0)
                                                        {
                                                            flag = true;
                                                        }
                                                    }
                                                }

                                                #endregion
                                            }
                                            else
                                            {
                                                #region del,保存到库中

                                                flag = false;
                                                if (gBwListSetInfo.clearWhiteListFlag)
                                                {
                                                    info = string.Format("name = {0},clearWhiteListFlag = true,清空白名单！", gBwListSetInfo.devFullName);
                                                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                                    rtv = gDbHelperBWO.bwlist_record_bwflag_delete(bwType.BWTYPE_WHITE, int.Parse(gBwListSetInfo.devId));
                                                    if (rtv == 0)
                                                    {
                                                        flag = true;
                                                    }
                                                }
                                                else
                                                {
                                                    for (int i = 0; i < gBwListSetInfo.listBwoInfo.Count; i++)
                                                    {
                                                        if (!string.IsNullOrEmpty(gBwListSetInfo.listBwoInfo[i].imsi))
                                                        {
                                                            rtv = gDbHelperBWO.bwlist_record_imsi_delete(gBwListSetInfo.listBwoInfo[i].imsi, int.Parse(gBwListSetInfo.devId));
                                                            if (rtv == 0)
                                                            {
                                                                flag = true;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            rtv = gDbHelperBWO.bwlist_record_imei_delete(gBwListSetInfo.listBwoInfo[i].imei, int.Parse(gBwListSetInfo.devId));
                                                            if (rtv == 0)
                                                            {
                                                                flag = true;
                                                            }
                                                        }
                                                    }
                                                }

                                                #endregion
                                            }

                                            #region 重新获取gDicDevId_Imsi_Des

                                            // 2018-09-10                                       
                                            if (0 == gDbHelperBWO.domain_dictionary_info_join_imsi_des_get(ref gDicDevId_Imsi_Des))
                                            {
                                                add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                            }
                                            else
                                            {
                                                add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                                Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                            }

                                            #endregion
                                        }
                                    }

                                    #endregion
                                }
                                else
                                {
                                    #region 出错处理

                                    string errInfo = get_debug_info() + gDbHelperBWO.get_rtv_str(rtv);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref imms, gBwListSetInfo.operTypeRsp, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(imms);
                                    break;

                                    #endregion
                                }

                                break;
                                #endregion
                            }
                        case bwType.BWTYPE_OTHER:
                            {
                                #region 普通名单

                                // 【直接保存到库中】

                                if (gBwListSetInfo.operTypeReq == AppMsgType.app_add_bwlist_request)
                                {
                                    #region add,保存到库中

                                    flag = false;
                                    for (int i = 0; i < gBwListSetInfo.listBwoInfo.Count; i++)
                                    {
                                        rtv = gDbHelperBWO.bwlist_record_insert(gBwListSetInfo.listBwoInfo[i], int.Parse(gBwListSetInfo.devId));
                                        if (rtv == (int)RC.EXIST)
                                        {
                                            if (!string.IsNullOrEmpty(gBwListSetInfo.listBwoInfo[i].imsi))
                                            {
                                                //先删除IMSI
                                                rtv = gDbHelperBWO.bwlist_record_imsi_delete(gBwListSetInfo.listBwoInfo[i].imsi, int.Parse(gBwListSetInfo.devId));
                                                if (rtv == 0)
                                                {
                                                    //再次插入IMSI
                                                    rtv = gDbHelperBWO.bwlist_record_insert(gBwListSetInfo.listBwoInfo[i], int.Parse(gBwListSetInfo.devId));
                                                    if (rtv == 0)
                                                    {
                                                        flag = true;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //先删除IMEI
                                                rtv = gDbHelperBWO.bwlist_record_imei_delete(gBwListSetInfo.listBwoInfo[i].imei, int.Parse(gBwListSetInfo.devId));
                                                if (rtv == 0)
                                                {
                                                    //再次插入IMEI
                                                    rtv = gDbHelperBWO.bwlist_record_insert(gBwListSetInfo.listBwoInfo[i], int.Parse(gBwListSetInfo.devId));
                                                    if (rtv == 0)
                                                    {
                                                        flag = true;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (rtv == 0)
                                            {
                                                flag = true;
                                            }
                                        }
                                    }

                                    #endregion

                                }
                                else
                                {
                                    #region del,保存到库中

                                    flag = false;
                                    if (gBwListSetInfo.clearWhiteListFlag)
                                    {
                                        info = string.Format("name = {0},clearWhiteListFlag = true,清空普通名单！", gBwListSetInfo.devFullName);
                                        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                        rtv = gDbHelperBWO.bwlist_record_bwflag_delete(bwType.BWTYPE_OTHER, int.Parse(gBwListSetInfo.devId));
                                        if (rtv == 0)
                                        {
                                            flag = true;
                                        }
                                    }
                                    else
                                    {
                                        for (int i = 0; i < gBwListSetInfo.listBwoInfo.Count; i++)
                                        {
                                            if (!string.IsNullOrEmpty(gBwListSetInfo.listBwoInfo[i].imsi))
                                            {
                                                rtv = gDbHelperBWO.bwlist_record_imsi_delete(gBwListSetInfo.listBwoInfo[i].imsi, int.Parse(gBwListSetInfo.devId));
                                                if (rtv == 0)
                                                {
                                                    flag = true;
                                                }
                                            }
                                            else
                                            {
                                                rtv = gDbHelperBWO.bwlist_record_imei_delete(gBwListSetInfo.listBwoInfo[i].imei, int.Parse(gBwListSetInfo.devId));
                                                if (rtv == 0)
                                                {
                                                    flag = true;
                                                }
                                            }
                                        }
                                    }

                                    #endregion
                                }
                                
                                if (flag == true)
                                {
                                    Fill_IMMS_Info(ref imms, gBwListSetInfo.operTypeRsp, 0, "成功", true, "0", "1");
                                    Send_Msg_2_AppCtrl_Upper(imms);

                                    #region 重新获取gDicDevId_Imsi_Des

                                    // 2018-09-10                                      
                                    if (0 == gDbHelperBWO.domain_dictionary_info_join_imsi_des_get(ref gDicDevId_Imsi_Des))
                                    {
                                        add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取OK！", "Main", LogCategory.I);
                                    }
                                    else
                                    {
                                        add_log_info(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, "gDicDevId_Imsi_Des -> 获取FAILED！", "Main", LogCategory.I);
                                    }

                                    #endregion
                                }
                                else
                                {
                                    string errInfo = get_debug_info() + gDbHelperBWO.get_rtv_str(rtv);
                                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);

                                    Fill_IMMS_Info(ref imms, gBwListSetInfo.operTypeRsp, -1, errInfo, true, "1", "2");
                                    Send_Msg_2_AppCtrl_Upper(imms);                                  
                                }

                                break;

                                #endregion
                            }
                        default:
                            {
                                #region 其他

                                info = string.Format("thread_for_bwo_process,名单类型无需处理");
                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                break;

                                #endregion
                            }
                    }

                    hasMsg = false;
                }
                catch (Exception ee)
                {
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }
            }
        }

        #endregion

        #region 进程间通信

        const int INVALID_HANDLE_VALUE = -1;
        const int PAGE_READWRITE = 0x04;

        //共享内存
        [DllImport("Kernel32.dll", EntryPoint = "CreateFileMapping")]
        private static extern IntPtr CreateFileMapping(IntPtr hFile, //HANDLE hFile,
         UInt32 lpAttributes,//LPSECURITY_ATTRIBUTES lpAttributes,  //0
         UInt32 flProtect,//DWORD flProtect
         UInt32 dwMaximumSizeHigh,//DWORD dwMaximumSizeHigh,
         UInt32 dwMaximumSizeLow,//DWORD dwMaximumSizeLow,
         string lpName//LPCTSTR lpName
         );

        [DllImport("Kernel32.dll", EntryPoint = "OpenFileMapping")]
        private static extern IntPtr OpenFileMapping(
         UInt32 dwDesiredAccess,//DWORD dwDesiredAccess,
         int bInheritHandle,//BOOL bInheritHandle,
         string lpName//LPCTSTR lpName
         );

        const int FILE_MAP_ALL_ACCESS = 0x0002;
        const int FILE_MAP_WRITE = 0x0002;

        [DllImport("Kernel32.dll", EntryPoint = "MapViewOfFile")]
        private static extern IntPtr MapViewOfFile(
         IntPtr hFileMappingObject,//HANDLE hFileMappingObject,
         UInt32 dwDesiredAccess,//DWORD dwDesiredAccess
         UInt32 dwFileOffsetHight,//DWORD dwFileOffsetHigh,
         UInt32 dwFileOffsetLow,//DWORD dwFileOffsetLow,
         UInt32 dwNumberOfBytesToMap//SIZE_T dwNumberOfBytesToMap
         );

        [DllImport("Kernel32.dll", EntryPoint = "UnmapViewOfFile")]
        private static extern int UnmapViewOfFile(IntPtr lpBaseAddress);

        [DllImport("Kernel32.dll", EntryPoint = "CloseHandle")]
        private static extern int CloseHandle(IntPtr hObject);

        private static Semaphore m_Write;       //可写的信号
        private static Semaphore m_Read;        //可读的信号
        private static IntPtr handle;           //文件句柄
        private static IntPtr addr;             //共享内存地址
        private static uint mapLength = 1024;   //共享内存长

        private static Object mutex_Monitor = new object();
        private static long gThreadMonitorCnt = 0;
        //private static List<long> gLstThreadMonitor = new List<long>();

        private static Dictionary<string, long> gDicThreadMonitor = new Dictionary<string, long>();

        /// <summary>
        /// 判断进程是否已经存在
        /// </summary>
        /// <param name="processName"></param>
        /// <returns></returns>
        public static bool process_is_exit(string processName)
        {
            if (string.IsNullOrEmpty(processName))
            {
                return false;
            }

            System.Diagnostics.Process[] myProcesses = System.Diagnostics.Process.GetProcesses();
            foreach (System.Diagnostics.Process myProcess in myProcesses)
            {
                if (processName == myProcess.ProcessName)
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 拷贝数据到指定的地址
        /// </summary>
        /// <param name="byteSrc"></param>
        /// <param name="dst"></param>
        private static unsafe void Copy(byte[] byteSrc, IntPtr dst)
        {
            fixed (byte* pSrc = byteSrc)
            {
                byte* pDst = (byte*)dst;
                byte* psrc = pSrc;
                for (int i = 0; i < byteSrc.Length; i++)
                {
                    *pDst = *psrc;
                    pDst++;
                    psrc++;
                }
            }
        }

        /// <summary>
        /// 发送数据到
        /// </summary>
        /// <param name="info"></param>
        public static void send_data_2_monitor(string info)
        {
            try
            {
                m_Write = Semaphore.OpenExisting("WriteMap");
                m_Read = Semaphore.OpenExisting("ReadMap");

                handle = OpenFileMapping(FILE_MAP_WRITE, 0, "shareMemory");
                addr = MapViewOfFile(handle, FILE_MAP_ALL_ACCESS, 0, 0, 0);

                m_Write.WaitOne();

                byte[] sendStr = Encoding.Default.GetBytes(info + '\0');

                if (sendStr.Length < mapLength)
                {
                    Copy(sendStr, addr);
                }

                m_Read.Release();
            }
            catch (WaitHandleCannotBeOpenedException ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return;
            }
        }

        /// <summary>
        /// 写入Monitor的状态
        /// </summary>
        /// <param name="inx">各个线程对应的下标</param>
        /// <returns></returns>
        //public static int write_monitor_status(ThreadMonitorIndex inx)
        //{
        //    if (inx >= ThreadMonitorIndex.TMI_MAX)
        //    {
        //        string info = string.Format("write_monitor_status出错,inx = {0}", inx);
        //        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
        //        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
        //        return -1;
        //    }

        //    lock (mutex_Monitor)
        //    {
        //        gLstThreadMonitor[(int)inx] = gThreadMonitorCnt;
        //    }

        //    return 0;
        //}

        /// <summary>
        /// 写入Monitor的状态
        /// </summary>
        /// <param name="inx">各个线程对应的下标</param>
        /// <returns></returns>
        public static int write_monitor_status(string name)
        {
            //if (inx >= ThreadMonitorIndex.TMI_MAX)
            //{
            //    string info = string.Format("write_monitor_status出错,inx = {0}", inx);
            //    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
            //    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
            //    return -1;
            //}

            lock (mutex_Monitor)
            {
                if (gDicThreadMonitor.ContainsKey(name))
                {
                    //修改
                    gDicThreadMonitor[name] = gThreadMonitorCnt;
                }
                else
                {
                    //新增
                    gDicThreadMonitor.Add(name, gThreadMonitorCnt);

                    // 2018-12-25
                    gDicThreadMonitor = gDicThreadMonitor.OrderBy(o => o.Key).ToDictionary(o => o.Key, p => p.Value);
                }               
            }

            return 0;
        }

        /// <summary>
        /// 用于处理黑白普通名单的线程
        /// </summary>
        /// <param name="obj"></param>
        private void thread_for_monitor_process(object obj)
        {
            #region 变量定义

            /*
             * 用于多久一次发送各个线程的状态给Monitor进程
             */
            int Freq_Of_Send_2_Monitor = (3*60 -2);

            string info = "";
            DateTime startTimeMonitor = System.DateTime.Now;
            DateTime endTimeMonitor = System.DateTime.Now;
            TimeSpan tsMonitor = endTimeMonitor.Subtract(startTimeMonitor);

            #endregion

            while (true)
            {
                Thread.Sleep(50);

                try
                {                    
                    endTimeMonitor = System.DateTime.Now;
                    tsMonitor = endTimeMonitor.Subtract(startTimeMonitor);

                    if ((tsMonitor.TotalSeconds >= Freq_Of_Send_2_Monitor) && (DateTime.Now.Second == 0))
                    {                       
                        lock (mutex_Monitor)
                        {
                            info = "";
                            info += string.Format("{0};", gThreadMonitorCnt);
                            info += string.Format("{0}", gDicThreadMonitor.Count);

                            foreach (KeyValuePair<string, long> tmp in gDicThreadMonitor)
                            {
                                info += string.Format(";{0}:{1}", tmp.Key, tmp.Value);
                            }                           
                           
                            if (process_is_exit("Monitor"))
                            {
                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                send_data_2_monitor(info);
                            }
                            else
                            {
                                info = string.Format("Monitor进程不存在!");
                                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                            }

                            gThreadMonitorCnt++;
                        }

                        startTimeMonitor = System.DateTime.Now;
                    }           
                }
                catch (Exception ee)
                {
                    startTimeMonitor = System.DateTime.Now;
                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }
            }
        }

        #endregion

        #region 批量导入导出

        /// <summary>
        /// 批量导入之前，清空各种相关的表
        /// </summary>
        /// <returns></returns>
        private int BIE_clear_tables_involved()
        {
            int rtv = 0;

            try
            {               
                rtv += gDbHelperUpper.domain_record_clear();
                rtv += gDbHelperUpper.userdomain_record_clear();

                rtv += gDbHelperUpper.device_record_clear();

                rtv += gDbHelperUpper.gc_param_config_record_clear();
                rtv += gDbHelperUpper.gc_misc_record_clear();
                rtv += gDbHelperUpper.gc_nb_cell_record_clear();

                //2018-11-27
                //rtv += gDbHelperUpper.gc_imsi_action_record_clear();

                rtv += gDbHelperUpper.gc_carrier_msg_record_clear();
                rtv += gDbHelperUpper.gc_trace_report_record_clear();

                rtv += gDbHelperUpper.ap_status_record_clear();
                rtv += gDbHelperUpper.ap_general_para_record_clear();

                rtv += gDbHelperUpper.bwlist_record_clear();
            }
            catch (Exception ee)
            {         
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return rtv;
        }

        /// <summary>
        /// 从数据库中获取所有域的信息
        /// </summary>
        /// <param name="lst">域信息</param>
        /// <param name="errInfo">错误信息</param>
        /// <returns></returns>
        private int BIE_get_all_domain(ref List<strBIE_DomainInfo> lst, ref string errInfo)
        {
            int rtv = -1;
            errInfo = "";
            DataTable dt = new DataTable();

            try
            {
                rtv = gDbHelperUpper.domain_record_entity_get(ref dt, 0);
                if (rtv != 0)
                {
                    errInfo = gDbHelperUpper.get_rtv_str(rtv);
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    return -1;
                }

                lst = new List<strBIE_DomainInfo>();
                foreach (DataRow dr in dt.Rows)
                {
                    strBIE_DomainInfo str = new strBIE_DomainInfo();

                    if (string.IsNullOrEmpty(dr["name"].ToString()))
                    {
                        str.name = "";
                    }
                    else
                    {
                        str.name = dr["name"].ToString();
                    }

                    if (string.IsNullOrEmpty(dr["nameFullPath"].ToString()))
                    {
                        str.parentNameFullPath = "";
                    }
                    else
                    {
                        int i = dr["nameFullPath"].ToString().LastIndexOf(".");
                        if (i > 0)
                        {
                            str.parentNameFullPath = dr["nameFullPath"].ToString().Substring(0, i);
                        }
                        else
                        {
                            str.parentNameFullPath = "";
                        }                       
                    }

                    if (string.IsNullOrEmpty(dr["isStation"].ToString()))
                    {
                        str.isStation = "";
                    }
                    else
                    {
                        str.isStation = dr["isStation"].ToString();
                    }

                    if (str.name == "设备" && str.parentNameFullPath == "")
                    {
                        //去掉根节点
                        continue;
                    }

                    lst.Add(str);
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return rtv;
        }

        /// <summary>
        /// 从数据库中获取所有设备的信息
        /// </summary>
        /// <param name="lst">设备信息</param>
        /// <param name="errInfo">错误信息</param>
        /// <returns></returns>
        private int BIE_get_all_device(ref List<strBIE_DeviceInfo> lst, ref string errInfo)
        {
            errInfo = "";
            string affDomainId = "";
            DataTable dt = new DataTable();

            try
            {
                int rtv = gDbHelperUpper.device_record_entity_get(ref dt);
                if (rtv != 0)
                {
                    errInfo = gDbHelperUpper.get_rtv_str(rtv);
                    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                    return -1;
                }

                lst = new List<strBIE_DeviceInfo>();
                foreach (DataRow dr in dt.Rows)
                {
                    strBIE_DeviceInfo str = new strBIE_DeviceInfo();

                    if (string.IsNullOrEmpty(dr["name"].ToString()))
                    {
                        str.name = "";
                    }
                    else
                    {
                        str.name = dr["name"].ToString();
                    }

                    if (!string.IsNullOrEmpty(dr["affDomainId"].ToString()))
                    {
                        affDomainId = dr["affDomainId"].ToString();

                        rtv = gDbHelperUpper.domain_get_nameFullPath_by_id(affDomainId, ref str.parentNameFullPath);
                        if (rtv != 0)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            continue;
                        }
                    }

                    if (string.IsNullOrEmpty(dr["mode"].ToString()))
                    {
                        str.mode = "";
                    }
                    else
                    {
                        str.mode = dr["mode"].ToString();
                    }

                    lst.Add(str);
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }

        /// <summary>
        /// 从数据库中获取所有LTE设备的详细信息
        /// </summary>
        /// <param name="lst">LTE的详细信息</param>
        /// <param name="errInfo">错误信息</param>
        /// <returns></returns>
        private int BIE_get_all_LTE(ref List<strBIE_LTE> lst, ref string errInfo)
        {
            //if (gDicDevFullName.Count == 0)
            //{
            //    errInfo = string.Format("gDicDevFullName的值为空.");
            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
            //    return -1;
            //}

            int rtv;
            strApGenPara apGP = new strApGenPara();
            lst = new List<strBIE_LTE>();

            try
            {
                foreach (KeyValuePair<string, strDevice> kv in gDicDevFullName)
                {
                    strDevice dev = kv.Value;

                    if (dev.devMode == devMode.MODE_WCDMA ||
                        dev.devMode == devMode.MODE_LTE_TDD ||
                        dev.devMode == devMode.MODE_LTE_FDD)
                    {
                        strBIE_LTE str = new strBIE_LTE();

                        rtv = gDbHelperUpper.ap_general_para_record_get_by_devid(dev.id, ref apGP);
                        if (rtv != 0)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }

                        #region 获取参数


                        int i = kv.Key.LastIndexOf(".");
                        if (i > 0)
                        {
                            str.parentNameFullPath = kv.Key.Substring(0, i);
                        }
                        else
                        {
                            errInfo = string.Format("kv.Key={0},有误", kv.Key);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }

                        str.name = dev.name;

                        str.mode = apGP.mode;
                        str.primaryplmn = apGP.primaryplmn;
                        str.earfcndl = apGP.earfcndl;
                        str.earfcnul = apGP.earfcnul;
                        str.cellid = apGP.cellid;
                        str.pci = apGP.pci;
                        str.bandwidth = apGP.bandwidth;
                        str.tac = apGP.tac;
                        str.txpower = apGP.txpower;
                        str.periodtac = apGP.periodtac;
                        str.manualfreq = apGP.manualfreq;
                        str.bootMode = apGP.bootMode;
                        str.Earfcnlist = apGP.Earfcnlist;
                        str.Bandoffset = apGP.Bandoffset;
                        str.NTP = apGP.NTP;
                        str.ntppri = apGP.ntppri;
                        str.source = apGP.source;
                        str.ManualEnable = apGP.ManualEnable;
                        str.ManualEarfcn = apGP.ManualEarfcn;
                        str.ManualPci = apGP.ManualPci;
                        str.ManualBw = apGP.ManualBw;
                        str.gps_select = apGP.gps_select;
                        str.otherplmn = apGP.otherplmn;
                        str.periodFreq = apGP.periodFreq;

                        str.activeTime1Start = apGP.activeTime1Start;
                        str.activeTime1Ended = apGP.activeTime1Ended;
                        str.activeTime2Start = apGP.activeTime2Start;
                        str.activeTime2Ended = apGP.activeTime2Ended;
                        str.activeTime3Start = apGP.activeTime3Start;
                        str.activeTime3Ended = apGP.activeTime3Ended;

                        #endregion

                        #region 获取黑白名单列表

                        str.lstBwList = new List<strBIE_BwList>();

                        DataTable dt = new DataTable();
                        List<int> listAffDeviceId = new List<int>();
                        listAffDeviceId.Add(dev.id);
                        rtv = gDbHelperUpper.bwlist_record_entity_get(ref dt, listAffDeviceId);
                        if (rtv != 0)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }

                        foreach (DataRow dr in dt.Rows)
                        {
                            strBIE_BwList bwlist = new strBIE_BwList();

                            //public string imsi;              //IMSI号
                            //public string imei;              //IMEI号
                            //public string bwFlag;            //名单标识
                            //public string rbStart;           //起始RB
                            //public string rbEnd;             //结束RB        
                            //public string des;               //描述  

                            if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                            {
                                bwlist.imsi = "";
                            }
                            else
                            {
                                bwlist.imsi = dr["imsi"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["imei"].ToString()))
                            {
                                bwlist.imei = "";
                            }
                            else
                            {
                                bwlist.imei = dr["imei"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                            {
                                bwlist.bwFlag = "";
                            }
                            else
                            {
                                bwlist.bwFlag = dr["bwFlag"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["rbStart"].ToString()))
                            {
                                bwlist.rbStart = "";
                            }
                            else
                            {
                                bwlist.rbStart = dr["rbStart"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["rbEnd"].ToString()))
                            {
                                bwlist.rbEnd = "";
                            }
                            else
                            {
                                bwlist.rbEnd = dr["rbEnd"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["des"].ToString()))
                            {
                                bwlist.des = "";
                            }
                            else
                            {
                                bwlist.des = dr["des"].ToString();
                            }

                            str.lstBwList.Add(bwlist);
                        }

                        #endregion

                        lst.Add(str);
                    }
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }

        /// <summary>
        /// 从数据库中获取所有GSM_ZYF设备的详细信息
        /// </summary>
        /// <param name="lst">GSM_ZYF的详细信息</param>
        /// <param name="errInfo">错误信息</param>
        /// <returns></returns>
        private int BIE_get_all_GSM_ZYF(ref List<strBIE_GSM_ZYF> lst, ref string errInfo)
        {
            //if (gDicDevFullName.Count == 0)
            //{
            //    errInfo = string.Format("gDicDevFullName的值为空.");
            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
            //    return -1;
            //}

            int rtv;

            try
            {
                lst = new List<strBIE_GSM_ZYF>();
                foreach (KeyValuePair<string, strDevice> kv in gDicDevFullName)
                {
                    strDevice dev = kv.Value;

                    if (dev.devMode == devMode.MODE_GSM_V2)
                    {
                        strBIE_GSM_ZYF str = new strBIE_GSM_ZYF();

                        int i = kv.Key.LastIndexOf(".");
                        if (i > 0)
                        {
                            str.parentNameFullPath = kv.Key.Substring(0, i);
                        }
                        else
                        {
                            errInfo = string.Format("kv.Key={0},有误", kv.Key);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }

                        str.name = dev.name;

                        rtv = gDbHelperUpper.gc_all_record_get_by_devid(0, dev.id, ref str.bieSys0);
                        if (rtv != 0)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }

                        rtv = gDbHelperUpper.gc_all_record_get_by_devid(1, dev.id, ref str.bieSys1);
                        if (rtv != 0)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }

                        #region 获取黑白名单列表

                        str.lstBwList = new List<strBIE_BwList>();

                        DataTable dt = new DataTable();
                        List<int> listAffDeviceId = new List<int>();
                        listAffDeviceId.Add(dev.id);

                        rtv = gDbHelperUpper.bwlist_record_entity_get(ref dt, listAffDeviceId);
                        if (rtv != 0)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }

                        foreach (DataRow dr in dt.Rows)
                        {
                            strBIE_BwList bwlist = new strBIE_BwList();

                            if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                            {
                                bwlist.imsi = "";
                            }
                            else
                            {
                                bwlist.imsi = dr["imsi"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["imei"].ToString()))
                            {
                                bwlist.imei = "";
                            }
                            else
                            {
                                bwlist.imei = dr["imei"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                            {
                                bwlist.bwFlag = "";
                            }
                            else
                            {
                                bwlist.bwFlag = dr["bwFlag"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["rbStart"].ToString()))
                            {
                                bwlist.rbStart = "";
                            }
                            else
                            {
                                bwlist.rbStart = dr["rbStart"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["rbEnd"].ToString()))
                            {
                                bwlist.rbEnd = "";
                            }
                            else
                            {
                                bwlist.rbEnd = dr["rbEnd"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["des"].ToString()))
                            {
                                bwlist.des = "";
                            }
                            else
                            {
                                bwlist.des = dr["des"].ToString();
                            }

                            str.lstBwList.Add(bwlist);
                        }

                        #endregion

                        lst.Add(str);
                    }
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }

        /// <summary>
        /// 从数据库中获取所有CDMA_ZYF设备的详细信息
        /// </summary>
        /// <param name="lst">CDMA_ZYF的详细信息</param>
        /// <param name="errInfo">错误信息</param>
        /// <returns></returns>
        private int BIE_get_all_CDMA_ZYF(ref List<strBIE_CDMA_ZYF> lst, ref string errInfo)
        {
            //if (gDicDevFullName.Count == 0)
            //{
            //    errInfo = string.Format("gDicDevFullName的值为空.");
            //    add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
            //    Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
            //    return -1;
            //}

            try
            {
                int rtv;
                lst = new List<strBIE_CDMA_ZYF>();
                foreach (KeyValuePair<string, strDevice> kv in gDicDevFullName)
                {
                    strDevice dev = kv.Value;

                    if (dev.devMode == devMode.MODE_CDMA)
                    {
                        strBIE_CDMA_ZYF str = new strBIE_CDMA_ZYF();

                        int i = kv.Key.LastIndexOf(".");
                        if (i > 0)
                        {
                            str.parentNameFullPath = kv.Key.Substring(0, i);
                        }
                        else
                        {
                            errInfo = string.Format("kv.Key={0},有误", kv.Key);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }

                        str.name = dev.name;

                        #region 获取各个参数

                        strGcParamConfig gpc = new strGcParamConfig();
                        rtv = gDbHelperUpper.gc_param_config_record_get_by_devid(-1, dev.id, ref gpc);
                        if ((int)RC.SUCCESS != rtv)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }


                        //(1)
                        if (!string.IsNullOrEmpty(gpc.bWorkingMode))
                        {
                            str.bWorkingMode = gpc.bWorkingMode;
                        }
                        else
                        {
                            str.bWorkingMode = "";
                        }

                        //(2)
                        if (!string.IsNullOrEmpty(gpc.bC))
                        {
                            str.bC = gpc.bC;
                        }
                        else
                        {
                            str.bC = "";
                        }

                        //(3)
                        if (!string.IsNullOrEmpty(gpc.wRedirectCellUarfcn))
                        {
                            str.wRedirectCellUarfcn = gpc.wRedirectCellUarfcn;
                        }
                        else
                        {
                            str.wRedirectCellUarfcn = "";
                        }


                        //(5)
                        if (!string.IsNullOrEmpty(gpc.bPLMNId))
                        {
                            str.bPLMNId = gpc.bPLMNId;
                        }
                        else
                        {
                            str.bPLMNId = "";
                        }

                        //(6)
                        if (!string.IsNullOrEmpty(gpc.bTxPower))
                        {
                            str.bTxPower = gpc.bTxPower;
                        }
                        else
                        {
                            str.bTxPower = "";
                        }

                        //(7)
                        if (!string.IsNullOrEmpty(gpc.bRxGain))
                        {
                            str.bRxGain = gpc.bRxGain;
                        }
                        else
                        {
                            str.bRxGain = "";
                        }

                        //(8)
                        if (!string.IsNullOrEmpty(gpc.wPhyCellId))
                        {
                            str.wPhyCellId = gpc.wPhyCellId;
                        }
                        else
                        {
                            str.wPhyCellId = "";
                        }

                        //(9)
                        if (!string.IsNullOrEmpty(gpc.wLAC))
                        {
                            str.wLAC = gpc.wLAC;
                        }
                        else
                        {
                            str.wLAC = "";
                        }

                        //(10)
                        if (!string.IsNullOrEmpty(gpc.wUARFCN))
                        {
                            str.wUARFCN = gpc.wUARFCN;
                        }
                        else
                        {
                            str.wUARFCN = "";
                        }

                        //(11)
                        if (!string.IsNullOrEmpty(gpc.dwCellId))
                        {
                            str.dwCellId = gpc.dwCellId;
                        }
                        else
                        {
                            str.dwCellId = "";
                        }


                        strGcMisc gm = new strGcMisc();
                        rtv = gDbHelperUpper.gc_misc_record_get_by_devid(-1, dev.id, ref gm);
                        if ((int)RC.SUCCESS != rtv)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            continue;
                        }

                        //(1)
                        if (!string.IsNullOrEmpty(gm.bSMSOriginalNumLen))
                        {
                            str.bSMSOriginalNumLen = gm.bSMSOriginalNumLen;
                        }
                        else
                        {
                            str.bSMSOriginalNumLen = "";
                        }

                        //(2)
                        if (!string.IsNullOrEmpty(gm.bSMSOriginalNum))
                        {
                            str.bSMSOriginalNum = gm.bSMSOriginalNum;
                        }
                        else
                        {
                            str.bSMSOriginalNum = "";
                        }

                        //(3)
                        if (!string.IsNullOrEmpty(gm.bSMSContentLen))
                        {
                            str.bSMSContentLen = gm.bSMSContentLen;
                        }
                        else
                        {
                            str.bSMSContentLen = "";
                        }

                        //(4)
                        if (!string.IsNullOrEmpty(gm.bSMSContent))
                        {
                            str.bSMSContent = gm.bSMSContent;
                        }
                        else
                        {
                            str.bSMSContent = "";
                        }

                        //public string activeTime1Start;      //生效时间1的起始时间
                        //public string activeTime1Ended;      //生效时间1的结束时间
                        //public string activeTime2Start;      //生效时间2的起始时间
                        //public string activeTime2Ended;      //生效时间2的结束时间
                        //public string activeTime3Start;      //生效时间3的起始时间
                        //public string activeTime3Ended;      //生效时间3的结束时间

                        if (!string.IsNullOrEmpty(gm.activeTime1Start))
                        {
                            str.activeTime1Start = gm.activeTime1Start;
                        }
                        else
                        {
                            str.activeTime1Start = "";
                        }

                        if (!string.IsNullOrEmpty(gm.activeTime1Ended))
                        {
                            str.activeTime1Ended = gm.activeTime1Ended;
                        }
                        else
                        {
                            str.activeTime1Ended = "";
                        }

                        ////////////////////////////////////


                        if (!string.IsNullOrEmpty(gm.activeTime2Start))
                        {
                            str.activeTime2Start = gm.activeTime2Start;
                        }
                        else
                        {
                            str.activeTime2Start = "";
                        }

                        if (!string.IsNullOrEmpty(gm.activeTime2Ended))
                        {
                            str.activeTime2Ended = gm.activeTime2Ended;
                        }
                        else
                        {
                            str.activeTime2Ended = "";
                        }

                        ///////////////////////////////

                        if (!string.IsNullOrEmpty(gm.activeTime3Start))
                        {
                            str.activeTime3Start = gm.activeTime3Start;
                        }
                        else
                        {
                            str.activeTime3Start = "";
                        }

                        if (!string.IsNullOrEmpty(gm.activeTime3Ended))
                        {
                            str.activeTime3Ended = gm.activeTime3Ended;
                        }
                        else
                        {
                            str.activeTime3Ended = "";
                        }


                        strGcCarrierMsg gcm = new strGcCarrierMsg();
                        rtv = gDbHelperUpper.gc_carrier_msg_record_get_by_devid(-1, dev.id, ref gcm);
                        if ((int)RC.SUCCESS != rtv)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            continue;
                        }

                        //(1)
                        if (!string.IsNullOrEmpty(gcm.wARFCN1))
                        {
                            str.wARFCN1 = gcm.wARFCN1;
                        }
                        else
                        {
                            str.wARFCN1 = "";
                        }

                        //(2)
                        if (!string.IsNullOrEmpty(gcm.bARFCN1Mode))
                        {
                            str.bARFCN1Mode = gcm.bARFCN1Mode;
                        }
                        else
                        {
                            str.bARFCN1Mode = "";
                        }

                        //(3)
                        if (!string.IsNullOrEmpty(gcm.wARFCN1Duration))
                        {
                            str.wARFCN1Duration = gcm.wARFCN1Duration;
                        }
                        else
                        {
                            str.wARFCN1Duration = "";
                        }

                        //(4)
                        if (!string.IsNullOrEmpty(gcm.wARFCN1Period))
                        {
                            str.wARFCN1Period = gcm.wARFCN1Period;
                        }
                        else
                        {
                            str.wARFCN1Period = "";
                        }


                        //(5)
                        if (!string.IsNullOrEmpty(gcm.wARFCN2))
                        {
                            str.wARFCN2 = gcm.wARFCN2;
                        }
                        else
                        {
                            str.wARFCN2 = "";
                        }

                        //(6)
                        if (!string.IsNullOrEmpty(gcm.bARFCN2Mode))
                        {
                            str.bARFCN2Mode = gcm.bARFCN2Mode;
                        }
                        else
                        {
                            str.bARFCN2Mode = "";
                        }

                        //(7)
                        if (!string.IsNullOrEmpty(gcm.wARFCN2Duration))
                        {
                            str.wARFCN2Duration = gcm.wARFCN2Duration;
                        }
                        else
                        {
                            str.wARFCN2Duration = "";
                        }

                        //(8)
                        if (!string.IsNullOrEmpty(gcm.wARFCN2Period))
                        {
                            str.wARFCN2Period = gcm.wARFCN2Period;
                        }
                        else
                        {
                            str.wARFCN2Period = "";
                        }

                        //(9)
                        if (!string.IsNullOrEmpty(gcm.wARFCN3))
                        {
                            str.wARFCN3 = gcm.wARFCN3;
                        }
                        else
                        {
                            str.wARFCN3 = "";
                        }

                        //(10)
                        if (!string.IsNullOrEmpty(gcm.bARFCN3Mode))
                        {
                            str.bARFCN3Mode = gcm.bARFCN3Mode;
                        }
                        else
                        {
                            str.bARFCN3Mode = "";
                        }

                        //(11)
                        if (!string.IsNullOrEmpty(gcm.wARFCN3Duration))
                        {
                            str.wARFCN3Duration = gcm.wARFCN3Duration;
                        }
                        else
                        {
                            str.wARFCN3Duration = "";
                        }

                        //(12)
                        if (!string.IsNullOrEmpty(gcm.wARFCN3Period))
                        {
                            str.wARFCN3Period = gcm.wARFCN3Period;
                        }
                        else
                        {
                            str.wARFCN3Period = "";
                        }


                        //(13)
                        if (!string.IsNullOrEmpty(gcm.wARFCN4))
                        {
                            str.wARFCN4 = gcm.wARFCN4;
                        }
                        else
                        {
                            str.wARFCN4 = "";
                        }

                        //(14)
                        if (!string.IsNullOrEmpty(gcm.bARFCN4Mode))
                        {
                            str.bARFCN4Mode = gcm.bARFCN4Mode;
                        }
                        else
                        {
                            str.bARFCN4Mode = "";
                        }

                        //(15)
                        if (!string.IsNullOrEmpty(gcm.wARFCN4Duration))
                        {
                            str.wARFCN4Duration = gcm.wARFCN4Duration;
                        }
                        else
                        {
                            str.wARFCN4Duration = "";
                        }

                        //(16)
                        if (!string.IsNullOrEmpty(gcm.wARFCN4Period))
                        {
                            str.wARFCN4Period = gcm.wARFCN4Period;
                        }
                        else
                        {
                            str.wARFCN4Period = "";
                        }

                        #endregion

                        #region 获取黑白名单列表

                        str.lstBwList = new List<strBIE_BwList>();

                        DataTable dt = new DataTable();
                        List<int> listAffDeviceId = new List<int>();
                        listAffDeviceId.Add(dev.id);

                        rtv = gDbHelperUpper.bwlist_record_entity_get(ref dt, listAffDeviceId);
                        if (rtv != 0)
                        {
                            errInfo = gDbHelperUpper.get_rtv_str(rtv);
                            add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                            continue;
                        }

                        foreach (DataRow dr in dt.Rows)
                        {
                            strBIE_BwList bwlist = new strBIE_BwList();

                            if (string.IsNullOrEmpty(dr["imsi"].ToString()))
                            {
                                bwlist.imsi = "";
                            }
                            else
                            {
                                bwlist.imsi = dr["imsi"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["imei"].ToString()))
                            {
                                bwlist.imei = "";
                            }
                            else
                            {
                                bwlist.imei = dr["imei"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["bwFlag"].ToString()))
                            {
                                bwlist.bwFlag = "";
                            }
                            else
                            {
                                bwlist.bwFlag = dr["bwFlag"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["rbStart"].ToString()))
                            {
                                bwlist.rbStart = "";
                            }
                            else
                            {
                                bwlist.rbStart = dr["rbStart"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["rbEnd"].ToString()))
                            {
                                bwlist.rbEnd = "";
                            }
                            else
                            {
                                bwlist.rbEnd = dr["rbEnd"].ToString();
                            }

                            if (string.IsNullOrEmpty(dr["des"].ToString()))
                            {
                                bwlist.des = "";
                            }
                            else
                            {
                                bwlist.des = dr["des"].ToString();
                            }

                            str.lstBwList.Add(bwlist);
                        }

                        #endregion

                        lst.Add(str);
                    }
                }
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }

        /// <summary>
        /// 从数据库中获取所有的批量导出信息
        /// </summary>
        /// <param name="bie">批量的导出信息</param>
        /// <param name="errInfo">错误信息</param>
        /// <returns></returns>
        private int BIE_read_from_DB(ref strBatchImportExport bie, ref string errInfo,ref string JsonText)
        {
            errInfo = "";
            JsonText = "";

            int rtv = -1;
            string info = "";
            try
            {
                //实例化
                bie = new strBatchImportExport();

                bie.lstDomainInfo = new List<strBIE_DomainInfo>();
                bie.lstDeviceInfo = new List<strBIE_DeviceInfo>();

                bie.lstLTE = new List<strBIE_LTE>();
                bie.lstGSM_ZYF = new List<strBIE_GSM_ZYF>();
                bie.lstCDMA_ZYF = new List<strBIE_CDMA_ZYF>();

                rtv = BIE_get_all_domain(ref bie.lstDomainInfo, ref errInfo);
                if (rtv != 0)
                {
                    return -1;
                }
                info = string.Format("(1/5)BIE_read_from_DB，生成域列表成功.\r\n");
                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);


                rtv = BIE_get_all_device(ref bie.lstDeviceInfo, ref errInfo);
                if (rtv != 0)
                {
                    return -1;
                }
                info = string.Format("(2/5)BIE_read_from_DB，生成设备列表成功.\r\n");
                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);


                rtv = BIE_get_all_LTE(ref bie.lstLTE, ref errInfo);
                if (rtv != 0)
                {
                    return -1;
                }
                info = string.Format("(3/5)BIE_read_from_DB，生成LTE设备详细列表成功.\r\n");
                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);


                rtv = BIE_get_all_GSM_ZYF(ref bie.lstGSM_ZYF, ref errInfo);
                if (rtv != 0)
                {
                    return -1;
                }
                info = string.Format("(4/5)BIE_read_from_DB，生成GSM_ZYF设备详细列表成功.\r\n");
                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);


                rtv = BIE_get_all_CDMA_ZYF(ref bie.lstCDMA_ZYF, ref errInfo);
                if (rtv != 0)
                {
                    return -1;
                }
                info = string.Format("(5/5)BIE_read_from_DB，生成CDMA_ZYF设备详细列表成功.\r\n");
                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                JsonText = JsonConvert.SerializeObject(bie);

                #region 格式化输出格式

                if (JsonText.Contains("\"lstDomainInfo\":["))
                {
                    JsonText = JsonText.Replace("\"lstDomainInfo\":[", "\r\n\r\n\"lstDomainInfo\":[\r\n");
                }

                if (JsonText.Contains("\"lstDeviceInfo\":["))
                {
                    JsonText = JsonText.Replace("\"lstDeviceInfo\":[", "\r\n\r\n\"lstDeviceInfo\":[\r\n");
                }

                if (JsonText.Contains("\"lstLTE\":["))
                {
                    JsonText = JsonText.Replace("\"lstLTE\":[", "\r\n\r\n\"lstLTE\":[\r\n");
                }

                if (JsonText.Contains("\"lstGSM_ZYF\":["))
                {
                    JsonText = JsonText.Replace("\"lstGSM_ZYF\":[", "\r\n\r\n\"lstGSM_ZYF\":[\r\n");
                }

                if (JsonText.Contains("\"lstCDMA_ZYF\":["))
                {
                    JsonText = JsonText.Replace("\"lstCDMA_ZYF\":[", "\r\n\r\n\"lstCDMA_ZYF\":[\r\n");
                }

                if (JsonText.Contains("\"lstBwList\":["))
                {
                    JsonText = JsonText.Replace("\"lstBwList\":[", "\r\n\"lstBwList\":[\r\n");
                }

                if (JsonText.Contains("\"bieSys0\""))
                {
                    JsonText = JsonText.Replace("\"bieSys0\"", "\r\n\"bieSys0\"");
                }

                if (JsonText.Contains("\"bieSys1\""))
                {
                    JsonText = JsonText.Replace("\"bieSys1\"", "\r\n\"bieSys1\"");
                }

                if (JsonText.Contains("},{"))
                {
                    JsonText = JsonText.Replace("},{", "},\r\n{");
                }

                #endregion
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }


            return 0;
        }

        /// <summary>
        /// 将批量导入信息写入数据库中
        /// </summary>
        /// <param name="bie">批量的导入信息</param>
        /// <param name="errInfo">错误信息</param>
        /// <returns></returns>
        private int BIE_write_2_DB(strBatchImportExport bie, ref string errInfo)
        {
            int successCnt = 0;
            int rtv = -1;
            int id = -1;

            string outInfo = "";

            try
            {
                #region 清空相关的表

                rtv = BIE_clear_tables_involved();
                if (rtv != 0)
                {
                    string info = string.Format("BIE_write_2_DB,BIE_clear_tables_involved{0}", gDbHelperUpper.get_rtv_str(rtv));
                    add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                }

                outInfo = string.Format("(1/6)BIE_write_2_DB，清空相关表成功.\r\n");
                add_log_info(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, outInfo, "Main", LogCategory.I);

                #endregion

                #region 处理域信息

                if (bie.lstDomainInfo.Count > 0)
                {
                    successCnt = 0;
                    foreach (strBIE_DomainInfo str in bie.lstDomainInfo)
                    {
                        rtv = gDbHelperUpper.domain_record_insert(str.name, str.parentNameFullPath, int.Parse(str.isStation), "bie");
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,domain_record_insert{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                        }

                        if (rtv == 0)
                        {
                            successCnt++;
                        }
                    }

                    if (successCnt > 0)
                    {
                        outInfo = string.Format("(2/6)BIE_write_2_DB，写入域列表成功.\r\n");
                        add_log_info(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                    }
                }

                #endregion

                #region 处理设备信息

                if (bie.lstDeviceInfo.Count > 0)
                {
                    successCnt = 0;
                    foreach (strBIE_DeviceInfo str in bie.lstDeviceInfo)
                    {
                        rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(str.parentNameFullPath, ref id);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,domain_get_id_by_nameFullPath:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        rtv = gDbHelperUpper.device_record_insert(id, str.name, str.mode);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,device_record_insert:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        if (rtv == 0)
                        {
                            successCnt++;
                        }
                    }

                    if (successCnt > 0)
                    {
                        outInfo = string.Format("(3/6)BIE_write_2_DB，写入设备列表成功.\r\n");
                        add_log_info(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                    }
                }

                #endregion

                #region 处理LTE各种信息

                if (bie.lstLTE.Count > 0)
                {
                    successCnt = 0;
                    foreach (strBIE_LTE str in bie.lstLTE)
                    {
                        int domainId = -1;
                        int deviceId = -1;
                        string mode = "";
                        strApGenPara apGP = new strApGenPara();

                        //获取当前设备所属的域ID
                        rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(str.parentNameFullPath, ref domainId);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,domain_get_id_by_nameFullPath:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        //获取当前设备对应的ID
                        rtv = gDbHelperUpper.device_record_id_get_by_affdomainid_and_name(domainId, str.name, ref deviceId, ref mode);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,device_record_id_get_by_affdomainid_and_name:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        #region 拷贝参数

                        apGP.mode = str.mode;
                        apGP.primaryplmn = str.primaryplmn;
                        apGP.earfcndl = str.earfcndl;
                        apGP.earfcnul = str.earfcnul;
                        apGP.cellid = str.cellid;
                        apGP.pci = str.pci;
                        apGP.bandwidth = str.bandwidth;
                        apGP.tac = str.tac;
                        apGP.txpower = str.txpower;
                        apGP.periodtac = str.periodtac;
                        apGP.manualfreq = str.manualfreq;
                        apGP.bootMode = str.bootMode;
                        apGP.Earfcnlist = str.Earfcnlist;
                        apGP.Bandoffset = str.Bandoffset;
                        apGP.NTP = str.NTP;
                        apGP.ntppri = str.ntppri;
                        apGP.source = str.source;
                        apGP.ManualEnable = str.ManualEnable;
                        apGP.ManualEarfcn = str.ManualEarfcn;
                        apGP.ManualPci = str.ManualPci;
                        apGP.ManualBw = str.ManualBw;
                        apGP.gps_select = str.gps_select;
                        apGP.otherplmn = str.otherplmn;
                        apGP.periodFreq = str.periodFreq;

                        apGP.res1 = "";
                        apGP.res2 = "";
                        apGP.res3 = "";

                        apGP.activeTime1Start = str.activeTime1Start;
                        apGP.activeTime1Ended = str.activeTime1Ended;
                        apGP.activeTime2Start = str.activeTime2Start;
                        apGP.activeTime2Ended = str.activeTime2Ended;
                        apGP.activeTime3Start = str.activeTime3Start;
                        apGP.activeTime3Ended = str.activeTime3Ended;

                        apGP.time = DateTime.Now.ToString();

                        #endregion

                        rtv = gDbHelperUpper.ap_general_para_record_update(deviceId, apGP);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,ap_general_para_record_update:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        if (rtv == 0)
                        {
                            successCnt++;
                        }

                        #region 插入黑白名单

                        if (str.lstBwList.Count > 0)
                        {
                            List<strBwList> lstSwList = new List<strBwList>();
                            foreach (strBIE_BwList list in str.lstBwList)
                            {
                                strBwList bw = new strBwList();

                                bw.imsi = list.imsi;
                                bw.imei = list.imei;

                                if (list.bwFlag == "black")
                                {
                                    bw.bwFlag = bwType.BWTYPE_BLACK;
                                }
                                else if (list.bwFlag == "white")
                                {
                                    bw.bwFlag = bwType.BWTYPE_WHITE;
                                }
                                else
                                {
                                    bw.bwFlag = bwType.BWTYPE_OTHER;
                                }

                                bw.rbStart = list.rbStart;
                                bw.rbEnd = list.rbEnd;
                                bw.time = DateTime.Now.ToString();

                                bw.des = list.des;
                                bw.linkFlag = "0";
                                bw.affDeviceId = deviceId.ToString();
                                bw.affDomainId = "";

                                lstSwList.Add(bw);

                                //rtv = gDbHelperUpper.bwlist_record_insert(bw, deviceId);
                                //if (rtv != 0)
                                //{
                                //    string info = string.Format("BIE_write_2_DB,bwlist_record_insert:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                //    add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                //    Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                                //    continue;
                                //}
                            }

                            Dictionary<string, string> dicImsiDes = new Dictionary<string, string>();
                            rtv = gDbHelperUpper.bwlist_record_insert_batch(lstSwList, deviceId, dicImsiDes);
                            if (rtv != 0)
                            {
                                string info = string.Format("BIE_write_2_DB,bwlist_record_insert_batch:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);                            
                            }
                        }

                        #endregion
                    }

                    if (successCnt > 0)
                    {
                        outInfo = string.Format("(4/6)BIE_write_2_DB，写入LTE详细列表成功.\r\n");
                        add_log_info(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                    }
                }

                #endregion

                #region 处理GSM_ZYF各种信息

                if (bie.lstGSM_ZYF.Count > 0)
                {
                    successCnt = 0;
                    foreach (strBIE_GSM_ZYF str in bie.lstGSM_ZYF)
                    {
                        int domainId = -1;
                        int deviceId = -1;
                        string mode = "";

                        //获取当前设备所属的域ID
                        rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(str.parentNameFullPath, ref domainId);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,domain_get_id_by_nameFullPath:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        //获取当前设备对应的ID
                        rtv = gDbHelperUpper.device_record_id_get_by_affdomainid_and_name(domainId, str.name, ref deviceId, ref mode);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,device_record_id_get_by_affdomainid_and_name:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        #region 更新参数

                        strGcParamConfig gpc = new strGcParamConfig();
                        strGcMisc gm = new strGcMisc();

                        #region 载波0

                        gpc.bWorkingMode = str.bieSys0.bWorkingMode;
                        gpc.bC = str.bieSys0.bC;
                        gpc.wRedirectCellUarfcn = str.bieSys0.wRedirectCellUarfcn;
                        gpc.dwDateTime = DateTime.Now.ToString();
                        gpc.bPLMNId = str.bieSys0.bPLMNId;
                        gpc.bTxPower = str.bieSys0.bTxPower;
                        gpc.bRxGain = str.bieSys0.bRxGain;
                        gpc.wPhyCellId = str.bieSys0.wPhyCellId;
                        gpc.wLAC = str.bieSys0.wLAC;
                        gpc.wUARFCN = str.bieSys0.wUARFCN;
                        gpc.dwCellId = str.bieSys0.dwCellId;

                        gpc.res1 = "";
                        gpc.res2 = "";
                        gpc.res3 = "";

                        gpc.bindingDevId = "";

                        rtv = gDbHelperUpper.gc_param_config_record_update(0, deviceId, gpc);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,gc_param_config_record_update:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        //////////////////////

                        gm.bSMSOriginalNumLen = str.bieSys0.bSMSOriginalNumLen;
                        gm.bSMSOriginalNum = str.bieSys0.bSMSOriginalNum;
                        gm.bSMSContentLen = str.bieSys0.bSMSContentLen;
                        gm.bSMSContent = str.bieSys0.bSMSContent;

                        gm.activeTime1Start = str.bieSys0.activeTime1Start;
                        gm.activeTime1Ended = str.bieSys0.activeTime1Ended;
                        gm.activeTime2Start = str.bieSys0.activeTime2Start;
                        gm.activeTime2Ended = str.bieSys0.activeTime2Ended;
                        gm.activeTime3Start = str.bieSys0.activeTime3Start;
                        gm.activeTime3Ended = str.bieSys0.activeTime3Ended;

                        gm.activeTime4Start = "";
                        gm.activeTime4Ended = "";
                        gm.bindingDevId = "";

                        rtv = gDbHelperUpper.gc_misc_record_update(0, deviceId, gm);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,gc_misc_record_update:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        #endregion

                        #region 载波1

                        gpc.bWorkingMode = str.bieSys1.bWorkingMode;
                        gpc.bC = str.bieSys1.bC;
                        gpc.wRedirectCellUarfcn = str.bieSys1.wRedirectCellUarfcn;
                        gpc.dwDateTime = DateTime.Now.ToString();
                        gpc.bPLMNId = str.bieSys1.bPLMNId;
                        gpc.bTxPower = str.bieSys1.bTxPower;
                        gpc.bRxGain = str.bieSys1.bRxGain;
                        gpc.wPhyCellId = str.bieSys1.wPhyCellId;
                        gpc.wLAC = str.bieSys1.wLAC;
                        gpc.wUARFCN = str.bieSys1.wUARFCN;
                        gpc.dwCellId = str.bieSys1.dwCellId;

                        gpc.res1 = "";
                        gpc.res2 = "";
                        gpc.res3 = "";

                        gpc.bindingDevId = "";

                        rtv = gDbHelperUpper.gc_param_config_record_update(1, deviceId, gpc);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,gc_param_config_record_update:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        //////////////////////

                        gm.bSMSOriginalNumLen = str.bieSys1.bSMSOriginalNumLen;
                        gm.bSMSOriginalNum = str.bieSys1.bSMSOriginalNum;
                        gm.bSMSContentLen = str.bieSys1.bSMSContentLen;
                        gm.bSMSContent = str.bieSys1.bSMSContent;

                        gm.activeTime1Start = str.bieSys1.activeTime1Start;
                        gm.activeTime1Ended = str.bieSys1.activeTime1Ended;
                        gm.activeTime2Start = str.bieSys1.activeTime2Start;
                        gm.activeTime2Ended = str.bieSys1.activeTime2Ended;
                        gm.activeTime3Start = str.bieSys1.activeTime3Start;
                        gm.activeTime3Ended = str.bieSys1.activeTime3Ended;

                        gm.activeTime4Start = "";
                        gm.activeTime4Ended = "";
                        gm.bindingDevId = "";

                        rtv = gDbHelperUpper.gc_misc_record_update(1, deviceId, gm);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,gc_misc_record_update:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        if (rtv == 0)
                        {
                            successCnt++;
                        }

                        #endregion

                        #endregion

                        #region 插入黑白名单

                        if (str.lstBwList.Count > 0)
                        {
                            List<strBwList> lstSwList = new List<strBwList>();
                            foreach (strBIE_BwList list in str.lstBwList)
                            {
                                strBwList bw = new strBwList();

                                bw.imsi = list.imsi;
                                bw.imei = list.imei;

                                if (list.bwFlag == "black")
                                {
                                    bw.bwFlag = bwType.BWTYPE_BLACK;
                                }
                                else if (list.bwFlag == "white")
                                {
                                    bw.bwFlag = bwType.BWTYPE_WHITE;
                                }
                                else
                                {
                                    bw.bwFlag = bwType.BWTYPE_OTHER;
                                }

                                bw.rbStart = list.rbStart;
                                bw.rbEnd = list.rbEnd;
                                bw.time = DateTime.Now.ToString();

                                bw.des = list.des;
                                bw.linkFlag = "0";
                                bw.affDeviceId = deviceId.ToString();
                                bw.affDomainId = "";

                                lstSwList.Add(bw);                               
                            }

                            //rtv = gDbHelperUpper.gc_imsi_action_record_insert_batch(lstSwList, deviceId,0);
                            //if (rtv != 0)
                            //{
                            //    string info = string.Format("BIE_write_2_DB,gc_imsi_action_record_insert_batch:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            //    add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            //    Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            //    continue;
                            //}

                            Dictionary<string, string> dicImsiDes = new Dictionary<string, string>();
                            rtv = gDbHelperUpper.bwlist_record_insert_batch(lstSwList, deviceId, dicImsiDes);
                            if (rtv != 0)
                            {
                                string info = string.Format("BIE_write_2_DB,bwlist_record_insert_batch:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            }
                        }                       
                        
                        #endregion
                    }

                    if (successCnt > 0)
                    {
                        outInfo = string.Format("(5/6)BIE_write_2_DB，写入GSM_ZYF详细列表成功.\r\n");
                        add_log_info(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                    }
                }

                #endregion

                #region 处理CDMA_ZYF各种信息

                if (bie.lstCDMA_ZYF.Count > 0)
                {
                    successCnt = 0;
                    foreach (strBIE_CDMA_ZYF str in bie.lstCDMA_ZYF)
                    {
                        int domainId = -1;
                        int deviceId = -1;
                        string mode = "";

                        //获取当前设备所属的域ID
                        rtv = gDbHelperUpper.domain_get_id_by_nameFullPath(str.parentNameFullPath, ref domainId);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,domain_get_id_by_nameFullPath:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        //获取当前设备对应的ID
                        rtv = gDbHelperUpper.device_record_id_get_by_affdomainid_and_name(domainId, str.name, ref deviceId, ref mode);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,device_record_id_get_by_affdomainid_and_name:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        #region 更新参数

                        strGcParamConfig gpc = new strGcParamConfig();
                        strGcMisc gm = new strGcMisc();

                        gpc.bWorkingMode = str.bWorkingMode;
                        gpc.bC = str.bC;
                        gpc.wRedirectCellUarfcn = str.wRedirectCellUarfcn;
                        gpc.dwDateTime = DateTime.Now.ToString();
                        gpc.bPLMNId = str.bPLMNId;
                        gpc.bTxPower = str.bTxPower;
                        gpc.bRxGain = str.bRxGain;
                        gpc.wPhyCellId = str.wPhyCellId;
                        gpc.wLAC = str.wLAC;
                        gpc.wUARFCN = str.wUARFCN;
                        gpc.dwCellId = str.dwCellId;

                        gpc.res1 = "";
                        gpc.res2 = "";
                        gpc.res3 = "";

                        gpc.bindingDevId = "";

                        rtv = gDbHelperUpper.gc_param_config_record_update(-1, deviceId, gpc);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,gc_param_config_record_update:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        //////////////////////

                        gm.bSMSOriginalNumLen = str.bSMSOriginalNumLen;
                        gm.bSMSOriginalNum = str.bSMSOriginalNum;
                        gm.bSMSContentLen = str.bSMSContentLen;
                        gm.bSMSContent = str.bSMSContent;

                        gm.activeTime1Start = str.activeTime1Start;
                        gm.activeTime1Ended = str.activeTime1Ended;
                        gm.activeTime2Start = str.activeTime2Start;
                        gm.activeTime2Ended = str.activeTime2Ended;
                        gm.activeTime3Start = str.activeTime3Start;
                        gm.activeTime3Ended = str.activeTime3Ended;

                        gm.activeTime4Start = "";
                        gm.activeTime4Ended = "";
                        gm.bindingDevId = "";

                        rtv = gDbHelperUpper.gc_misc_record_update(-1, deviceId, gm);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,gc_misc_record_update:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        strGcCarrierMsg gcm = new strGcCarrierMsg();
                        gcm.wARFCN1 = str.wARFCN1;
                        gcm.bARFCN1Mode = str.bARFCN1Mode;
                        gcm.bReserved1 = str.bReserved1;
                        gcm.wARFCN1Duration = str.wARFCN1Duration;
                        gcm.wARFCN1Period = str.wARFCN1Period;

                        gcm.wARFCN2 = str.wARFCN2;
                        gcm.bARFCN2Mode = str.bARFCN2Mode;
                        gcm.bReserved2 = str.bReserved2;
                        gcm.wARFCN2Duration = str.wARFCN2Duration;
                        gcm.wARFCN2Period = str.wARFCN2Period;

                        gcm.wARFCN3 = str.wARFCN3;
                        gcm.bARFCN3Mode = str.bARFCN3Mode;
                        gcm.bReserved3 = str.bReserved3;
                        gcm.wARFCN3Duration = str.wARFCN3Duration;
                        gcm.wARFCN3Period = str.wARFCN3Period;

                        gcm.wARFCN4 = str.wARFCN4;
                        gcm.bARFCN4Mode = str.bARFCN4Mode;
                        gcm.bReserved4 = str.bReserved4;
                        gcm.wARFCN4Duration = str.wARFCN4Duration;
                        gcm.wARFCN4Period = str.wARFCN4Period;

                        gcm.bindingDevId = "";

                        rtv = gDbHelperUpper.gc_carrier_msg_record_update(-1, deviceId, gcm);
                        if (rtv != 0)
                        {
                            string info = string.Format("BIE_write_2_DB,gc_carrier_msg_record_update:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            continue;
                        }

                        if (rtv == 0)
                        {
                            successCnt++;
                        }

                        #endregion

                        #region 插入黑白名单

                        if (str.lstBwList.Count > 0)
                        {
                            List<strBwList> lstSwList = new List<strBwList>();
                            foreach (strBIE_BwList list in str.lstBwList)
                            {
                                strBwList bw = new strBwList();

                                bw.imsi = list.imsi;
                                bw.imei = list.imei;

                                if (list.bwFlag == "black")
                                {
                                    bw.bwFlag = bwType.BWTYPE_BLACK;
                                }
                                else if (list.bwFlag == "white")
                                {
                                    bw.bwFlag = bwType.BWTYPE_WHITE;
                                }
                                else
                                {
                                    bw.bwFlag = bwType.BWTYPE_OTHER;
                                }

                                bw.rbStart = list.rbStart;
                                bw.rbEnd = list.rbEnd;
                                bw.time = DateTime.Now.ToString();

                                bw.des = list.des;
                                bw.linkFlag = "0";
                                bw.affDeviceId = deviceId.ToString();
                                bw.affDomainId = "";

                                lstSwList.Add(bw);
                            }

                            //rtv = gDbHelperUpper.gc_imsi_action_record_insert_batch(lstSwList, deviceId,-1);
                            //if (rtv != 0)
                            //{
                            //    string info = string.Format("BIE_write_2_DB,gc_imsi_action_record_insert_batch:{0}", gDbHelperUpper.get_rtv_str(rtv));
                            //    add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                            //    Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            //    continue;
                            //}

                            Dictionary<string, string> dicImsiDes = new Dictionary<string, string>();
                            rtv = gDbHelperUpper.bwlist_record_insert_batch(lstSwList, deviceId, dicImsiDes);
                            if (rtv != 0)
                            {
                                string info = string.Format("BIE_write_2_DB,bwlist_record_insert_batch:{0}", gDbHelperUpper.get_rtv_str(rtv));
                                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                            }
                        }

                        #endregion
                    }

                    if (successCnt > 0)
                    {
                        outInfo = string.Format("(6/6)BIE_write_2_DB，写入CDMA_ZYF详细列表成功.\r\n");
                        add_log_info(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.INFO, outInfo, "Main", LogCategory.I);
                    }
                }

                #endregion
            }
            catch (Exception ee)
            {
                add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }

        #endregion

        #region 处理AP的FTP上传

        /// <summary>
        /// 获取前后两个文件列表的集合差
        /// </summary>
        /// <param name="src">原始文件列表</param>
        /// <param name="dst">目的文件列表</param>
        /// <returns>返回的集合差</returns>
        private List<string> FileList_Compare(string[] src, string[] dst)
        {
            List<string> rtv = new List<string>();

            foreach (string str in dst)
            {
                if (!src.Contains(str))
                {
                    rtv.Add(str);
                }
            }

            return rtv;
        }

        /// <summary>
        /// 从NameFormat中获取SN的下标
        /// </summary>
        /// <param name="nameFormat">
        /// pns文件名的nameFormat
        /// %A_[%#I]_%04y_%02m_%02d_%02h_%02f_%02s.pns
        /// 固定以"_"作为分隔符
        /// </param>
        /// <param name="errInfo">错误信息</param>
        /// <returns>
        /// 成功 : >= 0
        /// 失败 : -1
        /// </returns>
        private int Get_SN_Index_From_NameFormatString(string nameFormat,ref string errInfo)
        {
            int rtv = -1;
            errInfo = "";

            if (!nameFormat.Contains("_"))
            {
                errInfo = string.Format("nameFormat = {0},没包含固定的\"_\"\r\n", nameFormat);
                return -1;
            }

            if (!nameFormat.Contains("%A"))
            {
                errInfo = string.Format("nameFormat = {0},没包含固定的\"%A\"\r\n", nameFormat);
                return -1;
            }

            string[] s = nameFormat.Split(new char[] {'_'});
            if (s.Length <= 0)
            {
                errInfo = string.Format("nameFormat = {0},分割后子串的个数为0.\r\n", nameFormat);
                return -1;
            }
            else
            {
                for(int i =0;i< s.Length;i++)
                {
                    if (s[i] == "%A")
                    {
                        rtv = i;
                        break;
                    }
                }               
            }

            return rtv;
        }

        /// <summary>
        /// 从DataFormat中获取各个选项的下标
        /// </summary>
        /// <param name="dataFormat">
        /// 例如："%E,%S,%U,%04y-%02m-%02d %02h:%02f:%02s,%R,%.6J,%.6W,%O\r\n"
        /// 固定以","作为分隔符
        /// </param>
        /// <param name="gInx">dataFormat中各个选项的下标</param>
        /// <param name="errInfo">错误信息</param>
        /// <returns>
        /// 成功 : >= 0
        /// 失败 : -1
        /// </returns>
        private int Get_DataFormat_Index_From_DataFormatString(string dataFormat,ref strApFtpDataFormatInx gInx, ref string errInfo)
        {        
            errInfo = "";
            int successCnt = 0;

            if (!dataFormat.Contains(","))
            {
                errInfo = string.Format("dataFormat = {0},没包含固定的\",\"\r\n", dataFormat);
                return -1;
            }

            gInx.R_Inx = -1;       //AP的Rssi值的下标
            gInx.O_Inx = -1;       //厂商类型的下标
            gInx.T_Inx = -1;       //时间戳的下标
            gInx.IMEI_Inx = -1;    //IMEI的下标
            gInx.TMSI_Inx = -1;    //TMSI的下标
            gInx.IMSI_Inx = -1;    //IMSI的下标
            gInx.U_Inx = -1;       //UserType的下标
            gInx.J_Inx = -1;       //经度的下标
            gInx.W_Inx = -1;       //纬度的下标
           
            string[] s = dataFormat.Split(new char[] {','});
            if (s.Length <= 0)
            {
                errInfo = string.Format("dataFormat = {0},分割后子串的个数为0.\r\n", dataFormat);
                return -1;
            }
            else
            {
                for (int i = 0; i < s.Length; i++)
                {
                    if ( (s[i] == "%R") || 
                         (s[i].Contains("%") && s[i].Contains("R")))
                    {
                        gInx.R_Inx = i;
                        successCnt++;
                        continue;
                    }

                    if ((s[i] == "%O") || 
                        (s[i].Contains("%") && s[i].Contains("O")))
                    {
                        gInx.O_Inx = i;
                        successCnt++;
                        continue;
                    }

                    if ((s[i] == "%t") || 
                        (s[i].Contains("y") && s[i].Contains("m") && s[i].Contains("d"))  ||
                        (s[i].Contains("h") && s[i].Contains("f") && s[i].Contains("s")) )
                    {
                        gInx.T_Inx = i;
                        successCnt++;
                        continue;
                    }

                    if ((s[i] == "%E") ||
                        (s[i].Contains("%") && s[i].Contains("E")))
                    {
                        gInx.IMEI_Inx = i;
                        successCnt++;
                        continue;
                    }

                    if ((s[i] == "%T") ||
                        (s[i].Contains("%") && s[i].Contains("T")))
                    {
                        gInx.TMSI_Inx = i;
                        successCnt++;
                        continue;
                    }

                    if ((s[i] == "%S") ||
                        (s[i].Contains("%") && s[i].Contains("S")))
                    {
                        gInx.IMSI_Inx = i;
                        successCnt++;
                        continue;
                    }

                    if ((s[i] == "%U") ||
                       (s[i].Contains("%") && s[i].Contains("U")))
                    {
                        gInx.U_Inx = i;
                        successCnt++;
                        continue;
                    }

                    if ((s[i] == "%.6J") ||
                       (s[i].Contains("%") && s[i].Contains("J")))
                    {
                        gInx.J_Inx = i;
                        successCnt++;
                        continue;
                    }

                    if ((s[i] == "%.6W") ||
                       (s[i].Contains("%") && s[i].Contains("W")))
                    {
                        gInx.W_Inx = i;
                        successCnt++;
                        continue;
                    }

                }
            }

            if (successCnt >= 1)
            {
                return 0;
            }
            else
            {
                return -1;
            }
        }

        /// <summary>
        /// 从文件名中的SN号获取设备的各种信息
        /// </summary>
        /// <param name="pnsFileName">
        /// pns文件名：EN1801S123456789_[172.17.0.200]_2016_12_09_08_50_42.pns
        /// </param>
        /// <param name="devInfo">设备的各种信息</param>
        /// <returns>
        /// 成功 : >= 0
        /// 失败 : -1
        /// </returns>
        private int Get_DeviceId_From_FileName(string pnsFileName,ref strDevice devInfo,ref string errInfo)
        {
            int rtv = -1;
            int cnt = 0;
            errInfo = "";

            if (!pnsFileName.Contains("_"))
            {
                errInfo = string.Format("pns文件名={0},务必包含\"_\"\r\n", pnsFileName);
                return -1;
            }            

            if (snIndexOfNameFormat == -1)
            {
                errInfo = string.Format("snIndexOfNameFormat = -1\r\n");
                return -1;
            }

            string[] s = pnsFileName.Split(new char[] {'_'});

            if (s.Length <= 0)
            {
                errInfo = string.Format("pns文件名={0},分割后的子串长度<=0.\r\n", pnsFileName);
                return -1;
            }
            else
            {
                if (snIndexOfNameFormat >= s.Length)
                {
                    errInfo = string.Format("snIndexOfNameFormat={0} >= s.Length={1}.\r\n", snIndexOfNameFormat, s.Length);
                    return -1;
                }

                string SN = s[snIndexOfNameFormat];
                devInfo = new strDevice();

                foreach (strDevice str in gDicDevFullName.Values)
                {                    
                    if (str.sn == SN)
                    {
                        rtv = 0;
                        devInfo = str;
                        break;
                    }
                    else
                    {
                        cnt++;
                    }
                }

                if (cnt == gDicDevFullName.Values.Count)
                {
                    errInfo = string.Format("SN = {0}，在gDicDevFullName.Values中找不到对应的devInfo.\r\n", SN);
                }
            }

            return rtv;
        }

        /// <summary>
        /// 从ApFtp文件中获取各个捕号信息
        /// </summary>
        /// <param name="devInfo">设备信息</param>
        /// <param name="fullPathName">文件的全路径</param>
        /// <param name="capLst">捕号信息内部</param>
        /// <param name="errInfo">捕号信息内部</param>
        /// <returns>
        /// 成功 : >= 0
        /// 失败 : -1
        /// </returns>
        private int Get_captureInfo_From_File(strDevice devInfo, string fullPathName, ref List<strCapture> capLst,ref string errInfo)
        {          
            errInfo = "";
            try
            {
                if (!File.Exists(fullPathName))
                {
                    errInfo = string.Format("文件:{0},不存在.\r\n", fullPathName);
                    return -1;
                }

                capLst = new List<strCapture>();

                string[] lines = System.IO.File.ReadAllLines(@fullPathName);
                foreach (string line in lines)
                {
                    strCapture cap = new strCapture();
                    if (string.IsNullOrEmpty(line))
                    {
                        errInfo = string.Format("line is NULL.\r\n");
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        continue;
                    }

                    string[] s = line.Split(new char[] { ',' });
                    if (s.Length <= 0)
                    {
                        errInfo = string.Format("line = {0},分割后子串的个数为0.\r\n", line);
                        add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                        continue;
                    }

                    cap.affDeviceId = devInfo.id.ToString();
                    cap.name = devInfo.station_and_name;
                    cap.sn = devInfo.sn;
                    cap.isdn = "";

                    if (gDicDevId_Imsi_Des.ContainsKey(cap.affDeviceId))
                    {
                        if (gDicDevId_Imsi_Des[cap.affDeviceId].ContainsKey(cap.imsi))
                        {
                            cap.des = gDicDevId_Imsi_Des[cap.affDeviceId][cap.imsi];
                        }
                        else
                        {
                            cap.des = "";
                        }
                    }
                    else
                    {
                        cap.des = "";
                    }

                    if (gApFtpDataFormatInx.U_Inx != -1)
                    {
                        if (gApFtpDataFormatInx.U_Inx <= s.Length)
                        {
                            /*
                             * 数据库中的枚举是从1开始算起的
                             */
                            cap.bwFlag = (bwType)(int.Parse(s[gApFtpDataFormatInx.U_Inx]) + 1);
                        }
                    }

                    if (gApFtpDataFormatInx.IMSI_Inx != -1)
                    {
                        if (gApFtpDataFormatInx.IMSI_Inx <= s.Length)
                        {
                            cap.imsi = s[gApFtpDataFormatInx.IMSI_Inx];
                        }
                        else
                        {
                            cap.imsi = "";
                        }
                    }
                    else
                    {
                        cap.imsi = "";
                    }

                    if (gApFtpDataFormatInx.IMEI_Inx != -1)
                    {
                        if (gApFtpDataFormatInx.IMEI_Inx <= s.Length)
                        {
                            cap.imei = s[gApFtpDataFormatInx.IMEI_Inx];
                        }
                        else
                        {
                            cap.imei = "";
                        }
                    }
                    else
                    {
                        cap.imei = "";
                    }

                    if (gApFtpDataFormatInx.TMSI_Inx != -1)
                    {
                        if (gApFtpDataFormatInx.TMSI_Inx <= s.Length)
                        {
                            cap.tmsi = s[gApFtpDataFormatInx.TMSI_Inx];
                        }
                        else
                        {
                            cap.tmsi = "";
                        }
                    }
                    else
                    {
                        cap.tmsi = "";
                    }

                    if (gApFtpDataFormatInx.R_Inx != -1)
                    {
                        if (gApFtpDataFormatInx.R_Inx <= s.Length)
                        {
                            cap.bsPwr = s[gApFtpDataFormatInx.R_Inx];
                        }
                        else
                        {
                            cap.bsPwr = "";
                        }
                    }

                    if (gApFtpDataFormatInx.T_Inx != -1)
                    {
                        if (gApFtpDataFormatInx.T_Inx <= s.Length)
                        {
                            cap.time = s[gApFtpDataFormatInx.T_Inx];
                        }
                        else
                        {
                            cap.time = DateTime.Now.ToString();
                        }
                    }

                    capLst.Add(cap);
                }

            }
            catch (Exception ee)
            {
                errInfo = ee.Message + ee.StackTrace;
                add_log_info(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, errInfo, "Main", LogCategory.I);
                return -1;
            }

            return 0;
        }

        /// <summary>
        /// 用于处理AP的FTP上传的线程
        /// </summary>
        /// <param name="obj"></param>
        private void thread_for_apFtpUpload__process(object obj)
        {
            #region 变量定义

            string info = "";

            int rtv = -1;
            strDevice devInfo = new strDevice();

            string[] pApFtpFileList;
            List<string> rtvLst = new List<string>();
            List<strCapture> lstCap = new List<strCapture>();

            DateTime startTimeProbe = System.DateTime.Now;
            DateTime endTimeProbe = System.DateTime.Now;
            TimeSpan tsProbe = endTimeProbe.Subtract(startTimeProbe);

            DateTime startTimeConn = System.DateTime.Now;
            DateTime endTimeConn = System.DateTime.Now;
            TimeSpan tsConn = endTimeConn.Subtract(startTimeConn);

            Stopwatch sw = new Stopwatch();
            InterModuleMsgStruct ap = new InterModuleMsgStruct();

            /*
             * 用于多少秒报告一下ApFtp目录的状态
             */
            int Freq_Of_Send_2_Status = 60;

            /*
             * 用于多少秒探测一下ApFtp目录的文件变化
             */
            int Freq_Of_Send_2_Probe = DataController.CheckApFtpUploadFile;            

            #endregion

            #region 初始化

            if (gFtpHelperApFtp.Connected)
            {
                gApFtpFileList = gFtpHelperApFtp.Dir("*.pns");

                info = string.Format("FTP路径:{0},原始文件列表数为:{1}\r\n", DataController.StrApFtpUploadDir, gApFtpFileList.Length);
                add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
            }

            snIndexOfNameFormat = Get_SN_Index_From_NameFormatString(DataController.ApFtpUploadNameFormat,ref info);
            if (snIndexOfNameFormat == -1)
            {
                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
            }

            if (-1 == Get_DataFormat_Index_From_DataFormatString(DataController.ApFtpUploadDataFormat, ref gApFtpDataFormatInx, ref info))
            {
                add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
            }

            #endregion

            while (true)
            {
                Thread.Sleep(100);

                try
                {
                    endTimeConn = System.DateTime.Now;
                    tsConn = endTimeConn.Subtract(startTimeConn);
                    if (tsConn.TotalSeconds >= Freq_Of_Send_2_Status)
                    {
                        //报到线程状态
                        write_monitor_status("ApFtpUpload_Status");
                        startTimeConn = System.DateTime.Now;
                    }


                    endTimeProbe = System.DateTime.Now;
                    tsProbe = endTimeProbe.Subtract(startTimeProbe);

                    if (tsProbe.TotalSeconds >= Freq_Of_Send_2_Probe)
                    {                 
                        //连接状态判断
                        if (gFtpHelperApFtp.Connected == false)
                        {
                            info = string.Format("gFtpHelperApFtp.Connected == false\r\n");
                            add_log_info(LogInfoType.WARN, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.WARN, info, "Main", LogCategory.I);
                            startTimeProbe = System.DateTime.Now;
                            continue;
                        }

                        //获取新的路径文件列表
                        pApFtpFileList = gFtpHelperApFtp.Dir("*.pns");
                        if (pApFtpFileList.Length <= 0)
                        {
                            info = string.Format("获取ApFtp目录的文件列表为0.\r\n");
                            add_log_info(LogInfoType.WARN, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.WARN, info, "Main", LogCategory.I);
                            startTimeProbe = System.DateTime.Now;
                            continue;
                        }

                        #region 处理探测

                        lock (mutex_ApFtp)
                        {
                            rtvLst = FileList_Compare(gApFtpFileList, pApFtpFileList);
                            info = string.Format("FileList_Compare,src个数 = {0}, dst个数 = {1},探测到新文件个数:{2}\r\n", gApFtpFileList.Length, pApFtpFileList.Length, rtvLst.Count);
                            add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                            Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                            if (rtvLst.Count > 0)
                            {
                                foreach (string str in rtvLst)
                                {
                                    sw = new Stopwatch();
                                    sw.Start();

                                    #region 文件名处理

                                    if (Get_DeviceId_From_FileName(str, ref devInfo, ref info) == -1)
                                    {
                                        add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);
                                        continue;
                                    }

                                    #endregion

                                    #region 下载文件

                                    string tmp = string.Format("{0}\\tmp", Application.StartupPath);

                                    //从FTP服务器上下载文件
                                    rtv = gFtpHelperApFtp.Get(str, tmp, str);
                                    if (rtv != 0)
                                    {
                                        info = string.Format("从FTP服务器下载文件:{0}失败.", str);
                                        add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                                        continue;
                                    }

                                    #endregion

                                    #region 处理文件                                   

                                    tmp = string.Format("{0}\\{1}", tmp, str);
                                    info = string.Format("从FTP服务器下载文件:{0}成功，开始处理.", tmp);

                                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                    if (-1 == Get_captureInfo_From_File(devInfo, tmp, ref lstCap, ref info))
                                    {
                                        add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);
                                    }

                                    if (lstCap.Count > 0)
                                    {
                                        foreach (strCapture cap in lstCap)
                                        {
                                            ap = new InterModuleMsgStruct();
                                            ap.AppInfo.Type = AppInnerType.APP_WINDOWS.ToString();
                                            ap.AppInfo.Ip = MsgStruct.AllDevice;
                                            ap.MsgType = "NOTICE";

                                            ap.ApInfo = new Ap_Info_Struct();
                                            ap.ApInfo.SN = devInfo.sn;
                                            ap.ApInfo.Fullname = devInfo.Fullname;
                                            ap.ApInfo.IP = devInfo.ipAddr;
                                            ap.ApInfo.Port = int.Parse(devInfo.port);
                                            ap.ApInfo.Type = devInfo.innerType;


                                            ap.Body.dic = new Dictionary<string, object>();
                                            ap.Body.type = ApMsgType.scanner;

                                            ap.Body.dic.Add("userType", cap.bwFlag - 1);
                                            ap.Body.dic.Add("imsi", cap.imsi);
                                            ap.Body.dic.Add("imei", cap.imei);
                                            ap.Body.dic.Add("isdn", cap.isdn);
                                            ap.Body.dic.Add("tmsi", cap.tmsi);
                                            ap.Body.dic.Add("rsrp", cap.bsPwr);
                                            ap.Body.dic.Add("timestamp", cap.time);
                                            ap.Body.dic.Add("sn", cap.sn);
                                            ap.Body.dic.Add("des", cap.des);

                                            //在此将数据送给AppCtrl_Upper
                                            Send_Msg_2_AppCtrl_Upper(ap);

                                            // IMSI解析                      
                                            Location_And_Operator_Set(cap.imsi);

                                            if (DataController.StrFtpSwitch == "1")
                                            {
                                                // 放入FTP处理队列
                                                lock (mutex_FtpHelper)
                                                {
                                                    recvImsiFromApCtrlCount++;
                                                    gCaptureInfoFtp.Enqueue(cap);
                                                }
                                            }

                                            if (DataController.StrDbSwitch == "1")
                                            {
                                                // 放入DB处理队列
                                                lock (mutex_DbHelper)
                                                {
                                                    gCaptureInfoDb.Enqueue(cap);
                                                }
                                            }
                                        }
                                    }

                                    #endregion

                                    #region 删除文件                         

                                    //删除FTP服务器上的文件
                                    rtv = gFtpHelperApFtp.Delete(str);
                                    if (rtv != 0)
                                    {
                                        info = string.Format("删除FTP服务器文件:{0}失败.", str);
                                        add_log_info(LogInfoType.EROR, info, "Main", LogCategory.I);
                                        Logger.Trace(LogInfoType.EROR, info, "Main", LogCategory.I);                                  
                                    }

                                    #endregion

                                    #region 打印耗时

                                    sw.Stop();
                                    TimeSpan ts2 = sw.Elapsed;

                                    info = string.Format("{0},处理结束，耗时{1}ms\r\n", tmp, ts2.TotalMilliseconds);
                                    add_log_info(LogInfoType.INFO, info, "Main", LogCategory.I);
                                    Logger.Trace(LogInfoType.INFO, info, "Main", LogCategory.I);

                                    #endregion
                                }

                                gApFtpFileList = pApFtpFileList;
                            }
                        }

                        #endregion

                        startTimeProbe = System.DateTime.Now;
                    }                    
                }
                catch (Exception ee)
                {
                    startTimeProbe = System.DateTime.Now;
                    startTimeConn = System.DateTime.Now;

                    add_log_info(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    Logger.Trace(LogInfoType.EROR, ee.Message + ee.StackTrace, "Main", LogCategory.I);
                    continue;
                }
            }
        }

        #endregion
    }
}
